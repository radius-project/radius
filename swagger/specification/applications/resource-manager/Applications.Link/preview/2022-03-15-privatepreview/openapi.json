{
  "swagger": "2.0",
  "info": {
    "title": "Applications.Link Management APIs",
    "version": "2022-03-15-privatepreview",
    "description": "REST APIs for Applications.Link DaprPubSubBroker Resource",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "MongoDatabases"
    },
    {
      "name": "Operations"
    },
    {
      "name": "SqlDatabases"
    },
    {
      "name": "RedisCaches"
    },
    {
      "name": "RabbitMQMessageQueue"
    },
    {
      "name": "DaprSecretStore"
    },
    {
      "name": "DaprStateStore"
    },
    {
      "name": "DaprPubSubBroker"
    }
  ],
  "paths": {
    "/{rootScope}/providers/Applications.Link/daprPubSubBrokers": {
      "get": {
        "operationId": "DaprPubSubBroker_ListByRootScope",
        "tags": [
          "DaprPubSubBroker"
        ],
        "description": "List DaprPubSubBrokerResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/daprPubSubBrokers/{daprPubSubBrokerName}": {
      "get": {
        "operationId": "DaprPubSubBroker_Get",
        "tags": [
          "DaprPubSubBroker"
        ],
        "description": "Get a DaprPubSubBrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprPubSubBrokerName",
            "in": "path",
            "description": "DaprPubSubBroker name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "DaprPubSubBroker_Create",
        "tags": [
          "DaprPubSubBroker"
        ],
        "description": "Create a DaprPubSubBrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprPubSubBrokerName",
            "in": "path",
            "description": "DaprPubSubBroker name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DaprPubSubBrokerResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResource"
            }
          },
          "201": {
            "description": "Resource 'DaprPubSubBrokerResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DaprPubSubBroker_Update",
        "tags": [
          "DaprPubSubBroker"
        ],
        "description": "Update a DaprPubSubBrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprPubSubBrokerName",
            "in": "path",
            "description": "DaprPubSubBroker name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprPubSubBrokerResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "DaprPubSubBroker_Delete",
        "tags": [
          "DaprPubSubBroker"
        ],
        "description": "Delete a DaprPubSubBrokerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprPubSubBrokerName",
            "in": "path",
            "description": "DaprPubSubBroker name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/daprSecretStores": {
      "get": {
        "operationId": "DaprSecretStore_ListByRootScope",
        "tags": [
          "DaprSecretStore"
        ],
        "description": "List DaprSecretStoreResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/daprSecretStores/{daprSecretStoreName}": {
      "get": {
        "operationId": "DaprSecretStore_Get",
        "tags": [
          "DaprSecretStore"
        ],
        "description": "Get a DaprSecretStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprSecretStoreName",
            "in": "path",
            "description": "DaprSecretStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "DaprSecretStore_Create",
        "tags": [
          "DaprSecretStore"
        ],
        "description": "Create a DaprSecretStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprSecretStoreName",
            "in": "path",
            "description": "DaprSecretStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DaprSecretStoreResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResource"
            }
          },
          "201": {
            "description": "Resource 'DaprSecretStoreResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DaprSecretStore_Update",
        "tags": [
          "DaprSecretStore"
        ],
        "description": "Update a DaprSecretStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprSecretStoreName",
            "in": "path",
            "description": "DaprSecretStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprSecretStoreResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "DaprSecretStore_Delete",
        "tags": [
          "DaprSecretStore"
        ],
        "description": "Delete a DaprSecretStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprSecretStoreName",
            "in": "path",
            "description": "DaprSecretStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/daprStateStores": {
      "get": {
        "operationId": "DaprStateStore_ListByRootScope",
        "tags": [
          "DaprStateStore"
        ],
        "description": "List DaprStateStoreResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/daprStateStores/{daprStateStoreName}": {
      "get": {
        "operationId": "DaprStateStore_Get",
        "tags": [
          "DaprStateStore"
        ],
        "description": "Get a DaprStateStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprStateStoreName",
            "in": "path",
            "description": "DaprStateStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "DaprStateStore_Create",
        "tags": [
          "DaprStateStore"
        ],
        "description": "Create a DaprStateStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprStateStoreName",
            "in": "path",
            "description": "DaprStateStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DaprStateStoreResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResource"
            }
          },
          "201": {
            "description": "Resource 'DaprStateStoreResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "DaprStateStore_Update",
        "tags": [
          "DaprStateStore"
        ],
        "description": "Update a DaprStateStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprStateStoreName",
            "in": "path",
            "description": "DaprStateStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/DaprStateStoreResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "DaprStateStore_Delete",
        "tags": [
          "DaprStateStore"
        ],
        "description": "Delete a DaprStateStoreResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "daprStateStoreName",
            "in": "path",
            "description": "DaprStateStore name",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9\\.]*[A-Za-z0-9\\.])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/mongoDatabases": {
      "get": {
        "operationId": "MongoDatabases_ListByRootScope",
        "tags": [
          "MongoDatabases"
        ],
        "description": "List MongoDatabaseResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/mongoDatabases/{mongoDatabaseName}": {
      "get": {
        "operationId": "MongoDatabases_Get",
        "tags": [
          "MongoDatabases"
        ],
        "description": "Get a MongoDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "description": "The name of the MongoDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "MongoDatabases_Create",
        "tags": [
          "MongoDatabases"
        ],
        "description": "Create a MongoDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "description": "The name of the MongoDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MongoDatabaseResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResource"
            }
          },
          "201": {
            "description": "Resource 'MongoDatabaseResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "MongoDatabases_Update",
        "tags": [
          "MongoDatabases"
        ],
        "description": "Update a MongoDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "description": "The name of the MongoDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "MongoDatabases_Delete",
        "tags": [
          "MongoDatabases"
        ],
        "description": "Delete a MongoDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "description": "The name of the MongoDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/mongoDatabases/{mongoDatabaseName}/listSecrets": {
      "post": {
        "operationId": "MongoDatabases_ListSecrets",
        "tags": [
          "MongoDatabases"
        ],
        "description": "Lists secrets values for the specified MongoDatabases resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "description": "The name of the MongoDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseListSecretsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues": {
      "get": {
        "operationId": "RabbitMqMessageQueue_ListByRootScope",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "List RabbitMQMessageQueueResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}": {
      "get": {
        "operationId": "RabbitMqMessageQueue_Get",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "Get a RabbitMQMessageQueueResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "rabbitMQMessageQueueName",
            "in": "path",
            "description": "The name of the RabbitMQMessageQueue link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "RabbitMqMessageQueue_Create",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "Create a RabbitMQMessageQueueResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "rabbitMQMessageQueueName",
            "in": "path",
            "description": "The name of the RabbitMQMessageQueue link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RabbitMQMessageQueueResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResource"
            }
          },
          "201": {
            "description": "Resource 'RabbitMQMessageQueueResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "RabbitMqMessageQueue_Update",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "Update a RabbitMQMessageQueueResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "rabbitMQMessageQueueName",
            "in": "path",
            "description": "The name of the RabbitMQMessageQueue link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RabbitMQMessageQueueResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "RabbitMqMessageQueue_Delete",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "Delete a RabbitMQMessageQueueResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "rabbitMQMessageQueueName",
            "in": "path",
            "description": "The name of the RabbitMQMessageQueue link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}/listSecrets": {
      "post": {
        "operationId": "RabbitMqMessageQueue_ListSecrets",
        "tags": [
          "RabbitMQMessageQueue"
        ],
        "description": "Lists secrets values for the specified RabbitMQMessageQueue resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "rabbitMQMessageQueueName",
            "in": "path",
            "description": "The name of the RabbitMQMessageQueue link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RabbitMQListSecretsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/redisCaches": {
      "get": {
        "operationId": "RedisCaches_ListByRootScope",
        "tags": [
          "RedisCaches"
        ],
        "description": "List RedisCacheResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}": {
      "get": {
        "operationId": "RedisCaches_Get",
        "tags": [
          "RedisCaches"
        ],
        "description": "Get a RedisCacheResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "redisCacheName",
            "in": "path",
            "description": "The name of the RedisCache link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "RedisCaches_Create",
        "tags": [
          "RedisCaches"
        ],
        "description": "Create a RedisCacheResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "redisCacheName",
            "in": "path",
            "description": "The name of the RedisCache link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisCacheResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'RedisCacheResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheResource"
            }
          },
          "201": {
            "description": "Resource 'RedisCacheResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/RedisCacheResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "RedisCaches_Update",
        "tags": [
          "RedisCaches"
        ],
        "description": "Update a RedisCacheResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "redisCacheName",
            "in": "path",
            "description": "The name of the RedisCache link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RedisCacheResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "RedisCaches_Delete",
        "tags": [
          "RedisCaches"
        ],
        "description": "Delete a RedisCacheResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "redisCacheName",
            "in": "path",
            "description": "The name of the RedisCache link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}/listSecrets": {
      "post": {
        "operationId": "RedisCaches_ListSecrets",
        "tags": [
          "RedisCaches"
        ],
        "description": "Lists secrets values for the specified RedisCache resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "redisCacheName",
            "in": "path",
            "description": "The name of the RedisCache link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/RedisCacheListSecretsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/sqlDatabases": {
      "get": {
        "operationId": "SqlDatabases_ListByRootScope",
        "tags": [
          "SqlDatabases"
        ],
        "description": "List SqlDatabaseResource resources by RootScope",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Link/sqlDatabases/{sqlDatabaseName}": {
      "get": {
        "operationId": "SqlDatabases_Get",
        "tags": [
          "SqlDatabases"
        ],
        "description": "Get a SqlDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "sqlDatabaseName",
            "in": "path",
            "description": "The name of the SqlDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "operationId": "SqlDatabases_Create",
        "tags": [
          "SqlDatabases"
        ],
        "description": "Create a SqlDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "sqlDatabaseName",
            "in": "path",
            "description": "The name of the SqlDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'SqlDatabaseResource' update operation succeeded",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResource"
            }
          },
          "201": {
            "description": "Resource 'SqlDatabaseResource' create operation succeeded",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResource"
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "operationId": "SqlDatabases_Update",
        "tags": [
          "SqlDatabases"
        ],
        "description": "Update a SqlDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "sqlDatabaseName",
            "in": "path",
            "description": "The name of the SqlDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseResource"
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "operationId": "SqlDatabases_Delete",
        "tags": [
          "SqlDatabases"
        ],
        "description": "Delete a SqlDatabaseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "sqlDatabaseName",
            "in": "path",
            "description": "The name of the SqlDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Link/sqlDatabases/{sqlDatabaseName}/listSecrets": {
      "post": {
        "operationId": "SqlDatabases_ListSecrets",
        "tags": [
          "SqlDatabases"
        ],
        "description": "Lists secrets values for the specified SqlDatabase resource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Radius.V1.RootScopeParameter"
          },
          {
            "name": "sqlDatabaseName",
            "in": "path",
            "description": "The name of the SqlDatabase link resource",
            "required": true,
            "type": "string",
            "maxLength": 63,
            "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
            "x-ms-parameter-location": "method"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/SqlDatabaseListSecretsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Applications.Link/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "DaprPubSubBrokerProperties": {
      "type": "object",
      "description": "DaprPubSubBroker link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the daprPubSubBroker resource at the time the operation was called",
          "readOnly": true
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the daprPubSubBroker resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprPubSubBroker link"
        },
        "resources": {
          "type": "array",
          "description": "A collection of references to resources associated with the daprPubSubBroker",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "type": {
          "type": "string",
          "description": "DaprPubSubBroker type. These strings match the format used by Dapr Kubernetes configuration format."
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicDaprResourceProperties"
        }
      ]
    },
    "DaprPubSubBrokerResource": {
      "type": "object",
      "description": "DaprPubSubBroker link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DaprPubSubBrokerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DaprPubSubBrokerResourceListResult": {
      "type": "object",
      "description": "The response of a DaprPubSubBrokerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DaprPubSubBrokerResource items on this page",
          "items": {
            "$ref": "#/definitions/DaprPubSubBrokerResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DaprPubSubBrokerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DaprPubSubBrokerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DaprPubSubBrokerResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DaprPubSubBrokerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DaprPubSubBrokerResource.",
      "properties": {
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the daprPubSubBroker resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprPubSubBroker link"
        },
        "resources": {
          "type": "array",
          "description": "A collection of references to resources associated with the daprPubSubBroker",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "type": {
          "type": "string",
          "description": "DaprPubSubBroker type. These strings match the format used by Dapr Kubernetes configuration format."
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "DaprSecretStoreProperties": {
      "type": "object",
      "description": "DaprSecretStore link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the dapr secret store link at the time the operation was called",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Dapr Secret Store type. These strings match the types defined in Dapr Component format: https://docs.dapr.io/reference/components-reference/supported-secret-stores/"
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the Secret Store resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprSecretStore link"
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicDaprResourceProperties"
        }
      ]
    },
    "DaprSecretStoreResource": {
      "type": "object",
      "description": "DaprSecretStore link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DaprSecretStoreProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DaprSecretStoreResourceListResult": {
      "type": "object",
      "description": "The response of a DaprSecretStoreResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DaprSecretStoreResource items on this page",
          "items": {
            "$ref": "#/definitions/DaprSecretStoreResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DaprSecretStoreResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DaprSecretStoreResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DaprSecretStoreResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DaprSecretStoreResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DaprSecretStoreResource.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Dapr Secret Store type. These strings match the types defined in Dapr Component format: https://docs.dapr.io/reference/components-reference/supported-secret-stores/"
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the Secret Store resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprSecretStore link"
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "DaprStateStoreProperties": {
      "type": "object",
      "description": "DaprStateStore link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the DaprStateStore link at the time the operation was called",
          "readOnly": true
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the state store resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprStateStore link"
        },
        "resources": {
          "type": "array",
          "description": "A collection of references to resources associated with the state store",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "type": {
          "type": "string",
          "description": "Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format."
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicDaprResourceProperties"
        }
      ]
    },
    "DaprStateStoreResource": {
      "type": "object",
      "description": "DaprStateStore link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/DaprStateStoreProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "DaprStateStoreResourceListResult": {
      "type": "object",
      "description": "The response of a DaprStateStoreResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DaprStateStoreResource items on this page",
          "items": {
            "$ref": "#/definitions/DaprStateStoreResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DaprStateStoreResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DaprStateStoreResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/DaprStateStoreResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "DaprStateStoreResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DaprStateStoreResource.",
      "properties": {
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata for the state store resource. This should match the values specified in Dapr component spec",
          "properties": {}
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the daprStateStore link"
        },
        "resources": {
          "type": "array",
          "description": "A collection of references to resources associated with the state store",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "type": {
          "type": "string",
          "description": "Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format."
        },
        "version": {
          "type": "string",
          "description": "Dapr component version"
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "MongoDatabaseListSecretsResult": {
      "type": "object",
      "description": "The secret values for the given MongoDatabase resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Mongo database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Mongo database"
        }
      }
    },
    "MongoDatabaseProperties": {
      "type": "object",
      "description": "MongoDatabase link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the mongo database link at the time the operation was called",
          "readOnly": true
        },
        "secrets": {
          "$ref": "#/definitions/MongoDatabaseSecrets",
          "description": "Secret values provided for the resource"
        },
        "host": {
          "type": "string",
          "description": "Host name of the target Mongo database"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Mongo database"
        },
        "database": {
          "type": "string",
          "description": "Database name of the target Mongo database"
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the MongoDB link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the MongoDB resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Mongo database"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicResourceProperties"
        }
      ]
    },
    "MongoDatabaseResource": {
      "type": "object",
      "description": "MongoDatabase link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MongoDatabaseProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MongoDatabaseResourceListResult": {
      "type": "object",
      "description": "The response of a MongoDatabaseResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MongoDatabaseResource items on this page",
          "items": {
            "$ref": "#/definitions/MongoDatabaseResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MongoDatabaseResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MongoDatabaseResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/MongoDatabaseResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "MongoDatabaseResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MongoDatabaseResource.",
      "properties": {
        "secrets": {
          "$ref": "#/definitions/MongoDatabaseSecrets",
          "description": "Secret values provided for the resource"
        },
        "host": {
          "type": "string",
          "description": "Host name of the target Mongo database"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Mongo database"
        },
        "database": {
          "type": "string",
          "description": "Database name of the target Mongo database"
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the MongoDB link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the MongoDB resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Mongo database"
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "MongoDatabaseSecrets": {
      "type": "object",
      "description": "The secret values for the given MongoDatabase resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Mongo database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Mongo database"
        }
      }
    },
    "Parameters": {
      "type": "object",
      "description": "Key/value parameters to pass into the recipe at deployment",
      "properties": {}
    },
    "RabbitMQListSecretsResult": {
      "type": "object",
      "description": "The secret values for the given RabbitMQMessageQueue resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "The password used to connect to the RabbitMQ instance"
        },
        "uri": {
          "type": "string",
          "description": "The connection URI of the RabbitMQ instance. Generated automatically from host, port, SSL, username, password, and vhost. Can be overridden with a custom value"
        }
      }
    },
    "RabbitMQMessageQueueProperties": {
      "type": "object",
      "description": "RabbitMQMessageQueue link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the rabbitMQ message queue link at the time the operation was called",
          "readOnly": true
        },
        "secrets": {
          "$ref": "#/definitions/RabbitMQSecrets",
          "description": "Secrets provided by resources,"
        },
        "queue": {
          "type": "string",
          "description": "The name of the queue"
        },
        "host": {
          "type": "string",
          "description": "The hostname of the RabbitMQ instance"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the RabbitMQ instance. Defaults to 5672"
        },
        "vHost": {
          "type": "string",
          "description": "The RabbitMQ virtual host (vHost) the client will connect to. Defaults to no vHost."
        },
        "username": {
          "type": "string",
          "description": "The username to use when connecting to the RabbitMQ instance"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the rabbitMQ resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the rabbitMQ link"
        },
        "tls": {
          "type": "boolean",
          "description": "Specifies whether to use SSL when connecting to the RabbitMQ instance"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicResourceProperties"
        }
      ]
    },
    "RabbitMQMessageQueueResource": {
      "type": "object",
      "description": "RabbitMQMessageQueue link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RabbitMQMessageQueueProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "RabbitMQMessageQueueResourceListResult": {
      "type": "object",
      "description": "The response of a RabbitMQMessageQueueResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RabbitMQMessageQueueResource items on this page",
          "items": {
            "$ref": "#/definitions/RabbitMQMessageQueueResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RabbitMQMessageQueueResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the RabbitMQMessageQueueResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/RabbitMQMessageQueueResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "RabbitMQMessageQueueResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the RabbitMQMessageQueueResource.",
      "properties": {
        "secrets": {
          "$ref": "#/definitions/RabbitMQSecrets",
          "description": "Secrets provided by resources,"
        },
        "queue": {
          "type": "string",
          "description": "The name of the queue"
        },
        "host": {
          "type": "string",
          "description": "The hostname of the RabbitMQ instance"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port of the RabbitMQ instance. Defaults to 5672"
        },
        "vHost": {
          "type": "string",
          "description": "The RabbitMQ virtual host (vHost) the client will connect to. Defaults to no vHost."
        },
        "username": {
          "type": "string",
          "description": "The username to use when connecting to the RabbitMQ instance"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the rabbitMQ resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the rabbitMQ link"
        },
        "tls": {
          "type": "boolean",
          "description": "Specifies whether to use SSL when connecting to the RabbitMQ instance"
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "RabbitMQSecrets": {
      "type": "object",
      "description": "The secret values for the given RabbitMQMessageQueue resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "The password used to connect to the RabbitMQ instance"
        },
        "uri": {
          "type": "string",
          "description": "The connection URI of the RabbitMQ instance. Generated automatically from host, port, SSL, username, password, and vhost. Can be overridden with a custom value"
        }
      }
    },
    "Radius.V1.Application": {
      "type": "string",
      "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
    },
    "Radius.V1.BasicDaprResourceProperties": {
      "type": "object",
      "description": "Basic properties of a Dapr component object.",
      "properties": {
        "componentName": {
          "type": "string",
          "description": "The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to use the Dapr component.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicResourceProperties"
        }
      ]
    },
    "Radius.V1.BasicResourceProperties": {
      "type": "object",
      "description": "Basic properties of a Radius resource.",
      "properties": {
        "status": {
          "$ref": "#/definitions/Radius.V1.ResourceStatus",
          "description": "Status of a resource.",
          "readOnly": true
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      },
      "required": [
        "environment"
      ]
    },
    "Radius.V1.OutputResource": {
      "type": "object",
      "description": "Properties of an output resource.",
      "properties": {}
    },
    "Radius.V1.ProvisioningState": {
      "type": "string",
      "description": "Provisioning state of the portable resource at the time the operation was called",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Provisioning",
            "value": "Provisioning",
            "description": "The resource is being provisioned"
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The resource is updating"
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The resource is being deleted"
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "The resource create request has been accepted"
          }
        ]
      },
      "readOnly": true
    },
    "Radius.V1.ResourceReference": {
      "type": "object",
      "description": "Describes a reference to an existing resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource id of an existing resource"
        }
      },
      "required": [
        "id"
      ]
    },
    "Radius.V1.ResourceStatus": {
      "type": "object",
      "description": "Status of a resource.",
      "properties": {
        "outputResources": {
          "type": "array",
          "description": "Properties of an output resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.OutputResource"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Recipe": {
      "type": "object",
      "description": "The recipe used to automatically deploy underlying infrastructure for a link",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the recipe within the environment to use"
        },
        "parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "Key/value parameters to pass into the recipe at deployment"
        }
      },
      "required": [
        "name"
      ]
    },
    "RecipeUpdate": {
      "type": "object",
      "description": "The recipe used to automatically deploy underlying infrastructure for a link",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the recipe within the environment to use"
        },
        "parameters": {
          "$ref": "#/definitions/Parameters",
          "description": "Key/value parameters to pass into the recipe at deployment"
        }
      }
    },
    "RedisCacheListSecretsResult": {
      "type": "object",
      "description": "The secret values for the given RedisCache resource",
      "properties": {
        "connectionString": {
          "type": "string",
          "description": "The connection string used to connect to the Redis cache"
        },
        "password": {
          "type": "string",
          "description": "The password for this Redis cache instance"
        },
        "url": {
          "type": "string",
          "description": "The URL used to connect to the Redis cache"
        }
      }
    },
    "RedisCacheProperties": {
      "type": "object",
      "description": "RedisCache link properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the redis cache link at the time the operation was called",
          "readOnly": true
        },
        "secrets": {
          "$ref": "#/definitions/RedisCacheSecrets",
          "description": "Secrets provided by resource"
        },
        "host": {
          "type": "string",
          "description": "The host name of the target Redis cache"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port value of the target Redis cache"
        },
        "username": {
          "type": "string",
          "description": "The username for Redis cache"
        },
        "tls": {
          "type": "boolean",
          "description": "Specifies whether to enable SSL connections to the Redis cache"
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the Redis caches link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the Redis resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicResourceProperties"
        }
      ]
    },
    "RedisCacheResource": {
      "type": "object",
      "description": "RedisCache link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/RedisCacheProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "RedisCacheResourceListResult": {
      "type": "object",
      "description": "The response of a RedisCacheResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The RedisCacheResource items on this page",
          "items": {
            "$ref": "#/definitions/RedisCacheResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RedisCacheResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the RedisCacheResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/RedisCacheResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "RedisCacheResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the RedisCacheResource.",
      "properties": {
        "secrets": {
          "$ref": "#/definitions/RedisCacheSecrets",
          "description": "Secrets provided by resource"
        },
        "host": {
          "type": "string",
          "description": "The host name of the target Redis cache"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port value of the target Redis cache"
        },
        "username": {
          "type": "string",
          "description": "The username for Redis cache"
        },
        "tls": {
          "type": "boolean",
          "description": "Specifies whether to enable SSL connections to the Redis cache"
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the Redis caches link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the Redis resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "RedisCacheSecrets": {
      "type": "object",
      "description": "The secret values for the given RedisCache resource",
      "properties": {
        "connectionString": {
          "type": "string",
          "description": "The connection string used to connect to the Redis cache"
        },
        "password": {
          "type": "string",
          "description": "The password for this Redis cache instance"
        },
        "url": {
          "type": "string",
          "description": "The URL used to connect to the Redis cache"
        }
      }
    },
    "ResourceProvisioning": {
      "type": "string",
      "description": "Specifies how the underlying service/resource is provisioned and managed. Available values are 'recipe', where Radius manages the lifecycle of the resource through a Recipe, and 'manual', where a user manages the resource and provides the values.",
      "enum": [
        "recipe",
        "manual"
      ],
      "x-ms-enum": {
        "name": "ResourceProvisioning",
        "modelAsString": true,
        "values": [
          {
            "name": "recipe",
            "value": "recipe",
            "description": "The resource lifecycle will be managed by Radius"
          },
          {
            "name": "manual",
            "value": "manual",
            "description": "The resource lifecycle will be managed by the user"
          }
        ]
      }
    },
    "SqlDatabaseListSecretsResult": {
      "type": "object",
      "description": "The secret values for the given SqlDatabase resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Sql database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Sql database"
        }
      }
    },
    "SqlDatabaseProperties": {
      "type": "object",
      "description": "SqlDatabase properties",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/Radius.V1.ProvisioningState",
          "description": "Provisioning state of the Sql database link at the time the operation was called",
          "readOnly": true
        },
        "database": {
          "type": "string",
          "description": "The name of the Sql database."
        },
        "server": {
          "type": "string",
          "description": "The fully qualified domain name of the Sql database."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Sql database"
        },
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Sql database"
        },
        "recipe": {
          "$ref": "#/definitions/Recipe",
          "description": "The recipe used to automatically deploy underlying infrastructure for the sqldatabases link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the SqlDatabase resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "secrets": {
          "$ref": "#/definitions/SqlDatabaseSecrets",
          "description": "Secret values provided for the resource"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Radius.V1.BasicResourceProperties"
        }
      ]
    },
    "SqlDatabaseResource": {
      "type": "object",
      "description": "SqlDatabase link",
      "properties": {
        "properties": {
          "$ref": "#/definitions/SqlDatabaseProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "SqlDatabaseResourceListResult": {
      "type": "object",
      "description": "The response of a SqlDatabaseResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SqlDatabaseResource items on this page",
          "items": {
            "$ref": "#/definitions/SqlDatabaseResource"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SqlDatabaseResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the SqlDatabaseResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/SqlDatabaseResourceUpdateProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "SqlDatabaseResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the SqlDatabaseResource.",
      "properties": {
        "database": {
          "type": "string",
          "description": "The name of the Sql database."
        },
        "server": {
          "type": "string",
          "description": "The fully qualified domain name of the Sql database."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Sql database"
        },
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Sql database"
        },
        "recipe": {
          "$ref": "#/definitions/RecipeUpdate",
          "description": "The recipe used to automatically deploy underlying infrastructure for the sqldatabases link"
        },
        "resources": {
          "type": "array",
          "description": "List of the resource IDs that support the SqlDatabase resource",
          "items": {
            "$ref": "#/definitions/Radius.V1.ResourceReference"
          }
        },
        "resourceProvisioning": {
          "$ref": "#/definitions/ResourceProvisioning",
          "description": "Specifies how the underlying service/resource is provisioned and managed."
        },
        "secrets": {
          "$ref": "#/definitions/SqlDatabaseSecrets",
          "description": "Secret values provided for the resource"
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the portable resource is linked to"
        },
        "application": {
          "$ref": "#/definitions/Radius.V1.Application",
          "description": "Fully qualified resource ID for the application that the portable resource is consumed by"
        }
      }
    },
    "SqlDatabaseSecrets": {
      "type": "object",
      "description": "The secret values for the given SqlDatabase resource",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Sql database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Sql database"
        }
      }
    }
  },
  "parameters": {
    "Radius.V1.RootScopeParameter": {
      "name": "rootScope",
      "in": "path",
      "description": "The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID} and Azure resource scope is /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}",
      "required": true,
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "pattern": "^[-\\w\\._\\(\\)]+$",
      "x-ms-parameter-location": "method",
      "x-ms-skip-url-encoding": true
    }
  }
}
