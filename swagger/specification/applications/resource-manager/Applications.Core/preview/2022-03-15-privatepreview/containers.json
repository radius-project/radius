{
    "swagger": "2.0",
    "info": {
      "title": "Applications.Core Management APIs",
      "description": "REST API for Applications.Core Container Resource",
      "version": "2022-03-15-privatepreview"
    },
    "host": "management.azure.com",
    "schemes": [
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "security": [
      {
        "azure_auth": [
          "user_impersonation"
        ]
      }
    ],
    "securityDefinitions": {
      "azure_auth": {
        "type": "oauth2",
        "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
        "flow": "implicit",
        "description": "Azure Active Directory OAuth2 Flow.",
        "scopes": {
          "user_impersonation": "impersonate your user account"
        }
      }
    },
    "paths": {
      "/subscriptions/{subscriptionId}/providers/Applications.Core/containers": {
        "get": {
          "description": "List all containers in the given subscription.",
          "operationId": "Containers_ListBySubscription",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersListBySubscription": {
              "$ref": "./examples/ContainersListBySubscription.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "List of Container resources",
              "schema": {
                "$ref": "#/definitions/ContainerResourceList"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          },
          "deprecated": false,
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          }
        }
      },
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Core/containers": {
        "get": {
          "description": "List of Containers.",
          "operationId": "Containers_List",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersList": {
              "$ref": "./examples/ContainersList.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "Containers details.",
              "schema": {
                "$ref": "#/definitions/ContainerResourceList"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          },
          "deprecated": false,
          "x-ms-pageable": {
            "nextLinkName": "nextLink"
          }
        }
      },
      "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Core/containers/{containerName}": {
        "get": {
          "description": "Gets the properties of an Container.",
          "operationId": "Containers_Get",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersGet": {
              "$ref": "./examples/ContainersGet.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            },
            {
              "$ref": "#/parameters/ContainerNameParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "Container details.",
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          }
        },
        "put": {
          "description": "Create or update a Container.",
          "operationId": "Containers_CreateOrUpdate",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersPut": {
              "$ref": "./examples/ContainersPut.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            },
            {
              "$ref": "#/parameters/ContainerNameParameter"
            },
            {
              "name": "ContainerResource",
              "description": "containers details",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The resource was updated successfully.",
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            },
            "201": {
              "description": "The resource will be updated asynchronously.",
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          }
        },
        "patch": {
          "description": "Update the properties of an existing Container.",
          "operationId": "Containers_Update",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersPatch": {
              "$ref": "./examples/ContainersPatch.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            },
            {
              "$ref": "#/parameters/ContainerNameParameter"
            },
            {
              "name": "ContainersResource",
              "description": "Container details",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The resource was updated successfully.",
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            },
            "201": {
              "description": "The resource will be updated asynchronously.",
              "schema": {
                "$ref": "#/definitions/ContainerResource"
              }
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          }
        },
        "delete": {
          "description": "Delete a Container.",
          "operationId": "Containers_Delete",
          "produces": [
            "application/json"
          ],
          "x-ms-examples": {
            "ContainersDelete": {
              "$ref": "./examples/ContainersDelete.json"
            }
          },
          "tags": [
            "Containers"
          ],
          "parameters": [
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
            },
            {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
            },
            {
              "$ref": "#/parameters/ContainerNameParameter"
            }
          ],
          "responses": {
            "200": {
              "description": "The container was successfully deleted."
            },
            "202": {
              "description": "The container will be deleted asynchronously."
            },
            "204": {
              "description": "The container does not exist."
            },
            "default": {
              "description": "Error response describing why the operation failed.",
              "schema": {
                "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "ContainerResourceList": {
        "description": "The list of containers.",
        "type": "object",
        "properties": {
          "value": {
            "description": "The list of containers.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "nextLink": {
            "description": "The link used to get the next page of containers list.",
            "type": "string"
          }
        }
      },
      "ContainerResource": {
        "description": "Container",
        "type": "object",
        "x-ms-azure-resource": true,
        "allOf": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/TrackedResource"
          }
        ],
        "required": [
          "properties"
        ],
        "properties": {
          "systemData": {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
          },
          "properties": {
            "x-ms-client-flatten": true,
            "$ref": "#/definitions/ContainerProperties"
          }
        }
      },
      "IamProperties": {
        "properties": {
          "kind": {
            "description": "The kind of IAM provider to configure",
            "type": "string",
            "enum": [
              "azure"
            ],
            "x-ms-enum": {
                "name": "Kind",
                "modelAsString": true
            }
          },
          "roles": {
            "description": "RBAC permissions to be assigned on the source resource",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "kind"
        ]  
      },
      "ConnectionProperties": {
        "properties": {
          "source": {
            "description": "The source of the connection",
            "type": "string"
          },
          "disableDefaultEnvVars":{
            "default":false,
            "type":"boolean"   
          },
          "iam":{
            "$ref": "#/definitions/IamProperties"
          }
        },
        "required": [
          "source"
        ]
      },
      "ContainerPort": {
        "description": "Specifies a listening port for the container",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "containerPort"
        ],
        "properties": {
          "containerPort": {
            "description": "The listening port number",
            "type": "integer"
          },
          "protocol": {
            "description": "Protocol in use by the port",
            "type": "string",
            "enum": [
              "TCP",
              "UDP"
            ],
            "x-ms-enum": {
                "name": "Protocol",
                "modelAsString": true
            }
          },
          "provides": {
            "description": "Specifies a route provided by this port",
            "type": "string"
          }
        }
      },
      "HealthProbeProperties": {
        "description": "Properties for readiness/liveness probe",
        "type": "object",
        "discriminator": "kind",
        "properties": {
          "kind": {
            "description": "The HealthProbeProperties kind",
            "type": "string"
          },
          "initialDelaySeconds": {
            "description": "Initial delay in seconds before probing for readiness/liveness",
            "type": "number"
          },
          "failureThreshold": {
            "description": "Threshold number of times the probe fails after which a failure would be reported",
            "type": "number"
          },
          "periodSeconds": {
            "description": "Interval for the readiness/liveness probe in seconds",
            "type": "number"
          }
        },
        "required": [
          "kind"
        ]
      },
      "HttpGetHealthProbeProperties": {
        "description": "Specifies the properties for readiness/liveness probe using HTTP Get",
        "allOf": [
          {
            "$ref": "#/definitions/HealthProbeProperties"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "containerPort": {
            "description": "The listening port number",
            "type": "integer"
          },
          "path": {
            "description": "The route to make the HTTP request on",
            "type": "string"
          },
          "headers": {
            "description": "Custom HTTP headers to add to the get request",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "kind",
          "containerPort",
          "path"
        ],
        "x-ms-discriminator-value":"httpGet"
      },
      "TcpHealthProbeProperties": {
        "description": "Specifies the properties for readiness/liveness probe using TCP",
        "allOf": [
          {
            "$ref": "#/definitions/HealthProbeProperties"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "containerPort": {
            "description": "The listening port number",
            "type": "integer"
          }
        },
        "required": [
          "kind",
          "containerPort"
        ],
        "x-ms-discriminator-value":"tcp"
      },
      "ExecHealthProbeProperties": {
        "description": "Specifies the properties for readiness/liveness probe using an executable",
        "allOf": [
          {
            "$ref": "#/definitions/HealthProbeProperties"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "command": {
            "description": "Command to execute to probe readiness/liveness",
            "type": "string"
          }
        },
        "required": [
          "kind",
          "command"
        ],
        "x-ms-discriminator-value":"exec"
      },
      "Volume": {
        "description": "Specifies a volume for a container",
        "discriminator": "kind",
        "properties": {
          "kind": {
            "description": "The Volume kind",
            "type": "string"
          },
          "mountPath": {
            "description": "The path where the volume is mounted",
            "type": "string"
          }
        },
        "required": [
          "kind"
        ],
        "type": "object"
      },
      "EphemeralVolume": {
        "description": "Specifies an ephemeral volume for a container",
        "allOf": [
          {
            "$ref": "#/definitions/Volume"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mountPath",
          "kind",
          "managedStore"
        ],
        "properties": {
          "managedStore": {
            "description": "Backing store for the ephemeral volume",
            "type": "string",
            "enum": [
              "memory",
              "disk"
            ],
            "x-ms-enum": {
                "name": "ManagedStore",
                "modelAsString": true
            }
          }
        },
        "x-ms-discriminator-value": "ephemeral"
      },
      "PersistentVolume": {
        "description": "Specifies a persistent volume for a container",
        "allOf": [
          {
            "$ref": "#/definitions/Volume"
          }
        ],
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mountPath",
          "kind",
          "source"
        ],
        "properties": {
          "rbac": {
            "description": "Container read/write access to the volume",
            "type": "string",
            "enum": [
              "read",
              "write"
            ],
            "x-ms-enum": {
                "name": "VolumeRbac",
                "modelAsString": true
            }
          },
          "source": {
            "description": "The source of the volume",
            "type": "string"
          }
        },
        "x-ms-discriminator-value": "persistent"
      },  
      "Container": {
        "description": "Definition of a container.",
        "type": "object",
        "required": [
          "image"
        ],
        "properties": {
          "image": {
            "description": "The registry and image to download and run in your container",
            "type": "string"
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ports": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ContainerPort"
            }
          },
          "readinessProbe": {
            "$ref": "#/definitions/HealthProbeProperties"
          },
          "livenessProbe": {
            "$ref": "#/definitions/HealthProbeProperties"
          },
          "volumes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      },
      "ManualScalingExtension": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/Extension"
          }
        ],
        "description": "ManualScaling Extension",
        "properties": {
          "replicas": {
            "description": "Replica count.",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "x-ms-discriminator-value": "Applications.Core/ManualScaling@v1alpha1"
      },
      "DaprSidecarExtension": {
        "allOf": [
          {
            "$ref": "#/definitions/Extension"
          }
        ],
        "type": "object",
        "description": "Specifies the resource should have a Dapr sidecar injected",
        "required": [
          "appId"
        ],
        "properties": {
          "appPort": {
            "description": "The Dapr appPort. Specifies the internal listening port for the application to handle requests from the Dapr sidecar. ",
            "type": "integer"
          },
          "appId": {
            "description": "The Dapr appId. Specifies the identifier used by Dapr for service invocation.",
            "type": "string"
          },
          "config": {
            "description": "Specifies the Dapr configuration to use for the resource.",
            "type": "string"
          },
          "protocol": {
            "description": "Specifies the Dapr app-protocol to use for the resource.",
            "type": "string",
            "enum": [
              "http",
              "grpc"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": true
            }
          },
          "provides": {
            "description": "Specifies the resource id of a dapr.io.InvokeHttpRoute that can route traffic to this resource.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "x-ms-discriminator-value": "dapr.io/Sidecar@v1alpha1"
      },
      "Extension": {
        "description": "Extension of a resource.",
        "discriminator": "kind",
        "properties": {
          "kind": {
            "description": "Specifies the extensions of a resource.",
            "type": "string"
          }
        },
        "required": [
          "kind"
        ],
        "type": "object"
      },
      "ContainerProperties": {
        "allOf": [
          {
            "$ref": "global.json#/definitions/BasicResourceProperties"
          }
        ],
        "description": "Container properties",
        "type": "object",
        "required": [
          "application",
          "connections",
          "container"
        ],
        "properties": {
          "provisioningState": {
            "readOnly": true,
            "type": "string",
            "description": "Gets the status of the container at the time the operation was called.",
            "enum": [
              "Succeeded",
              "Failed",
              "Canceled",
              "Accepted",
              "Provisioning",
              "Deleting"
            ],
            "x-ms-enum": {
              "name": "ProvisioningState",
              "modelAsString": true
            }
          },
            "application": {
              "description": "Specifies resource id of the application",
              "type": "string"  
            },
            "connections": {
              "additionalProperties": {
                "$ref": "#/definitions/ConnectionProperties",
                "description": "Specifies a connection to another resource."
              },
              "type": "object"
            },
            "container": {
              "$ref": "#/definitions/Container",
              "description": "Definition of a container."
            },
            "extensions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              },
              "description": "Extensions spec of the resource"
            }
          }
        }
    },
    "parameters": {
      "ContainerNameParameter": {
        "name": "containerName",
        "in": "path",
        "required": true,
        "type": "string",
        "description": "The name of the conatiner.",
        "pattern": "^[a-z0-9]+(-[a-z0-9]+)*",
        "maxLength": 128,
        "x-ms-parameter-location": "method"
      }
    }
  }
  