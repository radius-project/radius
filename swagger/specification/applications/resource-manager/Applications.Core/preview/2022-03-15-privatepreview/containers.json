{
  "swagger": "2.0",
  "info": {
    "title": "Applications.Core Management APIs",
    "description": "REST API for Applications.Core Container Resource",
    "version": "2022-03-15-privatepreview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/{rootScope}/providers/Applications.Core/containers": {
      "get": {
        "description": "List all containers in the given scope.",
        "operationId": "Containers_ListByScope",
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "ContainersListByScope": {
            "$ref": "./examples/ContainersListByScope.json"
          }
        },
        "tags": [
          "Containers"
        ],
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "global.json#/parameters/RootScopeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Container resources",
            "schema": {
              "$ref": "#/definitions/ContainerResourceList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "deprecated": false,
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Core/containers/{containerName}": {
      "get": {
        "description": "Gets the properties of an Container.",
        "operationId": "Containers_Get",
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "ContainersGet": {
            "$ref": "./examples/ContainersGet.json"
          }
        },
        "tags": [
          "Containers"
        ],
        "parameters": [
          {
            "$ref": "global.json#/parameters/RootScopeParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ContainerNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Container details.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Create or update a Container.",
        "operationId": "Containers_CreateOrUpdate",
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "ContainersPut": {
            "$ref": "./examples/ContainersPut.json"
          }
        },
        "tags": [
          "Containers"
        ],
        "parameters": [
          {
            "$ref": "global.json#/parameters/RootScopeParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ContainerNameParameter"
          },
          {
            "name": "ContainerResource",
            "description": "containers details",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was updated successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "201": {
            "description": "The resource will be updated asynchronously.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update the properties of an existing Container.",
        "operationId": "Containers_Update",
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "ContainersPatch": {
            "$ref": "./examples/ContainersPatch.json"
          }
        },
        "tags": [
          "Containers"
        ],
        "parameters": [
          {
            "$ref": "global.json#/parameters/RootScopeParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ContainerNameParameter"
          },
          {
            "name": "ContainersResource",
            "description": "Container details",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was updated successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "201": {
            "description": "The resource will be updated asynchronously.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Container.",
        "operationId": "Containers_Delete",
        "produces": [
          "application/json"
        ],
        "x-ms-examples": {
          "ContainersDelete": {
            "$ref": "./examples/ContainersDelete.json"
          }
        },
        "tags": [
          "Containers"
        ],
        "parameters": [
          {
            "$ref": "global.json#/parameters/RootScopeParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ContainerNameParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The container was successfully deleted."
          },
          "202": {
            "description": "The container will be deleted asynchronously."
          },
          "204": {
            "description": "The container does not exist."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ContainerResourceList": {
      "description": "The list of containers.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The list of containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerResource"
          }
        },
        "nextLink": {
          "description": "The link used to get the next page of containers list.",
          "type": "string"
        }
      }
    },
    "ContainerResource": {
      "description": "Container",
      "type": "object",
      "x-ms-azure-resource": true,
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/TrackedResource"
        }
      ],
      "required": [
        "properties"
      ],
      "properties": {
        "systemData": {
          "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/systemData"
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ContainerProperties"
        }
      }
    },
    "IamProperties": {
      "description": "The properties of IAM",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of IAM provider to configure",
          "type": "string",
          "enum": [
            "azure"
          ],
          "x-ms-enum": {
            "name": "Kind",
            "modelAsString": true
          }
        },
        "roles": {
          "description": "RBAC permissions to be assigned on the source resource",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "kind"
      ]
    },
    "ConnectionProperties": {
      "properties": {
        "source": {
          "description": "The source of the connection",
          "type": "string"
        },
        "disableDefaultEnvVars": {
          "default": false,
          "type": "boolean"
        },
        "iam": {
          "$ref": "#/definitions/IamProperties"
        }
      },
      "required": [
        "source"
      ]
    },
    "ContainerPort": {
      "description": "Specifies a listening port for the container",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "containerPort"
      ],
      "properties": {
        "containerPort": {
          "description": "The listening port number",
          "type": "integer"
        },
        "protocol": {
          "description": "Protocol in use by the port",
          "type": "string",
          "enum": [
            "TCP",
            "UDP"
          ],
          "x-ms-enum": {
            "name": "Protocol",
            "modelAsString": true
          }
        },
        "provides": {
          "description": "Specifies a route provided by this port",
          "type": "string"
        }
      }
    },
    "HealthProbeProperties": {
      "description": "Properties for readiness/liveness probe",
      "type": "object",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "description": "The HealthProbeProperties kind",
          "type": "string"
        },
        "initialDelaySeconds": {
          "description": "Initial delay in seconds before probing for readiness/liveness",
          "type": "number"
        },
        "failureThreshold": {
          "description": "Threshold number of times the probe fails after which a failure would be reported",
          "type": "number"
        },
        "periodSeconds": {
          "description": "Interval for the readiness/liveness probe in seconds",
          "type": "number"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds",
          "type": "number"
        }
      },
      "required": [
        "kind"
      ]
    },
    "HttpGetHealthProbeProperties": {
      "description": "Specifies the properties for readiness/liveness probe using HTTP Get",
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "containerPort": {
          "description": "The listening port number",
          "type": "integer"
        },
        "path": {
          "description": "The route to make the HTTP request on",
          "type": "string"
        },
        "headers": {
          "description": "Custom HTTP headers to add to the get request",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "kind",
        "containerPort",
        "path"
      ],
      "x-ms-discriminator-value": "httpGet"
    },
    "TcpHealthProbeProperties": {
      "description": "Specifies the properties for readiness/liveness probe using TCP",
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "containerPort": {
          "description": "The listening port number",
          "type": "integer"
        }
      },
      "required": [
        "kind",
        "containerPort"
      ],
      "x-ms-discriminator-value": "tcp"
    },
    "ExecHealthProbeProperties": {
      "description": "Specifies the properties for readiness/liveness probe using an executable",
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "command": {
          "description": "Command to execute to probe readiness/liveness",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "command"
      ],
      "x-ms-discriminator-value": "exec"
    },
    "Volume": {
      "description": "Specifies a volume for a container",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "description": "The Volume kind",
          "type": "string"
        },
        "mountPath": {
          "description": "The path where the volume is mounted",
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "EphemeralVolume": {
      "description": "Specifies an ephemeral volume for a container",
      "allOf": [
        {
          "$ref": "#/definitions/Volume"
        }
      ],
      "type": "object",
      "additionalProperties": false,
      "required": [
        "mountPath",
        "kind",
        "managedStore"
      ],
      "properties": {
        "managedStore": {
          "description": "Backing store for the ephemeral volume",
          "type": "string",
          "enum": [
            "memory",
            "disk"
          ],
          "x-ms-enum": {
            "name": "ManagedStore",
            "modelAsString": true
          }
        }
      },
      "x-ms-discriminator-value": "ephemeral"
    },
    "PersistentVolume": {
      "description": "Specifies a persistent volume for a container",
      "allOf": [
        {
          "$ref": "#/definitions/Volume"
        }
      ],
      "type": "object",
      "additionalProperties": false,
      "required": [
        "mountPath",
        "kind",
        "source"
      ],
      "properties": {
        "permission": {
          "description": "Container read/write access to the volume",
          "type": "string",
          "enum": [
            "read",
            "write"
          ],
          "x-ms-enum": {
            "name": "VolumePermission",
            "modelAsString": true
          }
        },
        "source": {
          "description": "The source of the volume",
          "type": "string"
        }
      },
      "x-ms-discriminator-value": "persistent"
    },
    "Container": {
      "description": "Definition of a container.",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "The registry and image to download and run in your container",
          "type": "string"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ContainerPort"
          }
        },
        "readinessProbe": {
          "$ref": "#/definitions/HealthProbeProperties"
        },
        "livenessProbe": {
          "$ref": "#/definitions/HealthProbeProperties"
        },
        "volumes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Volume"
          }
        },
        "command": {
          "description": "Entrypoint array. Overrides the container image's ENTRYPOINT",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "Arguments to the entrypoint. Overrides the container image's CMD",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workingDir": {
          "description": "Working directory for the container",
          "type": "string"
        }
      }
    },
    "ContainerExtension": {
      "allOf": [
        {
          "$ref": "global.json#/definitions/Extension"
        }
      ]
    },
    "ManualScalingExtension": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ContainerExtension"
        }
      ],
      "description": "ManualScaling Extension",
      "properties": {
        "replicas": {
          "description": "Replica count.",
          "type": "integer"
        }
      },
      "additionalProperties": false,
      "x-ms-discriminator-value": "manualScaling"
    },
    "DaprSidecarExtension": {
      "allOf": [
        {
          "$ref": "#/definitions/ContainerExtension"
        }
      ],
      "type": "object",
      "description": "Specifies the resource should have a Dapr sidecar injected",
      "required": [
        "appId"
      ],
      "properties": {
        "appPort": {
          "description": "The Dapr appPort. Specifies the internal listening port for the application to handle requests from the Dapr sidecar. ",
          "type": "integer"
        },
        "appId": {
          "description": "The Dapr appId. Specifies the identifier used by Dapr for service invocation.",
          "type": "string"
        },
        "config": {
          "description": "Specifies the Dapr configuration to use for the resource.",
          "type": "string"
        },
        "protocol": {
          "description": "Specifies the Dapr app-protocol to use for the resource.",
          "type": "string",
          "enum": [
            "http",
            "grpc"
          ],
          "x-ms-enum": {
            "name": "Protocol",
            "modelAsString": true
          }
        },
        "provides": {
          "description": "Specifies the resource id of a dapr.io.InvokeHttpRoute that can route traffic to this resource.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "x-ms-discriminator-value": "daprSidecar"
    },
    "ContainerKubernetesMetadataExtension": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ContainerExtension"
        }
      ],
      "description": "Specifies the metadata that should be applied to Kubernetes resources created for the Container resource",
      "properties": {
        "annotations": {
          "description": "Annotations to be applied to the Kubernetes resources output by the resource",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Labels to be applied to the Kubernetes resources output by the resource",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "x-ms-discriminator-value": "kubernetesMetadata"
    },
    "ContainerProperties": {
      "allOf": [
        {
          "$ref": "global.json#/definitions/BasicResourceProperties"
        }
      ],
      "description": "Container properties",
      "type": "object",
      "properties": {
        "provisioningState": {
          "readOnly": true,
          "$ref": "global.json#/definitions/ProvisioningState",
          "description": "Gets the status of the container at the time the operation was called."
        },
        "connections": {
          "additionalProperties": {
            "$ref": "#/definitions/ConnectionProperties",
            "description": "Specifies a connection to another resource."
          },
          "type": "object"
        },
        "container": {
          "$ref": "#/definitions/Container",
          "description": "Definition of a container."
        },
        "identity": {
          "description": "Configuration for supported external identity providers",
          "$ref": "global.json#/definitions/IdentitySettings"
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerExtension"
          },
          "description": "Extensions spec of the resource"
        }
      },
      "required": [
        "application",
        "container"
      ]
    }
  },
  "parameters": {
    "ContainerNameParameter": {
      "name": "containerName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the conatiner.",
      "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$",
      "maxLength": 63,
      "x-ms-parameter-location": "method"
    }
  }
}