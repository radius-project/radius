name: "Count failed runs"
description: This is to count the number of consecutive failed runs.
inputs:
  workflow_id:
    description: 'Workflow ID to use for counting failed runs'
    required: true
  max_workflow_runs:
    description: 'Maximum number of workflow runs to check'
    default: '10'
    required: false
  workflow_event:
    description: 'Maximum number of workflow runs to check'
    default: 'schedule'
    required: false
outputs:
  total_runs:
    value: ${{ steps.count_failures.outputs.result }}
    description: The number of consecutive failed runs
runs:
  using: "composite"
  steps:
    - name: Count recently failed tests
      id: count_failures
      uses: actions/github-script@v7
      with:
        script: |
          // Fetch actions runs to scan the recent failure conclusion runs.
          response = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: core.getInput('workflow_id'),
            event: core.getInput('workflow_event'),
            status: 'completed',
            per_page: core.getInput('max_workflow_runs')
          });

          console.log(response);

          // Scan `failure` conclusion runs to find the consecutive failures while
          // skipping the other conclusions, such as 'cancelled`.
          failureCount = 0;
          for (const run of response.data.workflow_runs) {
            if (run.conclusion === 'failure') {
              failureCount++;
            } else if (run.conclusion === 'success') {
              // If we find a successful run, we can stop scanning.
              break;
            } else {
              // Skipping the other conclusions such as 'cancelled'.
              console.log(`Skipping run ${run.id} with conclusion ${run.conclusion}.`)
            }
          }
          console.log(`Found ${failureCount} failed runs in a row.`);
          return failureCount;
