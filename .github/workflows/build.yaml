# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: build

on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
    paths-ignore:
    - 'docs/**'
  pull_request:
    branches:
      - main
      - release/*
    paths-ignore:
    - 'docs/**'
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: '^1.16.0'
      GOLANGCILINT_VER: 1.26.0
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      RADIUS_PATH: $GITHUB_WORKSPACE/dist/${{ matrix.target_os }}_${{ matrix.target_arch }}/release
      INTEGRATION_TEST_TENANT_ID: ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
      INTEGRATION_TEST_SP_APP_ID: ${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
      INTEGRATION_TEST_SP_PASSWORD: ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
      INTEGRATION_TEST_SUBSCRIPTION_ID: "66d1209e-1382-45d3-99bb-650e6bf63fc0"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Make
        run: make
      - name: Run linter
        if: matrix.target_arch != 'arm' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v2.4.0
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.37
      - name: Run make test
        if: matrix.target_arch != 'arm'
        run: make test
      - name: Upload binary
        uses: actions/upload-artifact@master
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/
          if-no-files-found: error
      - name: Run deploy tests
        if: matrix.target_os == 'linux' && matrix.target_arch != 'arm'
        run: |
          export PATH=$PATH:${{ env.RADIUS_PATH }}
          cd $GITHUB_WORKSPACE
          export AZURE_TENANT_ID=${{ env.INTEGRATION_TEST_TENANT_ID }}
          export AZURE_CLIENT_ID=${{ env.INTEGRATION_TEST_SP_APP_ID }}
          export AZURE_CLIENT_SECRET=${{ env.INTEGRATION_TEST_SP_PASSWORD }}
          export INTEGRATION_TEST_SUBSCRIPTION_ID=${{ env.INTEGRATION_TEST_SUBSCRIPTION_ID }}
          make deploy-tests
  publish:
    needs: [ 'build' ]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/macos-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/linux-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/windows-x64/ --pattern rad.exe'
