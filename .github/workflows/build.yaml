# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Build and Test
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release/*

jobs:
  # The pre_check job determines whether we should skip some workflow
  # jobs.  Currently, it seems that for Required jobs, only the
  # un-parameterized jobs can be skipped while meeting the
  # requirements. For example, `kubernetes_tests` and `deploy_tests`
  # jobs can be skipped while `build` and `image` can't
  # be. Fortunately, the former two jobs are the longest longing as
  # well as the most resource intensive.
  #
  # The reason for this pecularity seems to be that if a job is
  # skipped entirely, the parameter expansion logic did not kick in
  # and did not generate the parameterized job. Once this is confirmed
  # we can probably workaround by adding a dependent "Done" job for
  # parameterized jobs, and only consider those as required.
  #
  # However, the `build` and `images` jobs are considerably less
  # expensive than the `kubernetes_tests` and `deploy_tests` steps, so
  # it may not be worth complicating our workflow for small gain.
  pre_check:
    runs-on: self-hosted
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          paths_ignore: '["**.md"]'

  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: self-hosted
    env:
      GOVER: '^1.17'
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: linux
            target_arch: arm
          - target_os: linux
            target_arch: amd64
          - target_os: windows
            target_arch: amd64
          - target_os: darwin
            target_arch: amd64
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Make build
        run: make build
      - name: Run make test (unit tests)
        if: matrix.target_arch != 'arm' && matrix.target_os == 'linux'
        env:
          GOTEST_OPTS: '-race'
        run: |
          make test
      - name: Run make test-controller (controller tests)
        if: matrix.target_arch != 'arm' && matrix.target_os == 'linux'
        run: make test-controller
      - name: Run make test-localenv (local development tests)
        if: matrix.target_arch != 'arm' && matrix.target_os == 'linux'
        run: make test-localenv
      - name: Upload CLI binary
        uses: actions/upload-artifact@master
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: |
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad.exe

  # Logic here:
  # - always do a docker build for validation
  # - tag the image as latest and with a version if the trigger was a tag
  # - tag the image with the PR version if the trigger was a PR
  # - push the image for pushes to master, or to a tag
  images:
    name: Container image build
    runs-on: self-hosted
    env:
      GOVER: '^1.17'
      REGISTRY: radius.azurecr.io
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: make docker-build
        run: make docker-build
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: latest
      - name: make docker-build (PR)
        run: make docker-build
        if: startsWith(github.ref, 'refs/pull/')
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make docker-build (release)
        run: make docker-build
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: make docker-push (latest)
        run: make docker-push
        if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # push image on push to main or tag
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: latest
      - name: make docker-push (PR)
        run: make docker-push
        if: startsWith(github.ref, 'refs/pull/') # push image on pr
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make docker-push (release)
        run: make docker-push
        if: startsWith(github.ref, 'refs/tags/v') # push image on tag
        env:
          DOCKER_REGISTRY: ${{ env.REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
  helm:
    name: Helm chart build
    needs: ['images']
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      ARTIFACT_DIR: ./dist/Charts
      HELM_PACKAGE_DIR: helm
      REGISTRY: radius.azurecr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install helm
        uses: Azure/setup-helm@v1
        with:
          version: latest
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Package Helm chart
        env:
          HELM_CHARTS_DIR: deploy/Chart
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          helm package ${{ env.HELM_CHARTS_DIR }} --destination ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: Validate correct version of helm chart is set # To make sure the helm chart version matches the release version.
        run: |
          test -f ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/radius-${{ env.REL_CHANNEL }}.0.tgz
      - name: az CLI login
        run: |
          az login --service-principal \
            --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
            --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
            --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
      - name: Push helm chart to ACR
        run: |
          az acr helm push --name radius ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/radius-${{ env.REL_CHANNEL }}.0.tgz --force

  kubernetes_tests:
    name: Run Kubernetes tests
    needs: [ 'build', 'images', 'pre_check' ]
    if: ${{ false }} # Disable until we switch back to github action from ADO pipeline.
    runs-on: self-hosted
    concurrency:
      group: k8s-${{ github.ref }}
      cancel-in-progress: true
    env:
      GOVER: '^1.17'
      DOCKER_REGISTRY: radius.azurecr.io
      # Timeout used for Kubernetes functional tests
      K8S_FUNCTIONALTEST_TIMEOUT: 20m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Get Go Cache path
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: Create KinD Cluster
      uses: helm/kind-action@v1.2.0
      with:
        cluster_name: radius
        version:  v0.11.0
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v1
    - name: Install dapr into cluster
      run: dapr init -k --wait --timeout 600
    - name: Update rad env with Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env init kubernetes --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-controller --tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}

  local_dev_tests:
    name: Run K3s Local Dev tests
    needs: [ 'build', 'images', 'pre_check' ]
    if: ${{ false }} # Skip the job until we revisit this dev env test - https://github.com/project-radius/radius/issues/1907
    runs-on: self-hosted
    concurrency:
      group: dev-${{ github.ref }}
      cancel-in-progress: true
    env:
      GOVER: '^1.17'
      DOCKER_REGISTRY: radius.azurecr.io
      # Timeout used for functional tests
      LOCALDEV_FUNCTIONALTEST_TIMEOUT: 20m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Get Go Cache path
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Setup kubectl
      uses: azure/setup-kubectl@v2.0
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: Install k3d
      run: curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    - name: Run 'rad env init dev'
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env init dev --name dev --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-controller --tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v1
    - name: Install dapr into cluster
      run: dapr init -k --wait --timeout 600
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Local Dev tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.LOCALDEV_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-localdev
    - name: Run Local Dev Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.LOCALDEV_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Run 'rad env delete'
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        dist/rad env delete dev --yes
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}

  deploy_tests:
    name: Run deployment tests
    needs: [ 'build', 'images', 'pre_check' ]
    if: ${{ startsWith(github.ref, 'refs/pull/') && needs.pre_check.outputs.should_skip != 'true' }} # run on PR
    runs-on: self-hosted
    concurrency:
      group: azure-${{ github.ref }}
      cancel-in-progress: true
    env:
      GOVER: '^1.17'

      REGISTRY: radius.azurecr.io

      # Timeout used for Azure functional tests
      AZURE_FUNCTIONALTEST_TIMEOUT: 30m

      # Amount of time we are willing to wait for an available environment
      AZURE_ENVIRONMENT_RESERVE_TIMEOUT: 15m

      # The amount of time during which we consider an environment lease valid.
      # Includes a generous extra grace period for the building of tests and cleanup/deletion
      AZURE_ENVIRONMENT_LEASE_TIMEOUT: 120m
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Get Go Cache path
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Setup Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Print assets (for santity)
      run: |
        echo "Asserts are in: $(cd "$(dirname ".")" && pwd)/$(basename ".")"
        ls -R
      working-directory: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: az CLI login
      run: |
        az login --service-principal \
          --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
          --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
          --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}

    # We create a new test environment in the background so they get cycled through
    # If there are no enviroments available we'll wait for this one to succeed and take it.
    - name: Create new test environment (async)
      uses: actions/github-script@v4
      with:
        github-token: ${{secrets.RADIUS_BOT_TOKEN}}
        script: |
          const pull = await github.pulls.get({
            owner: context.issue.owner,
            repo: context.issue.repo,
            pull_number: context.issue.number
          });

          // Fire repository_dispatch event to trigger environment creation
          await github.repos.createDispatchEvent({
            owner: context.issue.owner,
            repo: context.issue.repo,
            event_type: "create-environment",
            client_payload: { },
          });

      # We select a test environment here and load it into the default
      # radius config so that it will be used by tests
    - name: Reserve test environment
      id: reserve
      run: |
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        mkdir ~/.rad
        go run cmd/testenv/main.go \
          reserve \
          --accountkey ${{ secrets.INTEGRATION_TEST_STORAGE_KEY }} \
          --accountname ${{ secrets.INTEGRATION_TEST_STORAGE_NAME }} \
          --tablename environments \
          --configpath ~/.rad/config.yaml \
          --timeout ${{ env.AZURE_ENVIRONMENT_RESERVE_TIMEOUT }} \
          --lease-timeout ${{ env.AZURE_ENVIRONMENT_LEASE_TIMEOUT }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
        # Output environment name
        echo "::set-output name=environment::$(cat ~/.rad/config.yaml | sed -n 's/.*default: \(.*\)/\1/p')"
    - name: Merge Kubernetes credentials
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        rad env merge-credentials
    - name: Update test environment RP
      run: |
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        go run cmd/testenv/main.go \
          update-rp \
          --configpath ~/.rad/config.yaml \
          --image ${{ env.REGISTRY }}/radius-rp:${{ env.REL_VERSION }} \
          --check-version ${{ env.REL_VERSION }}
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Azure functional tests
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        export TEST_TIMEOUT=${{ env.AZURE_FUNCTIONALTEST_TIMEOUT }}
        cd $GITHUB_WORKSPACE
        echo "PATH is $PATH"
        which rad || { echo "cannot find rad"; exit 1; }
        make test-functional-azure

    # Now we'll delete the test environment we used. This prevents PRs from
    # dirtying state in a preserved environment
    - name: Delete test environment (async)
      if: ${{ success() || steps.reserve.outcome == 'success' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{secrets.RADIUS_BOT_TOKEN}}
        script: |
          const pull = await github.pulls.get({
            owner: context.issue.owner,
            repo: context.issue.repo,
            pull_number: context.issue.number
          });

          // Fire repository_dispatch event delete environment
          await github.repos.createDispatchEvent({
            owner: context.issue.owner,
            repo: context.issue.repo,
            event_type: "delete-environment",
            client_payload: {
              environment: "${{ steps.reserve.outputs.environment }}"
            }
          });

  publish:
    name: Publish rad CLI binaries
    needs: [ 'build' ]
    runs-on: self-hosted
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/macos-x64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-x64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/windows-x64/ --pattern rad.exe --timeout 300'

  delete_artifacts:
    name: Delete artifacts
    if: ${{ always() }}
    needs: [ 'build', 'kubernetes_tests', 'local_dev_tests', 'deploy_tests', 'publish' ]
    runs-on: self-hosted
    steps:
      - name: Delete release artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            rad_cli_windows_amd64
            rad_cli_linux_amd64
            rad_cli_darwin_amd64
            rad_cli_linux_arm
          failOnError: false
