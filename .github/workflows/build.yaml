# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Build and Test
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - features/*
      - release/*

concurrency:
  # Cancel the previously triggered build for only PR build.
  group: build-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  GOVER: '^1.17'
  # Use radiusdev.azurecr.io for PR build. Otherwise, use radius.azurecr.io.
  DOCKER_REGISTRY: ${{ github.event.pull_request.number && 'radiusdev.azurecr.io' || 'radius.azurecr.io' }}

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: linux
            target_arch: arm
          - target_os: linux
            target_arch: arm64
          - target_os: linux
            target_arch: amd64
          - target_os: windows
            target_arch: amd64
          - target_os: darwin
            target_arch: amd64
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Make build
        run: make build
      - name: Run make test (unit tests)
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        env:
          GOTEST_OPTS: '-race'
        run: |
          make test
      - name: Upload CLI binary
        uses: actions/upload-artifact@master
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: |
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad.exe

  # Logic here:
  # - always do a docker build for validation
  # - tag the image as latest and with a version if the trigger was a tag
  # - tag the image with the PR version if the trigger was a PR
  # - push the image for pushes to master, or to a tag
  images:
    name: Container image build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: make docker-build
        run: make docker-build
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: latest
      - name: make docker-build (PR)
        run: make docker-build
        if: startsWith(github.ref, 'refs/pull/')
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make docker-build (release)
        run: make docker-build
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.DOCKER_REGISTRY }}
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: make docker-push (latest)
        run: make docker-push
        if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # push image on push to main or tag
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: latest
      - name: make docker-push (PR)
        run: make docker-push
        if: startsWith(github.ref, 'refs/pull/') # push image on pr
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make docker-push (release)
        run: make docker-push
        if: startsWith(github.ref, 'refs/tags/v') # push image on tag
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
  helm:
    name: Helm chart build
    needs: ['images']
    runs-on: ubuntu-latest
    env:
      ARTIFACT_DIR: ./dist/Charts
      HELM_PACKAGE_DIR: helm
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install helm
        uses: Azure/setup-helm@v1
        with:
          version: latest
      - name: Setup Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Package Helm chart
        env:
          HELM_CHARTS_DIR: deploy/Chart
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          helm package ${{ env.HELM_CHARTS_DIR }} --version ${{ env.CHART_VERSION }} --destination ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: az CLI login
        run: |
          az login --service-principal \
            --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
            --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
            --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
      - name: Push helm chart to ACR
        run: |
          az acr helm push --name radius ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/radius-${{ env.CHART_VERSION }}.tgz --force

  kubernetes_tests:
    name: Run Kubernetes tests
    needs: [ 'build', 'images' ]
    if: ${{ false }} # Disable until we switch back to github action from ADO pipeline.
    runs-on: ubuntu-latest
    env:
      # Timeout used for Kubernetes functional tests
      K8S_FUNCTIONALTEST_TIMEOUT: 20m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Get Go Cache path
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: Create KinD Cluster
      uses: helm/kind-action@v1.2.0
      with:
        cluster_name: radius
        version:  v0.11.0
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v1
    - name: Install dapr into cluster
      run: dapr init -k --wait --timeout 600
    - name: Update rad env with Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env install kubernetes --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-controller --tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}
    - name: Uninstall Radius from Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        rad env uninstall kubernetes
        ./.github/scripts/namespace-is-empty.sh
  
  local_dev_tests:
    name: Run K3s Local Dev tests
    needs: [ 'build', 'images' ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/pull/') # Run on PR only
    env:
      # Timeout used for functional tests
      LOCALDEV_FUNCTIONALTEST_TIMEOUT: 20m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Get Go Cache path
      id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Setup kubectl
      uses: azure/setup-kubectl@v2.0
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: Install k3d
      run: curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    - name: Run 'rad env init dev'
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env init dev --environment dev --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-rp --tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Wait for control-plane ready
      run: |
        kubectl wait --for=condition=ready pod -l app=radius-db -n radius-system --timeout 5m
        sleep 1m
        kubectl wait --for=condition=ready pod -l app=radius-rp -n radius-system --timeout 5m
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Local Dev tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.LOCALDEV_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-localdev
    - name: Run Local Dev Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.LOCALDEV_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Run 'rad env delete'
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        dist/rad env delete dev --yes
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}

  publish:
    name: Publish rad CLI binaries
    needs: [ 'build' ]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_arm
          path: rad_cli_linux_arm
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_arm64
          path: rad_cli_linux_arm64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/macos-x64/ --pattern rad --timeout 300 --overwrite true'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-x64/ --pattern rad --timeout 300 --overwrite true'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_linux_arm
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-arm/ --pattern rad --timeout 300 --overwrite true'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_linux_arm64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-arm64/ --pattern rad --timeout 300 --overwrite true'
      - uses: bacongobbler/azure-blob-storage-upload@v1.2.0
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/windows-x64/ --pattern rad.exe --timeout 300 --overwrite true'

  delete_artifacts:
    name: Delete artifacts
    if: ${{ success() }}
    needs: [ 'build', 'local_dev_tests', 'publish' ]
    runs-on: ubuntu-latest
    steps:
      - name: Delete release artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            rad_cli_windows_amd64
            rad_cli_linux_amd64
            rad_cli_darwin_amd64
            rad_cli_linux_arm
          failOnError: false
