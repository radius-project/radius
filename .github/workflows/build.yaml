# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Build and Test
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - features/*
      - release/*

concurrency:
  # Cancel the previously triggered build for only PR build.
  group: build-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  GOVER: '^1.20'
  # Use radiusdev.azurecr.io for PR build. Otherwise, use radius.azurecr.io.
  DOCKER_REGISTRY: ${{ github.event.pull_request.number && 'radiusdev.azurecr.io' || 'radius.azurecr.io' }}

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: [self-hosted, 1ES.Pool=1ES-Radius ]
    env:
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: linux
            target_arch: arm
          - target_os: linux
            target_arch: arm64
          - target_os: linux
            target_arch: amd64
          - target_os: windows
            target_arch: amd64
          - target_os: darwin
            target_arch: amd64
          - target_os: darwin
            target_arch: arm64
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Restore the previous coverage
        uses: actions/cache/restore@v3
        with:
          path: ./dist/cache
          key: radius-coverage-
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Make build
        run: make build
      - name: Run make test (unit tests)
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        env:
          GOTEST_OPTS: '-race -coverprofile ./dist/ut_coverage_orig.out'
        run: |
          make test
      - name: Generate unit-test coverage files
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          # Remove mock, generated files, and datamodels from original coverage output.
          cat ./dist/ut_coverage_orig.out | grep -v  "mock" | grep -v  "zz_" | grep -v '/datamodel/[A-za-z0-9_]*.go'  > $COVERAGE_FILE
          # Generate reports.
          $GO_TOOL_COVER -func=$COVERAGE_FILE -o ./dist/ut_coverage.txt
          $GO_TOOL_COVER -html=$COVERAGE_FILE -o ./dist/ut_coverage.html
          # Parse total coverage rate from report.
          UT_COVERAGE=`cat ./dist/ut_coverage.txt | grep total: | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Test coverage : $UT_COVERAGE"

          echo "ut_coverage=$UT_COVERAGE" >> $GITHUB_ENV

          mkdir -p ./dist/cache
          MAIN_COVERAGE=0
          if [ -f "./dist/cache/ut_coverage.txt" ]; then
            MAIN_COVERAGE=$(cat ./dist/cache/ut_coverage.txt | grep total: | grep -Eo '[0-9]+\.[0-9]+')
          fi
          echo "main_coverage=$MAIN_COVERAGE" >> $GITHUB_ENV

          if (( $(echo "$UT_COVERAGE < $MAIN_COVERAGE" | bc -l) )) ; then
            COLOR=red
          else
            COLOR=green
          fi
          
          DIFF_RATE=$(echo "$UT_COVERAGE-$MAIN_COVERAGE" | bc -l)
          echo "diff_coverage=$DIFF_RATE" >> $GITHUB_ENV

          echo "coverage_img=https://img.shields.io/badge/coverage-$UT_COVERAGE%25-$COLOR" >> $GITHUB_ENV
          # copy coverage to cache
          cp ./dist/ut_coverage.txt ./dist/cache/
        env:
          COVERAGE_FILE: ./dist/ut_coverage.out
          GO_TOOL_COVER: go tool cover
      - name: Upload CLI binary
        uses: actions/upload-artifact@v3
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: |
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad
            ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/rad.exe
      - name: Upload unit-test coverage artifact
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: actions/upload-artifact@v3
        with:
          name: unit_test_coverage
          path: |
            ./dist/coverage_orig.out
            ./dist/ut_coverage.out
            ./dist/ut_coverage.txt
            ./dist/ut_coverage.html
      - name: Add coverage result comment
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux' && github.event.pull_request && github.event.pull_request.head.repo.full_name == github.repository
        uses: peter-evans/create-or-update-comment@v2.1.1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ![${{ env.ut_coverage }}](${{ env.coverage_img }})

            For the detailed report, please go to `Checks tab`, click `Build and Test`, and then download `unit_test_coverage` artifact at the bottom of build page.

            * Your PR branch coverage: ${{ env.ut_coverage }} %
            * main branch coverage: ${{ env.main_coverage }} %
            * diff coverage: ${{ env.diff_coverage }} %

            > The coverage result does not include the functional test coverage. 
      - name: Save coverage (only main push)
        uses: actions/cache/save@v3
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux' && github.ref == 'refs/heads/main'
        with:
          path: ./dist/cache
          key: radius-coverage-${{ github.sha }}-${{ github.run_number }}

  # Logic here:
  # - always do a docker build for validation
  # - tag the image as latest and with a version if the trigger was a tag
  # - tag the image with the PR version if the trigger was a PR
  # - push the image for pushes to master, or to a tag
  images:
    name: Container image build
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.DOCKER_REGISTRY }}
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
      - name: Push container images (latest)
        run: |
          make docker-test-image-build && make docker-test-image-push
          make docker-multi-arch-push
        if: (github.ref == 'refs/heads/main') # push image to latest on merge to main
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: latest
      - name: Push container images (PR)
        run: |
          make docker-test-image-build && make docker-test-image-push
          make docker-multi-arch-push
        if: startsWith(github.ref, 'refs/pull/') # push image on pr
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: Push container images (release)
        run: |
          make docker-test-image-build && make docker-test-image-push
          make docker-multi-arch-push
        if: startsWith(github.ref, 'refs/tags/v') # push image on tag
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
  helm:
    name: Helm chart build
    needs: ['images']
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    env:
      ARTIFACT_DIR: ./dist/Charts
      HELM_PACKAGE_DIR: helm
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install helm
        uses: Azure/setup-helm@v3
        with:
          version: 'v3.11.1'
      - name: Setup Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Package Helm chart
        env:
          HELM_CHARTS_DIR: deploy/Chart
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          helm package ${{ env.HELM_CHARTS_DIR }} --version ${{ env.CHART_VERSION }} --destination ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: az CLI login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SP_TESTS_APPID }} \
            --password ${{ secrets.AZURE_SP_TESTS_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SP_TESTS_TENANTID }}
      - name: Push helm chart to ACR
        run: |
          az acr helm push --name radius ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/radius-${{ env.CHART_VERSION }}.tgz --force

  kubernetes_tests:
    name: Run Kubernetes tests
    needs: [ 'build', 'images' ]
    if: ${{ false }} # Disable until we switch back to github action from ADO pipeline.
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    env:
      # Timeout used for Kubernetes functional tests
      K8S_FUNCTIONALTEST_TIMEOUT: 60m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup rad CLI
      uses: ./.github/actions/setup-rad-cli
    - name: Create KinD Cluster
      uses: helm/kind-action@v1.4.0
      with:
        cluster_name: radius
        version:  v0.11.0
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v1
    - name: Install dapr into cluster
      run: dapr init -k --wait --timeout 600
    - name: Update rad env with Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env init kubernetes --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-controller --tag ${{ env.REL_VERSION }} --ucp-image ${{ env.DOCKER_REGISTRY }}/ucpd --ucp-tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}
    - name: Uninstall Radius from Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        rad env uninstall kubernetes
        ./.github/scripts/namespace-is-empty.sh

  publish:
    name: Publish rad CLI binaries
    needs: [ 'build' ]
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_darwin_arm64
          path: rad_cli_darwin_arm64
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_linux_arm
          path: rad_cli_linux_arm
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_linux_arm64
          path: rad_cli_linux_arm64
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/macos-x64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_darwin_arm64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/macos-arm64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-x64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_linux_arm
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-arm/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_linux_arm64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-arm64/ --pattern rad --timeout 300'
      - uses: bacongobbler/azure-blob-storage-upload@v3.0.0
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          overwrite: 'true'
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/windows-x64/ --pattern rad.exe --timeout 300'

  delete_artifacts:
    name: Delete artifacts
    if: ${{ success() }}
    needs: [ 'build', 'publish' ]
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    steps:
      - name: Delete release artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            rad_cli_windows_amd64
            rad_cli_linux_amd64
            rad_cli_darwin_amd64
            rad_cli_linux_arm
          failOnError: false
