# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Build and Test
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release/*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: '^1.16.0'
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Make
        run: make
      - name: Run make test (unit tests)
        if: matrix.target_arch != 'arm'
        run: make test
      - name: Upload CLI binary
        uses: actions/upload-artifact@master
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/
          if-no-files-found: error

  # Logic here:
  # - always do a docker build for validation
  # - tag the image as latest and with a version if the trigger was a tag
  # - tag the image with the PR version if the trigger was a PR
  # - push the image for pushes to master, or to a tag
  images:
    name: Container image build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        destination: ['acr', 'dockerhub']
        include:
        - destination: acr
          registry: radius.azurecr.io
          login_server: radius.azurecr.io
          username_secret: DOCKER_USERNAME
          password_secret: DOCKER_PASSWORD
        - destination: dockerhub
          registry: radiusteam
          login_server: https://index.docker.io/v1/
          username_secret: RADIUSTEAM_DOCKERHUB_USERNAME
          password_secret: RADIUSTEAM_DOCKERHUB_PASSWORD
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: make docker
        run: make docker
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: latest
      - name: make docker (PR)
        run: make docker
        if: startsWith(github.ref, 'refs/pull/')
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make docker (release)
        run: make docker
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ matrix.login_server }}
          username: '${{ secrets[matrix.username_secret] }}'
          password: '${{ secrets[matrix.password_secret] }}'
      - name: make dockerpush (latest)
        run: make dockerpush
        if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # push image on push to main or tag
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: latest
      - name: make dockerpush (PR)
        run: make dockerpush
        if: startsWith(github.ref, 'refs/pull/') # push image on pr
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }} # includes PR number
      - name: make dockerpush (release)
        run: make dockerpush
        if: startsWith(github.ref, 'refs/tags/v') # push image on tag
        env:
          DOCKER_REGISTRY: ${{ matrix.registry }}
          DOCKER_TAG_VERSION: ${{ env.REL_CHANNEL }}

  deploy_tests: 
    name: Run deployment tests
    needs: [ 'build', 'images' ]
    if: startsWith(github.ref, 'refs/pull/') # run on PR 
    runs-on: ubuntu-latest
    env:
      GOVER: '^1.16.0'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Parse release version and set environment variables
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Print assets (for santity)
      run: |
        echo "Asserts are in: $(cd "$(dirname ".")" && pwd)/$(basename ".")"
        ls -R
      working-directory: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: az CLI login
      run: |
        az login --service-principal \
          --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
          --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
          --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
      # We select a test environment here and load it into the default 
      # radius config so that it will be used by tests
    - name: Reserve test environment
      id: reserve
      run: |
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        mkdir ~/.rad
        go run cmd/testenv/main.go \
          reserve \
          --accountkey ${{ secrets.INTEGRATION_TEST_STORAGE_KEY }} \
          --accountname ${{ secrets.INTEGRATION_TEST_STORAGE_NAME }} \
          --tablename environments \
          --configpath ~/.rad/config.yaml \
          --timeout 60
        cat ~/.rad/config.yaml
    - name: Merge Kubernetes credentials
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        rad env merge-credentials
    - name: Update test environment RP
      run: |
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        go run cmd/testenv/main.go \
          update-rp \
          --configpath ~/.rad/config.yaml \
          --image radiusteam/radius-rp:${{ env.REL_VERSION }}
    - name: Run deploy tests
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        cd $GITHUB_WORKSPACE
        echo "PATH is $PATH"
        which rad || { echo "cannot find rad"; exit 1; }
        make deploy-tests
    - name: Release test environment
      if: ${{ success() || steps.reserve.outcome == 'success' }}
      run: |
        go run cmd/testenv/main.go \
          release \
          --accountkey ${{ secrets.INTEGRATION_TEST_STORAGE_KEY }} \
          --accountname ${{ secrets.INTEGRATION_TEST_STORAGE_NAME }} \
          --tablename environments \
          --configpath ~/.rad/config.yaml

  publish:
    name: Publish rad CLI binaries
    needs: [ 'build' ] # may want to add needs 'deploy_tests' as well in the future
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/macos-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/linux-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_CHANNEL }}/windows-x64/ --pattern rad.exe'

  codespaces:
    name: Codespaces container image build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Parse release version and set environment variables
        run: python ./.github/scripts/get_release_version.py
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: '${{ secrets.RADIUSTEAM_DOCKERHUB_USERNAME }}' 
          password: '${{ secrets.RADIUSTEAM_DOCKERHUB_PASSWORD }}' 
      - name: Build and push - Codespaces (latest)
        if: (github.ref == 'refs/heads/main') # push image on push to main
        uses: docker/build-push-action@v2
        with:
          context: ./.devcontainer/tutorials-codespace/
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  radiusteam/radcodespace:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push - Codespaces (PR)
        if: startsWith(github.ref, 'refs/pull/') # push image on pr
        uses: docker/build-push-action@v2
        with:
          context: ./.devcontainer/tutorials-codespace/
          builder: ${{ steps.buildx.outputs.name }}
          push: false # don't push image on pr
          tags:  radiusteam/radcodespace:${{ env.REL_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push - Codespaces (release)
        if: startsWith(github.ref, 'refs/tags/v') # push image on tag
        uses: docker/build-push-action@v2
        with:
          context: ./.devcontainer/tutorials-codespace/
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  radiusteam/radcodespace:${{ env.REL_CHANNEL }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
