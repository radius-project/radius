# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: create-environment

on:
  repository_dispatch:
    types:
    - create-environment
jobs:
  create-environment:
    name: Create Environment
    runs-on: ubuntu-latest
    env:
      GOVER: '^1.17'
      GOPROXY: https://proxy.golang.org

      # Radius Test subscription
      INTEGRATION_TEST_SUBSCRIPTION_ID: "85716382-7362-45c3-ae03-2126e459a123"
      # Log Analytics workspace ID where the test logs will be redirected to.
      INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID: "/subscriptions/85716382-7362-45c3-ae03-2126e459a123/resourcegroups/radiusrplogs/providers/microsoft.operationalinsights/workspaces/rplogs"

    # Rough order of logic here
    #
    # - Get code (we need to build/run `rad env init`)
    # - select location randomly
    # - az login
    # - Generate unique resource group name
    # - Create environment
    # - Add environment to environment table
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
        # we use node for generating a UUID for the resource group name
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Select location
        uses: actions/github-script@v4
        id: select-location
        with:
          result-encoding: string
          script: |
            const locations = [
              "eastus",
              // northeurope has been causing capacity problems for us and has been unrelable.
              //"northeurope",
              "westeurope",
              "westus2",
            ];
            return locations[Math.floor(Math.random() * locations.length)];
      # uuid module is used for generating the resource group name
      - run: npm install uuid
      - name: Generate resource group name
        uses: actions/github-script@v4
        id: generate-resource-group-name
        with:
          result-encoding: string
          script: |
            const { v4: uuidv4 }  = require('uuid')
            const suffix = uuidv4().replace(/-/g, '');
            return `rad-${suffix}`;
      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
            --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
            --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
      - name: Create Environment
        run: |
          go run cmd/rad/main.go \
            env init azure \
            -e ${{ steps.generate-resource-group-name.outputs.result }} \
            --subscription-id ${{ env.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
            --resource-group ${{ steps.generate-resource-group-name.outputs.result }} \
            --location "${{ steps.select-location.outputs.result }}" \
            --loganalytics-workspace-id "${{ env.INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID }}"
      - name: Display Environment (Sanity Check)
        run: go run cmd/rad/main.go env list
      - name: Register Environment
        run: |
          go run cmd/testenv/main.go \
            register \
            --accountkey ${{ secrets.INTEGRATION_TEST_STORAGE_KEY }} \
            --accountname ${{ secrets.INTEGRATION_TEST_STORAGE_NAME }} \
            --tablename environments \
            --environment ${{ steps.generate-resource-group-name.outputs.result }} \
            --configpath ~/.rad/config.yaml
      - name: Create issue on failure
        uses: JasonEtco/create-an-issue@v2
        if: failure()
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOWID: ${{ github.run_id }}
          WORKFLOWURL: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        with:
          filename: .github/ISSUE_TEMPLATE/environment-failure.md
      - name: Cleanup on failure
        if: failure()
        continue-on-error: true
        run: |
          az group delete \
            --subscription ${{ env.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
            --resource-group ${{ steps.generate-resource-group-name.outputs.result }} \
            --yes \
            --verbose
