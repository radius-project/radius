# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Functional test
on:
  pull_request:
    branches:
      - main
      - features/*
      - release/*
env:
  # Go version
  GOVER: '^1.20'
  HELMVER: '^v3.10.0'
  GOPROXY: https://proxy.golang.org
  CACHE_REGISTRY: radiusdev.azurecr.io
  FUNCTIONALTEST_TIMEOUT: 60m
  AZURE_REGION: westus3
  AZURE_SUBSCRIPTION_ID: "85716382-7362-45c3-ae03-2126e459a123"

jobs:
  build:
    name: Build Radius for test
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    outputs:
      REL_VERSION: ${{ steps.gen-id.outputs.REL_VERSION }}
      UNIQUE_ID: ${{ steps.gen-id.outputs.UNIQUE_ID }}
      CHECKOUT_REPO: ${{ steps.gen-id.outputs.CHECKOUT_REPO }}
      CHECKOUT_REF: ${{ steps.gen-id.outputs.CHECKOUT_REF }}
    steps:
      - name: Set up checkout target (scheduled)
        if: github.event_name == 'schedule'
        run: |
          echo "CHECKOUT_REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "CHECKOUT_REF=refs/heads/main" >> $GITHUB_ENV
      - name: Set up checkout target (pull_request)
        if: github.event_name == 'pull_request'
        run: |
            echo "CHECKOUT_REPO=${{ github.event.pull_request.head.repo.full_name }}" >> $GITHUB_ENV
            echo "CHECKOUT_REF=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
      - name: Check out code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.CHECKOUT_REPO }}
          ref: ${{ env.CHECKOUT_REF }}
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVER }}
      - name: Get Go Cache path
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Generate ID for release
        id: gen-id
        run: |
          BASE_STR="RADIUS|${GITHUB_SHA}|${GITHUB_SERVER_URL}|${GITHUB_REPOSITORY}|${GITHUB_RUN_ID}|${GITHUB_RUN_ATTEMPT}"
          UNIQUE_ID=$(echo $BASE_STR | sha1sum | head -c 10)
          echo "REL_VERSION=pr-${UNIQUE_ID}" >> $GITHUB_ENV
          
          # Set output variables to be used in the other jobs
          echo "REL_VERSION=pr-${UNIQUE_ID}" >> $GITHUB_OUTPUT
          echo "UNIQUE_ID=${UNIQUE_ID}" >> $GITHUB_OUTPUT
          echo "CHECKOUT_REPO=${{ env.CHECKOUT_REPO }}" >> $GITHUB_OUTPUT
          echo "CHECKOUT_REF=${{ env.CHECKOUT_REF }}" >> $GITHUB_OUTPUT
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            **Release Version:** ${{ steps.gen-id.outputs.REL_VERSION }}
            **Unique ID:** ${{ steps.gen-id.outputs.UNIQUE_ID }}
            **Checkout Repo:** ${{ steps.gen-id.outputs.CHECKOUT_REPO }}
            **Checkout Ref:** ${{ steps.gen-id.outputs.CHECKOUT_REF }}
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_SP_TESTS_APPID }}","clientSecret":"${{ secrets.AZURE_SP_TESTS_PASSWORD }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_SP_TESTS_TENANTID }}"}'
      - name: Login ACR - ${{ env.CACHE_REGISTRY }}
        run: |
          az acr login -n ${{ env.CACHE_REGISTRY }}
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            Build started for ${{ steps.gen-id.outputs.REL_VERSION }}
      - name: Build and Push container images
        run: |
          make docker-build && make docker-push
        env:
          DOCKER_REGISTRY: ${{ env.CACHE_REGISTRY }}
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }}

  kubernetes_tests:
    name: Run Kubernetes tests
    needs: build
    runs-on: [self-hosted,1ES.Pool=1ES-Radius ]
    env:
      # Timeout used for Kubernetes functional tests
      K8S_FUNCTIONALTEST_TIMEOUT: 60m
      RADIUS_CONTAINER_LOG_BASE: dist/container_logs
      RADIUS_CHART_LOCATION: deploy/Chart/
      CHECKOUT_REPO: ${{ needs.build.outputs.CHECKOUT_REPO }}
      CHECKOUT_REF: ${{ needs.build.outputs.CHECKOUT_REF }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          repository: ${{ env.CHECKOUT_REPO }}
          ref: ${{ env.CHECKOUT_REF }}
    - name: Create KinD Cluster
      uses: helm/kind-action@v1.4.0
      with:
        cluster_name: radius
        version:  v0.18.0
    - name: Dapr tool installer
      uses: dapr/setup-dapr@v1
    - name: Install dapr into cluster
      run: |
        dapr init -k --wait --timeout 600
        exit 1
    - name: Update rad env with Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        mkdir ~/.rad
        dist/rad env init kubernetes --chart ${{ env.RADIUS_CHART_LOCATION }} --image ${{ env.DOCKER_REGISTRY }}/radius-controller --tag ${{ env.REL_VERSION }} --ucp-image ${{ env.DOCKER_REGISTRY }}/ucpd --ucp-tag ${{ env.REL_VERSION }}
        # Print config for sanity check
        cat ~/.rad/config.yaml
    - name: Download Bicep
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        cd $GITHUB_WORKSPACE
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
    - name: Run Kubernetes tests (PR)
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export TEST_TIMEOUT=${{ env.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$GITHUB_WORKSPACE/${{ env.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - name: Upload container logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: container_logs
        path: ./${{ env.RADIUS_CONTAINER_LOG_BASE }}
    - name: Uninstall Radius from Kubernetes
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        rad env uninstall kubernetes
        ./.github/scripts/namespace-is-empty.sh

