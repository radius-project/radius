// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/radius/pkg/curp/db (interfaces: CurpDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "github.com/Azure/radius/pkg/curp/db"
	resources "github.com/Azure/radius/pkg/curp/resources"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCurpDB is a mock of CurpDB interface
type MockCurpDB struct {
	ctrl     *gomock.Controller
	recorder *MockCurpDBMockRecorder
}

// MockCurpDBMockRecorder is the mock recorder for MockCurpDB
type MockCurpDBMockRecorder struct {
	mock *MockCurpDB
}

// NewMockCurpDB creates a new mock instance
func NewMockCurpDB(ctrl *gomock.Controller) *MockCurpDB {
	mock := &MockCurpDB{ctrl: ctrl}
	mock.recorder = &MockCurpDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurpDB) EXPECT() *MockCurpDBMockRecorder {
	return m.recorder
}

// DeleteApplicationByID mocks base method
func (m *MockCurpDB) DeleteApplicationByID(arg0 context.Context, arg1 resources.ApplicationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationByID indicates an expected call of DeleteApplicationByID
func (mr *MockCurpDBMockRecorder) DeleteApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationByID", reflect.TypeOf((*MockCurpDB)(nil).DeleteApplicationByID), arg0, arg1)
}

// DeleteComponentByApplicationID mocks base method
func (m *MockCurpDB) DeleteComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponentByApplicationID indicates an expected call of DeleteComponentByApplicationID
func (mr *MockCurpDBMockRecorder) DeleteComponentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).DeleteComponentByApplicationID), arg0, arg1, arg2)
}

// DeleteDeploymentByApplicationID mocks base method
func (m *MockCurpDB) DeleteDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByApplicationID indicates an expected call of DeleteDeploymentByApplicationID
func (mr *MockCurpDBMockRecorder) DeleteDeploymentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).DeleteDeploymentByApplicationID), arg0, arg1, arg2)
}

// DeleteOperationByID mocks base method
func (m *MockCurpDB) DeleteOperationByID(arg0 context.Context, arg1 resources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperationByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperationByID indicates an expected call of DeleteOperationByID
func (mr *MockCurpDBMockRecorder) DeleteOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperationByID", reflect.TypeOf((*MockCurpDB)(nil).DeleteOperationByID), arg0, arg1)
}

// DeleteScopeByApplicationID mocks base method
func (m *MockCurpDB) DeleteScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScopeByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScopeByApplicationID indicates an expected call of DeleteScopeByApplicationID
func (mr *MockCurpDBMockRecorder) DeleteScopeByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScopeByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).DeleteScopeByApplicationID), arg0, arg1, arg2)
}

// GetApplicationByID mocks base method
func (m *MockCurpDB) GetApplicationByID(arg0 context.Context, arg1 resources.ApplicationID) (*db.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID
func (mr *MockCurpDBMockRecorder) GetApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockCurpDB)(nil).GetApplicationByID), arg0, arg1)
}

// GetComponentByApplicationID mocks base method
func (m *MockCurpDB) GetComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*db.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentByApplicationID indicates an expected call of GetComponentByApplicationID
func (mr *MockCurpDBMockRecorder) GetComponentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).GetComponentByApplicationID), arg0, arg1, arg2)
}

// GetDeploymentByApplicationID mocks base method
func (m *MockCurpDB) GetDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*db.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByApplicationID indicates an expected call of GetDeploymentByApplicationID
func (mr *MockCurpDBMockRecorder) GetDeploymentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).GetDeploymentByApplicationID), arg0, arg1, arg2)
}

// GetOperationByID mocks base method
func (m *MockCurpDB) GetOperationByID(arg0 context.Context, arg1 resources.ResourceID) (*db.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID
func (mr *MockCurpDBMockRecorder) GetOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockCurpDB)(nil).GetOperationByID), arg0, arg1)
}

// GetScopeByApplicationID mocks base method
func (m *MockCurpDB) GetScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeByApplicationID indicates an expected call of GetScopeByApplicationID
func (mr *MockCurpDBMockRecorder) GetScopeByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).GetScopeByApplicationID), arg0, arg1, arg2)
}

// ListApplicationsByResourceGroup mocks base method
func (m *MockCurpDB) ListApplicationsByResourceGroup(arg0 context.Context, arg1 resources.ResourceID) ([]db.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsByResourceGroup", arg0, arg1)
	ret0, _ := ret[0].([]db.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsByResourceGroup indicates an expected call of ListApplicationsByResourceGroup
func (mr *MockCurpDBMockRecorder) ListApplicationsByResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsByResourceGroup", reflect.TypeOf((*MockCurpDB)(nil).ListApplicationsByResourceGroup), arg0, arg1)
}

// ListComponentsByApplicationID mocks base method
func (m *MockCurpDB) ListComponentsByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]db.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentsByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]db.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponentsByApplicationID indicates an expected call of ListComponentsByApplicationID
func (mr *MockCurpDBMockRecorder) ListComponentsByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).ListComponentsByApplicationID), arg0, arg1)
}

// ListDeploymentsByApplicationID mocks base method
func (m *MockCurpDB) ListDeploymentsByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]db.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]db.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsByApplicationID indicates an expected call of ListDeploymentsByApplicationID
func (mr *MockCurpDBMockRecorder) ListDeploymentsByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).ListDeploymentsByApplicationID), arg0, arg1)
}

// ListScopesByApplicationID mocks base method
func (m *MockCurpDB) ListScopesByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]db.Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScopesByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]db.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopesByApplicationID indicates an expected call of ListScopesByApplicationID
func (mr *MockCurpDBMockRecorder) ListScopesByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopesByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).ListScopesByApplicationID), arg0, arg1)
}

// PatchApplication mocks base method
func (m *MockCurpDB) PatchApplication(arg0 context.Context, arg1 *db.ApplicationPatch) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchApplication indicates an expected call of PatchApplication
func (mr *MockCurpDBMockRecorder) PatchApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApplication", reflect.TypeOf((*MockCurpDB)(nil).PatchApplication), arg0, arg1)
}

// PatchComponentByApplicationID mocks base method
func (m *MockCurpDB) PatchComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *db.Component) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchComponentByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchComponentByApplicationID indicates an expected call of PatchComponentByApplicationID
func (mr *MockCurpDBMockRecorder) PatchComponentByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchComponentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).PatchComponentByApplicationID), arg0, arg1, arg2, arg3)
}

// PatchDeploymentByApplicationID mocks base method
func (m *MockCurpDB) PatchDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *db.Deployment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDeploymentByApplicationID indicates an expected call of PatchDeploymentByApplicationID
func (mr *MockCurpDBMockRecorder) PatchDeploymentByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).PatchDeploymentByApplicationID), arg0, arg1, arg2, arg3)
}

// PatchOperationByID mocks base method
func (m *MockCurpDB) PatchOperationByID(arg0 context.Context, arg1 resources.ResourceID, arg2 *db.Operation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOperationByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchOperationByID indicates an expected call of PatchOperationByID
func (mr *MockCurpDBMockRecorder) PatchOperationByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOperationByID", reflect.TypeOf((*MockCurpDB)(nil).PatchOperationByID), arg0, arg1, arg2)
}

// PatchScopeByApplicationID mocks base method
func (m *MockCurpDB) PatchScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *db.Scope) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchScopeByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchScopeByApplicationID indicates an expected call of PatchScopeByApplicationID
func (mr *MockCurpDBMockRecorder) PatchScopeByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchScopeByApplicationID", reflect.TypeOf((*MockCurpDB)(nil).PatchScopeByApplicationID), arg0, arg1, arg2, arg3)
}
