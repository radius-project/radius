@page "/"
@inject HttpClient Client

<h1>Welcome to the Dapr store...</h1>

<EditForm Model="@current" OnValidSubmit="OnOrderPlacedAsync">
    <DataAnnotationsValidator />
    
    <div class="form-group">
        <label for="itemInput">Item</label>
        <InputText @bind-Value="@current.Item" id="itemInput" class="form-control" placeholder="Enter the item"/>
        <small class="form-text text-muted">Order whatever you want we have everything...</small>
    </div>
    <div class="form-group">
        <label for="priceInput">Item</label>
        <InputNumber @bind-Value="@current.Price" id="priceInput" class="form-control" placeholder="Choose the price"/>
    </div>

    <button type="submit" class="btn btn-primary">Order</button>

</EditForm>

<hr />

<h3>Previous orders...</h3>

@if (loading)
{
    <p class="success">Loading...</p>
}
else if (error != null)
{
    <p class="danger">Error: @error</p>
}
else if (message != null)
{
    <p class="success">@error</p>
}
else
{
<ul class="list-group">
    @foreach (var order in orders)
    {
        <li class="list-group-item">@order.Item - @order.Price?.ToString("C")</li>
    }
</ul>
}

@code {
    string error;
    string message;
    bool loading;
    List<Order> orders = new List<Order>();

    Order current = new Order();

    async Task OnOrderPlacedAsync(EditContext context) 
    {
        try
        {
            var response = await this.Client.PostAsJsonAsync("/neworder", current);
            response.EnsureSuccessStatusCode();
            current = new Order();
        }
        catch (Exception ex)
        {
            error = ex.ToString();
            return;
        }

        await ReloadAsync();
    }

    async Task ReloadAsync()
    {
        try
        {
            loading = true;
            message = null;
            error = null;
            this.orders = new List<Order>();

            var response = await this.Client.GetFromJsonAsync<Response>("/order");
            if (response.Message != null)
            {
                message = response.Message;
                return;
            }

            if (response.Items != null)
            {
                this.orders = response.Items;
            }
        }
        catch (Exception ex)
        {
            error = ex.ToString();
        }
        finally
        {
            loading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    private class Response
    {
        public string Message { get; set; }

        public List<Order> Items { get; set; }
    }
}    