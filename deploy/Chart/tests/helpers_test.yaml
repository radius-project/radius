suite: test helpers
templates:
  - _helpers.tpl
  - controller/deployment.yaml
  - ucp/deployment.yaml
  - rp/deployment.yaml
  - dynamic-rp/deployment.yaml
  - de/deployment.yaml
  - dashboard/deployment.yaml
  - database/statefulset.yaml
tests:
  - it: should use default ghcr.io registry when global.imageRegistry is not set
    set:
      controller.image: radius-project/controller
      controller.tag: v1.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: ghcr.io/radius-project/controller:v1.0.0
        template: controller/deployment.yaml

  - it: should use custom registry when global.imageRegistry is set
    set:
      global.imageRegistry: myregistry.azurecr.io
      controller.image: radius-project/controller
      controller.tag: v1.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: myregistry.azurecr.io/radius-project/controller:v1.0.0
        template: controller/deployment.yaml

  - it: should handle empty global.imageRegistry
    set:
      global.imageRegistry: ""
      controller.image: radius-project/controller
      controller.tag: v1.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: ghcr.io/radius-project/controller:v1.0.0
        template: controller/deployment.yaml

  - it: should use full image path as-is when it contains registry and tag
    set:
      global.imageRegistry: otherregistry.io
      controller.image: myregistry.io/custom-controller:v2.0.0
      controller.tag: ignored-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: myregistry.io/custom-controller:v2.0.0
        template: controller/deployment.yaml

  - it: should append tag to full image path when tag is missing
    set:
      global.imageRegistry: otherregistry.io
      controller.image: myregistry.io/custom-controller
      controller.tag: v1.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: myregistry.io/custom-controller:v1.0.0
        template: controller/deployment.yaml

  - it: should handle localhost with port in full image path
    set:
      global.imageRegistry: ""
      rp.image: localhost:5000/custom-rp
      rp.tag: latest
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: localhost:5000/custom-rp:latest
        template: rp/deployment.yaml

  - it: should handle functional test scenario with radius-registry
    set:
      global.imageRegistry: ""
      rp.image: radius-registry:5000/applications-rp
      rp.tag: pr-funceeffa6fd43
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: radius-registry:5000/applications-rp:pr-funceeffa6fd43
        template: rp/deployment.yaml

  - it: should handle full image path with existing tag and ignore provided tag
    set:
      de.image: custom-registry.io/deployment-engine:custom-tag
      de.tag: ignored-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-registry.io/deployment-engine:custom-tag
        template: de/deployment.yaml

  - it: should handle ECR-style registry in full path
    set:
      ucp.image: 123456789.dkr.ecr.us-west-2.amazonaws.com/custom-ucpd
      ucp.tag: v1.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: 123456789.dkr.ecr.us-west-2.amazonaws.com/custom-ucpd:v1.0.0
        template: ucp/deployment.yaml

  - it: should work with default tag from appVersion
    set:
      controller.image: radius-project/controller
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ^ghcr\.io/radius-project/controller:.*$
        template: controller/deployment.yaml

  - it: should work with custom registry and default tag
    set:
      global.imageRegistry: custom.registry.io
      controller.image: radius-project/controller
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].image
          pattern: ^custom\.registry\.io/radius-project/controller:.*$
        template: controller/deployment.yaml

  - it: should apply to all deployments with custom registry
    set:
      global.imageRegistry: private.registry.com
      controller.image: radius-project/controller
      controller.tag: latest
      ucp.image: radius-project/ucpd
      ucp.tag: latest
      rp.image: radius-project/applications-rp
      rp.tag: latest
      dynamicrp.image: radius-project/dynamic-rp
      dynamicrp.tag: latest
      de.image: radius-project/deployment-engine
      de.tag: latest
      dashboard.image: radius-project/dashboard
      dashboard.tag: latest
      bicep.image: radius-project/bicep
      bicep.tag: latest
    asserts:
      # Test controller image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/controller:latest
        template: controller/deployment.yaml
      # Test bicep init container
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: private.registry.com/radius-project/bicep:latest
        template: controller/deployment.yaml
      # Test UCP image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/ucpd:latest
        template: ucp/deployment.yaml
      # Test applications-rp image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/applications-rp:latest
        template: rp/deployment.yaml
      # Test dynamic-rp image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/dynamic-rp:latest
        template: dynamic-rp/deployment.yaml
      # Test deployment-engine image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/deployment-engine:latest
        template: de/deployment.yaml
      # Test dashboard image
      - equal:
          path: spec.template.spec.containers[0].image
          value: private.registry.com/radius-project/dashboard:latest
        template: dashboard/deployment.yaml

  - it: should handle database statefulset with custom registry
    set:
      global.imageRegistry: internal.registry.io
      database.enabled: true
      database.image: radius-project/mirror/postgres
      database.tag: 14-alpine
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: internal.registry.io/radius-project/mirror/postgres:14-alpine
        template: database/statefulset.yaml

  - it: should handle mixed scenario - some with full paths, some without
    set:
      global.imageRegistry: default-registry.io
      controller.image: radius-project/controller
      controller.tag: v1.0.0
      rp.image: custom-registry.io/custom-rp:v2.0.0
      rp.tag: ignored
      ucp.image: radius-project/ucpd
      ucp.tag: v1.0.0
    asserts:
      # Controller should use global registry
      - equal:
          path: spec.template.spec.containers[0].image
          value: default-registry.io/radius-project/controller:v1.0.0
        template: controller/deployment.yaml
      # RP should use its full path
      - equal:
          path: spec.template.spec.containers[0].image
          value: custom-registry.io/custom-rp:v2.0.0
        template: rp/deployment.yaml
      # UCP should use global registry
      - equal:
          path: spec.template.spec.containers[0].image
          value: default-registry.io/radius-project/ucpd:v1.0.0
        template: ucp/deployment.yaml