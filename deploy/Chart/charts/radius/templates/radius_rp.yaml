apiVersion: apps/v1
kind: Deployment
metadata:
  name: radius-rp
  namespace: {{ .Release.Namespace }}
  labels:
    app: radius-rp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radius-rp
  template:
    metadata:
      labels:
        app: radius-rp
{{ if .Values.global.rp.provider.azure.podidentity }}
        aadpodidbinding: {{ .Values.global.rp.provider.azure.podidentity }}
{{ end }}
    spec:
      serviceAccountName: radius-rp
      automountServiceAccountToken: true
      containers:
      - name: radius-rp
        image: {{ .Values.global.rp.container }}:{{ .Values.global.rp.tag }}
        envFrom:
        - secretRef: 
            name: radius-rp
        env:
        - name: PORT
          value: '5000'
        - name: SKIP_AUTH
          value: 'true' # Requests are authorized by Kubernetes here.
        - name: BASE_PATH
          value: '/apis/api.radius.dev/v1alpha3' # listen for APIService URLs
        - name: TLS_CERT_DIR
          value: '/var/tls/cert'
        - name: MONGODB_CONNECTION_STRING
          valueFrom: 
            secretKeyRef: 
              name: radius-db # YES this is reading the connection string from the DB's secret
              key: connectionString
        - name: MONGODB_DATABASE
          value: rpdb
        - name: K8S_CLUSTER
          value: 'true'
        - name: RADIUS_MODEL
          value: k8s
        - name: RADIUS_PUBLIC_ENDPOINT_OVERRIDE
          value: {{ .Values.global.rp.publicEndpointOverride }}
        resources:
          requests:
            cpu: 0.2
            memory: 100Mi
          limits:
            cpu: 1.0
            memory: 500Mi
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: cert
          mountPath: '/var/tls/cert'
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
      volumes:
      - name: cert
        secret:
          secretName: radius-rp-cert
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: radius-rp
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: radius-rp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: radius-rp
subjects:
- kind: ServiceAccount
  name: radius-rp
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: radius-rp
rules:
- apiGroups:
  - ""
  - "apps"
  - "dapr.io"
  - "projectcontour.io"
  resources:
  - "*"
  verbs:
  - "*"
---
apiVersion: v1
kind: Secret
metadata:
  name: radius-rp
  namespace: {{ .Release.Namespace }}
  labels:
    app: radius-rp
stringData:
# Configuration for 'Azure' provider functionality
{{ if .Values.global.rp.provider.azure.podidentity }}
  # Enable ARM but without explicit credentials, pod identity will handle it
  SKIP_ARM: 'false'
  ARM_AUTH_METHOD: 'ManagedIdentity'
  ARM_SUBSCRIPTION_ID: {{ .Values.global.rp.provider.azure.subscriptionId }}
  ARM_RESOURCE_GROUP: {{ .Values.global.rp.provider.azure.resourceGroup }}
{{ else if .Values.global.rp.provider.azure.servicePrincipal }}
  # Enable ARM with explicit credentials
  SKIP_ARM: 'false' 
  ARM_AUTH_METHOD: 'ServicePrincipal'
  AZURE_CLIENT_ID: {{ .Values.global.rp.provider.azure.servicePrincipal.clientId }}
  AZURE_CLIENT_SECRET: {{ .Values.global.rp.provider.azure.servicePrincipal.clientSecret }}
  AZURE_TENANT_ID: {{ .Values.global.rp.provider.azure.servicePrincipal.tenantId }}
  ARM_SUBSCRIPTION_ID: {{ .Values.global.rp.provider.azure.subscriptionId }}
  ARM_RESOURCE_GROUP: {{ .Values.global.rp.provider.azure.resourceGroup }}
{{ else }}
  # Skip ARM by default. Overwriting this secret will let you set this to false as well as configure credentials
  SKIP_ARM: 'true' 
{{ end }}
# Configuration for AKS integration. We only need this to be able to manipulate pod-identities via ARM.
# This will move to the environment resource eventually.
{{ if .Values.global.rp.aks }}
  K8S_SUBSCRIPTION_ID: {{ .Values.global.rp.aks.subscriptionId }}
  K8S_RESOURCE_GROUP: {{ .Values.global.rp.aks.resourceGroup }}
  K8S_CLUSTER_NAME: {{ .Values.global.rp.aks.clusterName }}
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: radius-api
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: https
    port: 443
    targetPort: 5000
  selector:
    app: radius-rp
---
{{- $existingSecret := lookup "v1" "Secret" .Release.Namespace "radius-rp-cert"}}
{{- $existingAPIService:= lookup "admissionregistration.k8s.io/v1" "APIService" .Release.Namespace "v1alpha3.api.radius.dev"}}
{{- $ca := genCA "radius-rp-ca" 3650 }}
{{- $cn := printf "radius-api" }}
{{- $altName1 := printf "radius-api.%s" .Release.Namespace }}
{{- $altName2 := printf "radius-api.%s.svc" .Release.Namespace }}
{{- $altName3 := printf "radius-api.%s.svc.cluster" .Release.Namespace }}
{{- $altName4 := printf "radius-api.%s.svc.cluster.local" .Release.Namespace }}
{{- $cert := genSignedCert $cn nil (list $altName1 $altName2 $altName3 $altName4) 3650 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: radius-rp-cert
  namespace: {{ .Release.Namespace }}
  labels:
    app: radius-controller
data:
  {{ if $existingSecret }}tls.crt: {{ index $existingSecret.data "tls.crt" }}
  {{ else }}tls.crt: {{ b64enc $cert.Cert }}
  {{ end }}

  {{ if $existingSecret }}tls.key: {{ index $existingSecret.data "tls.key" }}
  {{ else }}tls.key: {{ b64enc $cert.Key }}
  {{ end }}
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha3.api.radius.dev
spec:
  group: api.radius.dev
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: radius-api
    namespace: {{ .Release.Namespace }}
  version: v1alpha3
  caBundle: {{ if $existingAPIService }}{{ $existingAPIService.spec.caBundle }}{{ else }}{{ b64enc $ca.Cert }}{{ end }}
