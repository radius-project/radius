apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: appcore-rp
    app.kubernetes.io/part-of: radius-control-plane
  name: appcore-rp
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: appcore-rp
  template:
    metadata:
      labels:
        control-plane: appcore-rp
        app.kubernetes.io/part-of: radius-control-plane
      {{ if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
      {{ end }}
    spec:
      serviceAccountName: appcore-rp
      containers:
      - args:
        - --config-file=/etc/config/radius-self-host.yaml
        - --run-link
        - --link-config=/etc/config/link-self-host.yaml
        image: {{ .Values.global.appcorerp.image }}:{{ .Values.global.appcorerp.tag }}
        envFrom:
        - secretRef: 
            name: appcore-rp-secrets
        env:
        - name: RADIUS_ENV
          value: 'self-hosted'
        - name: K8S_CLUSTER
          value: 'true'
        - name: SKIP_AUTH
          value: 'true'
        {{ if .Values.global.rp.publicEndpointOverride}}
        - name: RADIUS_PUBLIC_ENDPOINT_OVERRIDE
          value: {{ .Values.global.rp.publicEndpointOverride }}
        {{ end }}
        name: appcore-rp
        ports:
        - containerPort: 5443
          name: appcore-rp
          protocol: TCP
        - containerPort: 5444
          name: applink-rp
          protocol: TCP
        {{ if eq .Values.global.prometheus.enabled true }}
        - containerPort: {{ .Values.global.prometheus.port }}
          name: metrics
          protocol: TCP
        {{ end }}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        securityContext:
          allowPrivilegeEscalation: false
      volumes:
        - name: config-volume
          configMap:
            name: appcore-rp-config
---
apiVersion: v1
kind: Service
metadata:
  name: appcore-rp
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 5443
      name: core-http
      protocol: TCP
      targetPort: 5443
    - port: 5444
      name: link-http
      protocol: TCP
      targetPort: 5444
    {{ if eq .Values.global.prometheus.enabled true }}
    - port: {{ .Values.global.prometheus.port }}
      name: metrics-http
      protocol: TCP
      targetPort: {{ .Values.global.prometheus.port }}
    {{ end }}
  selector:
    control-plane: appcore-rp
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: appcore-rp-config
  namespace: {{ .Release.Namespace }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
data:
  radius-self-host.yaml: |-
{{ .Files.Get "radius-self-host.yaml" | indent 4}}
  link-self-host.yaml: |-
{{ .Files.Get "link-self-host.yaml" | indent 4}}
---
apiVersion: v1
kind: Secret
metadata:
  name: appcore-rp-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app: appcore-rp
stringData:
# Configuration for 'Azure' provider functionality
{{ if .Values.global.rp.provider.azure.servicePrincipal }}
  # Enable ARM with explicit credentials
  SKIP_ARM: 'false' 
  ARM_AUTH_METHOD: 'ServicePrincipal'
  AZURE_CLIENT_ID: {{ .Values.global.rp.provider.azure.servicePrincipal.clientId }}
  AZURE_CLIENT_SECRET: {{ .Values.global.rp.provider.azure.servicePrincipal.clientSecret }}
  AZURE_TENANT_ID: {{ .Values.global.rp.provider.azure.servicePrincipal.tenantId }}
{{ else }}
  # Skip ARM by default. Overwriting this secret will let you set this to false as well as configure credentials
  SKIP_ARM: 'true' 
{{ end }}