{{- $appversion := include "radius.versiontag" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: dynamic-rp
    app.kubernetes.io/name: dynamic-rp
    app.kubernetes.io/part-of: radius
  name: dynamic-rp
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
     app.kubernetes.io/name: dynamic-rp
  template:
    metadata:
      labels:
        control-plane: dynamic-rp
        app.kubernetes.io/name: dynamic-rp
        app.kubernetes.io/part-of: radius
        {{- if eq .Values.global.azureWorkloadIdentity.enabled true }}
        azure.workload.identity/use: "true"
        {{- end }}
      {{- if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
      {{- end }}
    spec:
      serviceAccountName: dynamic-rp
      {{- if eq .Values.global.terraform.enabled true }}
      # Init container to pre-download Terraform binary to a shared volume
      # This avoids downloading Terraform at runtime and improves recipe execution performance
      initContainers:
      - name: terraform-init
        image: "alpine:latest"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Terraform init container starting..."
          
          # Create terraform directory
          mkdir -p "{{ .Values.dynamicrp.terraform.path }}"
          
          # For the terraform container feature, we'll download the same version
          # that's specified in the terraform image tag
          TERRAFORM_TAG="{{ .Values.global.terraform.tag }}"
          
          # Extract version from tag (remove 'v' prefix if present, handle 'latest')
          if [ "$TERRAFORM_TAG" = "latest" ]; then
            TERRAFORM_VERSION="1.12.2"  # Default to current stable version
          else
            TERRAFORM_VERSION=$(echo "$TERRAFORM_TAG" | sed 's/^v//')
          fi
          
          TERRAFORM_URL="https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          
          echo "Pre-downloading terraform ${TERRAFORM_VERSION} to {{ .Values.dynamicrp.terraform.path }}/terraform"
          
          # Install required tools
          apk add --no-cache wget unzip
          
          # Download and extract terraform
          cd /tmp
          wget "${TERRAFORM_URL}" -O terraform.zip
          unzip terraform.zip
          cp terraform "{{ .Values.dynamicrp.terraform.path }}/terraform"
          chmod +x "{{ .Values.dynamicrp.terraform.path }}/terraform"
          
          # Create marker file to indicate pre-mounted binary is available
          echo "pre-mounted" > "{{ .Values.dynamicrp.terraform.path }}/.terraform-source"
          
          echo "Terraform binary successfully pre-downloaded and installed"
        volumeMounts:
        - name: terraform
          mountPath: {{ .Values.dynamicrp.terraform.path }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65532
      {{- end }}
      containers:
      - name: dynamic-rp
        image: "{{ .Values.dynamicrp.image }}:{{ .Values.dynamicrp.tag | default $appversion }}"
        args:
        - --config-file=/etc/config/radius-self-host.yaml
        env:
        - name: SKIP_ARM
          value: 'false'
        - name: ARM_AUTH_METHOD
          value: 'UCPCredential'
        - name: RADIUS_ENV
          value: 'self-hosted'
        - name: K8S_CLUSTER
          value: 'true'
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.sslCertDirEnvVar }}
          value: {{ .Values.global.rootCA.mountPath }}
        {{- end}}
        ports:
        - containerPort: 5443
          name: dynamic-rp
          protocol: TCP
        {{- if eq .Values.global.prometheus.enabled true }}
        - containerPort: {{ .Values.global.prometheus.port }}
          name: metrics
          protocol: TCP
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        {{- if eq .Values.global.aws.irsa.enabled true }}
        - name: aws-iam-token
          mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        {{- end }}
        - name: terraform
          mountPath: {{ .Values.dynamicrp.terraform.path }}
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.volumeName }}
          mountPath: {{ .Values.global.rootCA.mountPath }}
          readOnly: true
        {{- end }}
        {{- if .Values.dynamicrp.resources }}
        resources:{{ toYaml .Values.rp.resources | nindent 10 }}
        {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: dynamic-rp-config
        {{- if eq .Values.global.aws.irsa.enabled true }}
        - name: aws-iam-token
          projected:
            sources:
            - serviceAccountToken:
                path: token
                expirationSeconds: 86400
                audience: "sts.amazonaws.com"
        {{- end }}
        - name: terraform
          emptyDir: {}
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.volumeName }}
          secret:
            secretName: {{ .Values.global.rootCA.secretName }}
        {{- end }}
