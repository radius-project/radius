{{- $appversion := include "radius.versiontag" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: applications-rp
    app.kubernetes.io/name: applications-rp
    app.kubernetes.io/part-of: radius
  name: applications-rp
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
     app.kubernetes.io/name: applications-rp
  template:
    metadata:
      labels:
        control-plane: applications-rp
        app.kubernetes.io/name: applications-rp
        app.kubernetes.io/part-of: radius
        {{- if eq .Values.global.azureWorkloadIdentity.enabled true }}
        azure.workload.identity/use: "true"
        {{- end }}
      {{- if eq .Values.global.prometheus.enabled true }}
      annotations:
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/scrape: "{{ .Values.global.prometheus.enabled }}"
      {{- end }}
    spec:
      serviceAccountName: applications-rp
      {{- if eq .Values.global.terraform.enabled true }}
      # Init container to pre-download Terraform binary to a shared volume
      # This avoids downloading Terraform at runtime and improves recipe execution performance
      initContainers:
      - name: terraform-init
        image: "alpine:latest"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Terraform init container starting..."
          echo "Running on architecture: $(uname -m)"
          echo "Alpine version: $(cat /etc/alpine-release)"
          
          # Create terraform directory
          mkdir -p "{{ .Values.rp.terraform.path }}"
          echo "Created directory: {{ .Values.rp.terraform.path }}"
          
          # Detect architecture for terraform download
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) TERRAFORM_ARCH="amd64" ;;
            aarch64|arm64) TERRAFORM_ARCH="arm64" ;;
            *) echo "ERROR: Unsupported architecture: $ARCH"; exit 1 ;;
          esac
          echo "Terraform architecture: $TERRAFORM_ARCH"
          
          # Install wget and unzip if not available (Alpine doesn't include them by default)
          if ! which wget >/dev/null 2>&1 || ! which unzip >/dev/null 2>&1; then
            echo "Installing wget and unzip..."
            apk add --no-cache wget unzip || { echo "ERROR: Failed to install wget/unzip"; exit 3; }
          fi
          
          # Determine download URL
          TERRAFORM_URL="{{ .Values.global.terraform.downloadUrl }}"
          
          # If no custom URL provided, fetch latest version from HashiCorp API
          if [[ -z "$TERRAFORM_URL" ]]; then
            echo "Fetching latest Terraform version from HashiCorp API..."
            LATEST_VERSION=$(wget -qO- "https://api.releases.hashicorp.com/v1/releases/terraform/latest" | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
            if [[ -z "$LATEST_VERSION" ]]; then
              echo "ERROR: Failed to fetch latest Terraform version from API"
              exit 2
            fi
            echo "Latest Terraform version: $LATEST_VERSION"
            TERRAFORM_URL="https://releases.hashicorp.com/terraform/${LATEST_VERSION}/terraform_${LATEST_VERSION}_linux_${TERRAFORM_ARCH}.zip"
          fi
          
          echo "Download URL: $TERRAFORM_URL"
          
          # Basic connectivity and environment info
          echo "Environment debug info:"
          echo "- Date: $(date)"
          echo "- PWD: $(pwd)"
          echo "- Available commands: $(which wget || echo 'no wget') $(which unzip || echo 'no unzip')"
          
          # Install wget and unzip if not available (Alpine doesn't include them by default)
          if ! which wget >/dev/null 2>&1 || ! which unzip >/dev/null 2>&1; then
            echo "Installing wget and unzip..."
            apk add --no-cache wget unzip || { echo "ERROR: Failed to install wget/unzip"; exit 3; }
          fi
          
          # Download and extract terraform using wget
          cd /tmp
          echo "Downloading terraform using wget..."
          wget "${TERRAFORM_URL}" -O terraform.zip || { echo "ERROR: Failed to download terraform"; exit 4; }
          
          echo "Extracting terraform using unzip..."
          unzip terraform.zip || { echo "ERROR: Failed to extract terraform"; exit 5; }
          
          echo "Installing terraform binary..."
          cp terraform "{{ .Values.rp.terraform.path }}/terraform" || { echo "ERROR: Failed to copy terraform"; exit 6; }
          chmod +x "{{ .Values.rp.terraform.path }}/terraform" || { echo "ERROR: Failed to make terraform executable"; exit 7; }
          
          # Create marker file to indicate pre-mounted binary is available
          echo "pre-mounted" > "{{ .Values.rp.terraform.path }}/.terraform-source"
          
          echo "Terraform binary successfully pre-downloaded and installed"
        volumeMounts:
        - name: terraform
          mountPath: {{ .Values.rp.terraform.path }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65532
      {{- end }}
      containers:
      - name: applications-rp
        image: "{{ include "radius.image" (dict "image" .Values.rp.image "tag" (.Values.rp.tag | default .Values.global.imageTag | default $appversion) "global" .Values.global) }}"
        args:
        - --config-file=/etc/config/radius-self-host.yaml
        env:
        - name: SKIP_ARM
          value: 'false'
        - name: ARM_AUTH_METHOD
          value: 'UCPCredential'
        - name: RADIUS_ENV
          value: 'self-hosted'
        - name: K8S_CLUSTER
          value: 'true'
        {{- if .Values.rp.publicEndpointOverride}}
        - name: RADIUS_PUBLIC_ENDPOINT_OVERRIDE
          value: {{ .Values.rp.publicEndpointOverride }}
        {{- end }}
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.sslCertDirEnvVar }}
          value: {{ .Values.global.rootCA.mountPath }}
        {{- end}}
        ports:
        - containerPort: 5443
          name: applications-rp
          protocol: TCP
        - containerPort: 5444
          name: app-pr-rp
          protocol: TCP
        {{- if eq .Values.global.prometheus.enabled true }}
        - containerPort: {{ .Values.global.prometheus.port }}
          name: metrics
          protocol: TCP
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        {{- if eq .Values.global.aws.irsa.enabled true }}
        - name: aws-iam-token
          mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        {{- end }}
        - name: terraform
          mountPath: {{ .Values.rp.terraform.path }}
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.volumeName }}
          mountPath: {{ .Values.global.rootCA.mountPath }}
          readOnly: true
        {{- end }}
        {{- if .Values.rp.resources }}
        resources:{{ toYaml .Values.rp.resources | nindent 10 }}
        {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: applications-rp-config
        {{- if eq .Values.global.aws.irsa.enabled true }}
        - name: aws-iam-token
          projected:
            sources:
            - serviceAccountToken:
                path: token
                expirationSeconds: 86400
                audience: "sts.amazonaws.com"
        {{- end }}
        - name: terraform
          emptyDir: {}
        {{- if .Values.global.rootCA.cert }}
        - name: {{ .Values.global.rootCA.volumeName }}
          secret:
            secretName: {{ .Values.global.rootCA.secretName }}
        {{- end }}
