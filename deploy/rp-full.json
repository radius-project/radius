{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.1",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "channel": {
            "type": "string",
            "defaultValue": "edge",
            "metadata": {
                "description": "channel to use for RP image and deployment script"
            }
        },
        "_scriptUri": {
            "type": "string",
            "defaultValue": "[format('https://radiuspublic.blob.core.windows.net/environment/{0}/initialize-cluster.sh', parameters('channel'))]",
            "metadata": {
                "description": "URI of the script to execute. Used for testing."
            }
        },
        "image": {
            "type": "string",
            "defaultValue": "[format('radiusteam/radius-rp:{0}', if(equals(parameters('channel'), 'edge'), 'latest', parameters('channel')))]",
            "metadata": {
                "description": "The container image to deploy."
            }
        },
        "siteName": {
            "type": "string",
            "defaultValue": "[concat('radius-rp-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of your Web Site."
            }
        },
        "accountName": {
            "type": "string",
            "defaultValue": "[concat('radius-rp-', uniquestring(resourceGroup().id))]",
            "metadata": {
                "description": "The unique name of the cosmos db account."
            }
        },
        "databaseName": {
            "type": "string",
            "defaultValue": "radius-rp-db",
            "metadata": {
                "description": "The database name."
            }
        },
        "clusterName": {
            "type": "string",
            "defaultValue": "[concat('radius-aks-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "sku": {
            "type": "string",
            "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "defaultValue": "B1",
            "metadata": {
                "description": "The pricing tier for the hosting plan."
            }
        },
        "workerSize": {
            "type": "string",
            "allowedValues": [
                "0",
                "1",
                "2"
            ],
            "defaultValue": "0",
            "metadata": {
                "description": "The instance size of the hosting plan (small, medium, or large)."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 50
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_B2ms",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "deploymentScriptIdentityName": {
            "type": "string",
            "defaultValue": "[concat('radius-deployment-id-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "The identity name to use for the deployment script."
            }
        },
        "resourceTags": {
            "type": "object",
            "defaultValue": {
                "rad-environment": true
            },
            "metadata": {
                "description": "The tags to apply to each resource"
            }
        }
    },
    "variables": {
        "clusteridentityroledefinitionid": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('managedIdentityOperatorRole'))]",
        "clusteridentityroledefinitionname": "[guid(parameters('clusterName'), subscription().subscriptionId)]",
        "contributorRole": "b24988ac-6180-42a0-ab88-20f7382dd24c",
        "hostingPlanName": "[concat('radius-rp-plan-', resourceGroup().name)]",
        "managedIdentityOperatorRole": "f1a07417-d97a-45cb-824c-7a7467783830",
        "ownerRole": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
        "rpRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('ownerRole'))]",
        "rpRoleDefinitionName": "[guid(parameters('siteName'), subscription().subscriptionId)]",
        "deploymentRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRole'))]",
        "deploymentRoleDefinitionName": "[guid(parameters('deploymentScriptIdentityName'), subscription().subscriptionId)]"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[parameters('deploymentScriptIdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('resourceTags')]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2019-04-01-preview",
            "name": "[variables('deploymentRoleDefinitionName')]",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [
                "[parameters('deploymentScriptIdentityName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('deploymentRoleDefinitionId')]",
                "principalId": "[reference(parameters('deploymentScriptIdentityName')).principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[parameters('accountName')]",
            "apiVersion": "2020-03-01",
            "location": "[parameters('location')]",
            "tags": "[parameters('resourceTags')]",
            "kind": "MongoDB",
            "properties": {
                "locations": [
                    {
                        "locationName": "[parameters('location')]",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "databaseAccountOfferType": "Standard",
                "apiProperties": {
                    "serverVersion": "3.6"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
            "name": "[concat(parameters('accountName'), '/', parameters('databaseName'))]",
            "apiVersion": "2020-03-01",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]" ],
            "properties": {
                "resource": {
                    "id": "[parameters('databaseName')]"
                },
                "options": { "throughput": "400" }
            }
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts/mongodbDatabases/collections",
            "name": "[concat(parameters('accountName'), '/', parameters('databaseName'), '/', 'applications')]",
            "apiVersion": "2020-03-01",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [ "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('accountName'), parameters('databaseName'))]" ],
            "properties": {
                "resource": {
                    "id": "applications",
                    "shardKey": { "subscriptionId": "Hash" },
                    "indexes": [],
                    "options": {
                        "If-Match": "<ETag>"
                    }
                },
                "options": {}
            }
        },
        {
            "apiVersion": "2020-11-01",
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[parameters('clusterName')]",
            "tags": "[parameters('resourceTags')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "dnsPrefix": "[parameters('clusterName')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "mode": "System"
                    }
                ],
                "enableRBAC": true,
                "podIdentityProfile": {
                    "enabled": true
                },
                "networkProfile": {
                    "networkPlugin": "azure"
                }
            }
        },
        {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2019-04-01-preview",
          "name": "[variables('clusterIdentityRoleDefinitionName')]",
          "tags": "[parameters('resourceTags')]",
          "dependsOn": [
            "[concat('Microsoft.ContainerService/managedClusters/', parameters('clusterName'))]"
          ],
          "properties": {
            "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2020-11-01', 'full').identity.principalId]",
            "principalType": "ServicePrincipal",
            "roleDefinitionId": "[variables('clusterIdentityRoleDefinitionId')]",
            "scope": "[resourceGroup().id]"
          }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "deploy-radius-runtime",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('deploymentRoleDefinitionName'))]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('deploymentScriptIdentityName'))]": {}
                }
            },
            "properties": {
                "forceUpdateTag": 1,
                "azCliVersion": "2.0.80",
                "arguments": "[concat('\"', resourceGroup().name, '\" \"', parameters('clusterName'), '\"')]",
                "primaryScriptUri": "[parameters('_scriptUri')]",
                "supportingScriptUris": [],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('resourceTags')]",
            "sku": {
                "name": "[parameters('sku')]",
                "capacity": "[parameters('workerSize')]"
            },
            "kind": "linux",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "reserved": true
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[parameters('siteName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('resourceTags')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('accountName'), parameters('databaseName'))]",
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]",
                "[resourceId('Microsoft.Resources/deploymentScripts', 'deploy-radius-runtime')]"
            ],
            "kind": "app,linux,container",
            "properties": {
                "serverFarmId": "[variables('hostingPlanName')]",
                "clientCertEnabled": true,
                "clientCertMode": "Optional",
                "siteConfig": {
                    "linuxFxVersion": "[concat('DOCKER|', parameters('image'))]",
                    "appSettings": [
                        {
                            "name": "MONGODB_CONNECTION_STRING",
                            "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('accountName')), '2020-04-01').connectionStrings[0].connectionString]"
                        },
                        {
                            "name": "MONGODB_DATABASE",
                            "value": "[parameters('databaseName')]"
                        },
                        {
                            "name": "K8S_CLUSTER_NAME",
                            "value": "[parameters('clusterName')]"
                        },
                        {
                            "name": "K8S_RESOURCE_GROUP",
                            "value": "[resourceGroup().name]"
                        },
                        {
                            "name": "K8S_SUBSCRIPTION_ID",
                            "value": "[subscription().subscriptionId]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2019-04-01-preview",
            "name": "[variables('rpRoleDefinitionName')]",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', parameters('siteName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('rpRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('siteName')), '2019-08-01', 'full').identity.principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "apiVersion": "2018-09-01-preview",
            "type": "Microsoft.CustomProviders/resourceProviders",
            "name": "radius",
            "location": "[parameters('location')]",
            "tags": "[parameters('resourceTags')]",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', parameters('siteName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('rpRoleDefinitionName'))]"
            ],
            "properties": {
                "resourceTypes": [
                    {
                        "name": "Applications",
                        "routingType": "Proxy",
                        "endpoint": "[concat('https://', parameters('siteName'), '.azurewebsites.net/{requestPath}')]"
                    },
                    {
                        "name": "Applications/Components",
                        "routingType": "Proxy",
                        "endpoint": "[concat('https://', parameters('siteName'), '.azurewebsites.net/{requestPath}')]"
                    },
                    {
                        "name": "Applications/Scopes",
                        "routingType": "Proxy",
                        "endpoint": "[concat('https://', parameters('siteName'), '.azurewebsites.net/{requestPath}')]"
                    },
                    {
                        "name": "Applications/Deployments",
                        "routingType": "Proxy",
                        "endpoint": "[concat('https://', parameters('siteName'), '.azurewebsites.net/{requestPath}')]"
                    }
                ]
            }
        }
    ],
    "outputs": {
        "clusterName": {
            "type": "string",
            "value": "[parameters('clusterName')]"
        }
    }
}
