// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-providerhub";

// These files allow the use of {rootScope} in the generated paths with a custom resourceOperations object
import "../customRootScope.cadl";
import "../aksrootscope.cadl";

import "./global.cadl";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Radius;

@armNamespace
@serviceTitle("Applications.Link Management APIs")
@doc("REST API for Applications.Link MongoDatabase Resource")
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Applications.Link;

@doc("MongoDatabase connector")
model MongoDatabaseResource is TrackedResource<MongoDatabaseProperties> {
  @doc("The name of the MongoDatabase connector resource")
  @maxLength(63)
  @pattern("^[a-z]([-a-z0-9]*[a-z0-9])?$")
  @key("mongoDatabaseName")
  @path
  @segment("mongoDatabases")
  name: string;
}

@doc("MongoDatabase connector")
model MongoDatabaseResponseResource
  is TrackedResource<MongoDatabaseResponseProperties> {
  @doc("The name of the MongoDatabase connector resource")
  @maxLength(63)
  @pattern("^[a-z]([-a-z0-9]*[a-z0-9])?$")
  @key("mongoDatabaseName")
  @path
  @segment("mongoDatabases")
  name: string;
}

@doc("The secret values for the given MongoDatabase resource")
model MongoDatabaseListSecretsResult is MongoDatabaseSecrets;

@doc("The secret values for the given MongoDatabase resource")
model MongoDatabaseSecrets {
  @doc("Username to use when connecting to the target Mongo database")
  username?: string;

  @doc("Password to use when connecting to the target Mongo database")
  password?: string;

  @doc("Connection string used to connect to the target Mongo database")
  connectionString?: string;
}

@doc("MongoDatabase connector properties")
model MongoDatabaseResponseProperties extends BasicResourceProperties {
  @doc("Provisioning state of the mongo database connector at the time the operation was called")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("Fully qualified resource ID for the environment that the connector is linked to")
  environment: string;

  @doc("Fully qualified resource ID for the application that the connector is consumed by")
  application?: Application;

  @doc("Fully qualified resource ID of a supported resource with Mongo API to use for this connector")
  resource?: string;

  @doc("Host name of the target Mongo database")
  host?: string;

  @doc("Port value of the target Mongo database")
  port?: int32;

  @doc("Database name of the target Mongo database")
  @visibility("read")
  database: string;
}

@doc("MongoDatabase connector properties")
model MongoDatabaseProperties extends MongoDatabaseResponseProperties {
  @doc("Secrets values provided for the resource")
  secrets?: MongoDatabaseSecrets;
}

@doc("Lists secrets values for the specified MongoDatabase resource")
@route("/{rootScope}/providers/Applications.Link/mongoDatabases/{mongoDatabaseName}/listSecrets")
op post(@path rootScope: RootScopeParam, @path mongoDatabaseName: string): {
  @statusCode statusCode: 200;
  schema: MongoDatabaseListSecretsResult;
} | ErrorResponse;

@armResourceOperations
interface MongoDatabases
  extends Radius.RootScopeResourceOperations<
      MongoDatabaseResponseResource,
      MongoDatabaseResponseProperties,
      RootScopeParam
    > {}
