{
  "swagger": "2.0",
  "info": {
    "title": "Applications.Connector Management APIs",
    "version": "0000-00-00",
    "description": "REST API for Applications.Connector MongoDatabase Resource",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": ""
      }
    }
  },
  "tags": [
    {
      "name": "MongoDatabases"
    },
    {
      "name": "Operations"
    }
  ],
  "paths": {
    "/{rootScope}/providers/Applications.Connector/mongoDatabases": {
      "get": {
        "tags": [
          "MongoDatabases"
        ],
        "operationId": "MongoDatabases_ListByResourceGroup",
        "description": "List MongoDatabaseResponseResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Connector/mongoDatabases/{mongoDatabaseName}": {
      "get": {
        "tags": [
          "MongoDatabases"
        ],
        "operationId": "MongoDatabases_Get",
        "description": "Get a MongoDatabaseResponseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/MongoDatabaseResponseResource.mongoDatabaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "MongoDatabases"
        ],
        "operationId": "MongoDatabases_CreateOrUpdate",
        "description": "Create a MongoDatabaseResponseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/MongoDatabaseResponseResource.mongoDatabaseName"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "MongoDatabases"
        ],
        "operationId": "MongoDatabases_Update",
        "description": "Update a MongoDatabaseResponseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/MongoDatabaseResponseResource.mongoDatabaseName"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDatabaseResponseResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MongoDatabases"
        ],
        "operationId": "MongoDatabases_Delete",
        "description": "Delete a MongoDatabaseResponseResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/MongoDatabaseResponseResource.mongoDatabaseName"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/{rootScope}/providers/Applications.Connector/mongoDatabases/{mongoDatabaseName}/listSecrets": {
      "get": {
        "operationId": "Post",
        "description": "Lists secrets values for the specified MongoDatabase resource",
        "parameters": [
          {
            "name": "rootScope",
            "in": "path",
            "required": true,
            "description": "Custom root scope",
            "type": "object",
            "properties": {}
          },
          {
            "name": "mongoDatabaseName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/MongoDatabaseListSecretsResult"
                }
              },
              "required": [
                "schema"
              ],
              "x-cadl-name": "(anonymous model)"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/providers/Applications.Connector/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "Application": {
      "type": "string",
      "description": "Fully qualified resource ID for the application that the connector is consumed by"
    },
    "BasicResourceProperties": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/ResourceStatus",
          "description": "Status of a resource.",
          "readOnly": true
        }
      },
      "description": "Basic properties of a Radius resource.",
      "required": [
        "status"
      ]
    },
    "ErrorAdditionalInfo": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The additional info type",
          "readOnly": true
        },
        "info": {
          "type": "string",
          "description": "The additional info",
          "readOnly": true
        }
      },
      "description": "The resource management error additional info.",
      "required": [
        "type",
        "info"
      ]
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error code",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The error target",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetail"
          },
          "x-ms-identifiers": [
            "target",
            "message"
          ],
          "x-cadl-name": "ErrorDetail[]",
          "description": "The error details",
          "readOnly": true
        },
        "additionalInfo": {
          "$ref": "#/definitions/ErrorAdditionalInfo",
          "description": "The error additional info",
          "readOnly": true
        }
      },
      "description": "The error detail",
      "required": [
        "code",
        "message",
        "target",
        "details",
        "additionalInfo"
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDetail",
          "description": "The error object."
        }
      },
      "description": "Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).",
      "required": [
        "error"
      ]
    },
    "MongoDatabaseListSecretsResult": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Mongo database"
        },
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Mongo database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Mongo database"
        }
      },
      "description": "The secret values for the given MongoDatabase resource"
    },
    "MongoDatabaseProperties": {
      "type": "object",
      "properties": {
        "secrets": {
          "$ref": "#/definitions/MongoDatabaseSecrets",
          "description": "Secrets values provided for the resource"
        }
      },
      "description": "MongoDatabase connector properties",
      "allOf": [
        {
          "$ref": "#/definitions/MongoDatabaseResponseProperties"
        }
      ]
    },
    "MongoDatabaseResponseProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "Provisioning state of the mongo database connector at the time the operation was called",
          "readOnly": true
        },
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the connector is linked to"
        },
        "application": {
          "$ref": "#/definitions/Application",
          "description": "Fully qualified resource ID for the application that the connector is consumed by"
        },
        "resource": {
          "type": "string",
          "description": "Fully qualified resource ID of a supported resource with Mongo API to use for this connector"
        },
        "host": {
          "type": "string",
          "description": "Host name of the target Mongo database"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Mongo database"
        },
        "database": {
          "type": "string",
          "description": "Database name of the target Mongo database",
          "readOnly": true
        }
      },
      "description": "MongoDatabase connector properties",
      "required": [
        "environment",
        "database"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BasicResourceProperties"
        }
      ]
    },
    "MongoDatabaseResponseResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/MongoDatabaseResponseProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "x-ms-client-flatten": true
        }
      },
      "description": "MongoDatabase connector",
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "MongoDatabaseResponseResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MongoDatabaseResponseResource"
          },
          "x-cadl-name": "MongoDatabaseResponseResource[]",
          "description": "The MongoDatabaseResponseResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "x-cadl-name": "Rest.ResourceLocation<MongoDatabaseResponseResource>"
        }
      },
      "description": "The response of a MongoDatabaseResponseResource list operation.",
      "required": [
        "value"
      ]
    },
    "MongoDatabaseResponseResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/MongoDatabaseResponseResourceUpdateProperties"
        }
      },
      "description": "The type used for update operations of the MongoDatabaseResponseResource."
    },
    "MongoDatabaseResponseResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string",
          "description": "Fully qualified resource ID for the environment that the connector is linked to"
        },
        "application": {
          "$ref": "#/definitions/Application",
          "description": "Fully qualified resource ID for the application that the connector is consumed by"
        },
        "resource": {
          "type": "string",
          "description": "Fully qualified resource ID of a supported resource with Mongo API to use for this connector"
        },
        "host": {
          "type": "string",
          "description": "Host name of the target Mongo database"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port value of the target Mongo database"
        }
      },
      "description": "The updatable properties of the MongoDatabaseResponseResource."
    },
    "MongoDatabaseSecrets": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to use when connecting to the target Mongo database"
        },
        "password": {
          "type": "string",
          "description": "Password to use when connecting to the target Mongo database"
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string used to connect to the target Mongo database"
        }
      },
      "description": "The secret values for the given MongoDatabase resource"
    },
    "OutputResource": {
      "type": "object",
      "properties": {},
      "description": "Properties of an output resource."
    },
    "ProvisioningState": {
      "type": "string",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true
      }
    },
    "ResourceStatus": {
      "type": "object",
      "properties": {
        "outputResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputResource"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "OutputResource[]",
          "description": "Properties of an output resource"
        }
      },
      "description": "Status of a resource.",
      "required": [
        "outputResources"
      ]
    }
  },
  "parameters": {
    "MongoDatabaseResponseResource.mongoDatabaseName": {
      "name": "mongoDatabaseName",
      "in": "path",
      "required": true,
      "description": "The name of the MongoDatabase connector resource",
      "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$",
      "maxLength": 63,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "RootScopeParam": {
      "name": "rootScope",
      "in": "path",
      "required": true,
      "description": "root scope path",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
