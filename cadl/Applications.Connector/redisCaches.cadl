// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-providerhub";

// These files allow the use of {rootScope} in the generated paths with a custom resourceOperations object
import "../customRootScope.cadl";
import "../aksrootscope.cadl";

import "./global.cadl";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Radius;

@armNamespace
@serviceTitle("Applications.Link Management APIs")
@doc("REST API for Applications.Link RedisCache Resource")
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Applications.Link;

@doc("RedisCache connector")
model RedisCacheResource is TrackedResource<RedisCacheProperties> {
  @doc("The name of the RedisCache connector resource")
  @maxLength(63)
  @pattern("^[a-z]([-a-z0-9]*[a-z0-9])?$")
  @key("redisCacheName")
  @path
  @segment("redisCaches")
  name: string;
}

@doc("RedisCache connecter")
model RedisCacheResponseResource
  is TrackedResource<RedisCacheResponseProperties> {
  @doc("The name of the RedisCache connector resource")
  @maxLength(63)
  @pattern("^[a-z]([-a-z0-9]*[a-z0-9])?$")
  @key("redisCacheName")
  @path
  @segment("redisCaches")
  name: string;
}

@doc("The secret values for the given RedisCache resource")
model RedisCacheListSecretsResult is RedisCacheSecrets;

@doc("The secret values for the given RedisCache resource")
model RedisCacheSecrets {
  @doc("The connection string used to connect to the redis cache")
  connectionString?: string;

  @doc("The password for this Redis instance")
  password?: string;
}

@doc("RedisCache connector properties")
model RedisCacheResponseProperties extends BasicResourceProperties {
  @doc("Provisioning state of the redis cache connector at the time the operation was called")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("Fully qualified resource ID for the environment that the connector is linked to")
  environment: string;

  @doc("Fully qualified resource ID for the application that the connector is consumed by")
  application?: Application;

  @doc("Fully qualified resource ID of a supported resource with Redis API to use for this connector")
  resource?: string;

  @doc("The host name of the target redis cache")
  host?: string;

  @doc("The port value of the target redis cache")
  port?: int32;

  @doc("The username for redis")
  username?: string;
}

@doc("RedisCache connector properties")
model RedisCacheProperties extends RedisCacheResponseProperties {
  @doc("Secrets provided by resource")
  secrets?: RedisCacheSecrets;
}

@doc("Lists secrets values for the specified RedisCache resource")
@route("/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}/listSecrets")
op post(@path rootScope: RootScopeParam, @path redisCacheName: string): {
  @statusCode statusCode: 200;
  schema: RedisCacheListSecretsResult;
} | ErrorResponse;

@armResourceOperations
interface RedisCaches
  extends Radius.RootScopeResourceOperations<
      RedisCacheResponseResource,
      RedisCacheResponseProperties,
      RootScopeParam
    > {}
