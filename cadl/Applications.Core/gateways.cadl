/*
Copyright 2023 The Radius Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-providerhub";

// These files allow the use of {rootScope} in the generated paths with a custom resourceOperations object
import "../customRootScope.cadl";
import "../aksrootscope.cadl";

import "./global.cadl";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Radius;
@armNamespace
@serviceTitle("Applications.Core Management APIs")
@doc("REST API for Applications.Core Gateway Resource")
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Applications.Core;

@doc("Gateway properties")
model GatewayProperties extends BasicResourceProperties {
  @doc("Provisioning state of the Gateway at the time the operation was called.")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The resource id of the application linked to Gateway resource.")
  application: string;

  @doc("Sets Gateway to not be exposed externally (no public IP address associated). Defaults to false (exposed to internet).")
  internal?: boolean = false;

  @doc("Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.")
  hostname?: GatewayPropertiesHostname;

  @doc("Routes attached to this Gateway")
  routes: GatewayRoute[];

  @doc("URL of the gateway resource. Readonly")
  @visibility("read")
  url?: string;
}

@doc("Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.")
model GatewayPropertiesHostname {
  @doc("Specify a prefix for the hostname: myhostname.myapp.PUBLICHOSTNAMEORIP.nip.io. Mutually exclusive with 'fullyQualifiedHostname' and will be overridden if both are defined.")
  prefix: string;

  @doc("Specify a fully-qualified domain name: myapp.mydomain.com. Mutually exclusive with 'prefix' and will take priority if both are defined.")
  fullyQualifiedHostname: string;
}

@doc("Route attached to Gateway")
model GatewayRoute {
  @doc("The path to match the incoming request path on. Ex - /myservice.")
  path: string;

  @doc("The HttpRoute to route to. Ex - myserviceroute.id.")
  destination: string;

  @doc("Optionally update the prefix when sending the request to the service. Ex - replacePrefix: '/' and path: '/myservice' will transform '/myservice/myroute' to '/myroute'")
  replacePrefix: string;
}

model GatewayResource is TrackedResource<GatewayProperties> {
  @doc("Gateway name")
  @maxLength(63)
  @pattern("^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$")
  @key("gatewayName")
  @path
  @segment("gateways")
  name: string;
}

@armResourceOperations
interface Gateway
  extends Radius.RootScopeResourceOperations<
      GatewayResource,
      GatewayProperties,
      RootScopeParam
    > {}

@knownValues(ProvisioningStateKV)
model ProvisioningState is string;
enum ProvisioningStateKV {
  Succeeded,
  Failed,
  Canceled,
  Provisioning,
  Updating,
  Deleting,
  Accepted,
}
