{
  "swagger": "2.0",
  "info": {
    "title": "Applications.Core Management APIs",
    "version": "0000-00-00",
    "description": "REST API for Applications.Core Container Resource",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "host": "management.azure.com",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow.",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": ""
      }
    }
  },
  "tags": [
    {
      "name": "Containers"
    },
    {
      "name": "Operations"
    }
  ],
  "paths": {
    "/{rootScope}/providers/Applications.Core/containers": {
      "get": {
        "tags": [
          "Containers"
        ],
        "operationId": "Containers_ListByResourceGroup",
        "description": "List ContainerResource resources by resource group",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResourceListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/{rootScope}/providers/Applications.Core/containers/{containerName}": {
      "get": {
        "tags": [
          "Containers"
        ],
        "operationId": "Containers_Get",
        "description": "Get a ContainerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/ContainerResource.containerName"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Containers"
        ],
        "operationId": "Containers_CreateOrUpdate",
        "description": "Create a ContainerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/ContainerResource.containerName"
          },
          {
            "name": "resource",
            "in": "body",
            "required": true,
            "description": "Resource create parameters.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "201": {
            "description": "ARM create operation completed successfully.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            },
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      },
      "patch": {
        "tags": [
          "Containers"
        ],
        "operationId": "Containers_Update",
        "description": "Update a ContainerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/ContainerResource.containerName"
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "The resource properties to be updated.",
            "schema": {
              "$ref": "#/definitions/ContainerResourceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "#/definitions/ContainerResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Containers"
        ],
        "operationId": "Containers_Delete",
        "description": "Delete a ContainerResource",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/RootScopeParam"
          },
          {
            "$ref": "#/parameters/ContainerResource.containerName"
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully."
          },
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "204": {
            "description": "Resource deleted successfully."
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/providers/Applications.Core/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "operationId": "Operations_List",
        "description": "List the operations for the provider",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v3/types.json#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "ARM operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/OperationListResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "BasicResourceProperties": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/ResourceStatus",
          "description": "Status of a resource."
        }
      },
      "description": "Basic properties of a Radius resource.",
      "required": [
        "status"
      ]
    },
    "ConnectionProperties": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "description": "The source of the connection"
        },
        "disableDefaultEnvVars": {
          "type": "boolean",
          "description": "default environment variable override",
          "default": false
        },
        "iam": {
          "$ref": "#/definitions/IamProperties",
          "description": "iam properties"
        }
      },
      "description": "Connection Properties",
      "required": [
        "source"
      ]
    },
    "Container": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "description": "The registry and image to download and run in your container"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Map<string, string>",
          "description": "environment"
        },
        "ports": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ContainerPort"
          },
          "x-cadl-name": "Map<string, ContainerPort>",
          "description": "container ports"
        },
        "readinessProbe": {
          "$ref": "#/definitions/HealthProbeProperties",
          "description": "readiness probe properties"
        },
        "livenessProbe": {
          "$ref": "#/definitions/HealthProbeProperties",
          "description": "liveness probe properties"
        },
        "volumes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Volume"
          },
          "x-cadl-name": "Map<string, Volume>",
          "description": "container volumes"
        }
      },
      "description": "Definition of a container",
      "required": [
        "image"
      ]
    },
    "ContainerPort": {
      "type": "object",
      "properties": {
        "containerPort": {
          "type": "integer",
          "format": "int32",
          "description": "The listening port number"
        },
        "protocol": {
          "$ref": "#/definitions/PortProtocol",
          "description": "Protocol in use by the port"
        },
        "provides": {
          "type": "string",
          "description": "Specifies a route provided by this port"
        }
      },
      "description": "Specifies a listening port for the container",
      "required": [
        "containerPort"
      ]
    },
    "ContainerProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation."
        },
        "application": {
          "type": "string",
          "description": "Specifies resource id of the application"
        },
        "connections": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConnectionProperties"
          },
          "x-cadl-name": "Map<string, ConnectionProperties>",
          "description": "Specifies a connection to another resource."
        },
        "container": {
          "$ref": "#/definitions/Container",
          "description": "Definition of a container."
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Extension[]",
          "description": "Extensions spec of the resource"
        }
      },
      "description": "Container properties",
      "required": [
        "application",
        "connections",
        "container",
        "extensions"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BasicResourceProperties"
        }
      ]
    },
    "ContainerResource": {
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ContainerProperties",
          "description": "The resource-specific properties for this resource.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "x-ms-client-flatten": true
        }
      },
      "description": "Concrete tracked resource types can be created by aliasing this type using a specific property type.",
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/TrackedResource"
        }
      ]
    },
    "ContainerResourceListResult": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerResource"
          },
          "x-cadl-name": "ContainerResource[]",
          "description": "The ContainerResource items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "x-cadl-name": "Rest.ResourceLocation<ContainerResource>"
        }
      },
      "description": "The response of a ContainerResource list operation.",
      "required": [
        "value"
      ]
    },
    "ContainerResourceUpdate": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "Resource tags."
        },
        "properties": {
          "$ref": "#/definitions/ContainerResourceUpdateProperties"
        }
      },
      "description": "The type used for update operations of the ContainerResource."
    },
    "ContainerResourceUpdateProperties": {
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState",
          "description": "The status of the last operation."
        },
        "application": {
          "type": "string",
          "description": "Specifies resource id of the application"
        },
        "connections": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConnectionProperties"
          },
          "x-cadl-name": "Map<string, ConnectionProperties>",
          "description": "Specifies a connection to another resource."
        },
        "container": {
          "$ref": "#/definitions/Container",
          "description": "Definition of a container."
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Extension[]",
          "description": "Extensions spec of the resource"
        },
        "status": {
          "$ref": "#/definitions/ResourceStatus",
          "description": "Status of a resource."
        }
      },
      "description": "The updatable properties of the ContainerResource."
    },
    "DaprProtocol": {
      "type": "string",
      "enum": [
        "http",
        "grpc"
      ],
      "x-ms-enum": {
        "name": "DaprProtocol",
        "modelAsString": true
      }
    },
    "DaprSidecarExtension": {
      "type": "object",
      "properties": {
        "appPort": {
          "type": "integer",
          "format": "int32",
          "description": "The Dapr appPort. Specifies the internal listening port for the application to handle requests from the Dapr sidecar. "
        },
        "appId": {
          "type": "string",
          "description": "The Dapr appId. Specifies the identifier used by Dapr for service invocation."
        },
        "config": {
          "type": "string",
          "description": "Specifies the Dapr configuration to use for the resource."
        },
        "protocol": {
          "$ref": "#/definitions/DaprProtocol",
          "description": "Specifies the Dapr app-protocol to use for the resource."
        },
        "provides": {
          "type": "string",
          "description": "Specifies the resource id of a dapr.io.InvokeHttpRoute that can route traffic to this resource."
        }
      },
      "description": "Specifies the resource should have a Dapr sidecar injected",
      "required": [
        "appId",
        "provides"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Extension"
        }
      ],
      "x-ms-discriminator-value": "daprSidecar"
    },
    "EphemeralVolume": {
      "type": "object",
      "properties": {
        "managedStore": {
          "$ref": "#/definitions/ManagedStore",
          "description": "Backing store for the ephemeral volume"
        }
      },
      "description": "Specifies an ephemeral volume for a container",
      "required": [
        "managedStore"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Volume"
        }
      ],
      "x-ms-discriminator-value": "ephemeral"
    },
    "ExecHealthProbeProperties": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "Command to execute to probe readiness/liveness"
        }
      },
      "description": "Specifies the properties for readiness/liveness probe using an executable",
      "required": [
        "command"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "x-ms-discriminator-value": "exec"
    },
    "Extension": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for Extension."
        }
      },
      "description": "Extension of a resource.",
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "HealthProbeProperties": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for HealthProbeProperties."
        },
        "initialDelaySeconds": {
          "type": "number",
          "format": "float",
          "description": "Initial delay in seconds before probing for readiness/liveness"
        },
        "failureThreshold": {
          "type": "number",
          "format": "float",
          "description": "Threshold number of times the probe fails after which a failure would be reported"
        },
        "periodSeconds": {
          "type": "number",
          "format": "float",
          "description": "Interval for the readiness/liveness probe in seconds"
        }
      },
      "description": "Properties for readiness/liveness probe",
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "HttpGetHealthProbeProperties": {
      "type": "object",
      "properties": {
        "containerPort": {
          "type": "integer",
          "format": "int32",
          "description": "The listening port number"
        },
        "path": {
          "type": "string",
          "description": "The route to make the HTTP request on"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Map<string, string>",
          "description": "Custom HTTP headers to add to the get request"
        }
      },
      "description": "Specifies the properties for readiness/liveness probe using HTTP Get",
      "required": [
        "containerPort",
        "path"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "x-ms-discriminator-value": "httpGet"
    },
    "IamProperties": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/Kind",
          "description": "The kind of IAM provider to configure"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "RBAC permissions to be assigned on the source resource"
        }
      },
      "description": "Iam properties",
      "required": [
        "kind",
        "roles"
      ]
    },
    "Kind": {
      "type": "string",
      "enum": [
        "azure"
      ],
      "x-ms-enum": {
        "name": "Kind",
        "modelAsString": true
      }
    },
    "ManagedStore": {
      "type": "string",
      "enum": [
        "memory",
        "disk"
      ],
      "x-ms-enum": {
        "name": "ManagedStore",
        "modelAsString": true
      }
    },
    "ManualScalingExtension": {
      "type": "object",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replica count."
        }
      },
      "description": "ManualScaling Extension",
      "required": [
        "replicas"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Extension"
        }
      ],
      "x-ms-discriminator-value": "manualScaling"
    },
    "OutputResource": {
      "type": "object",
      "properties": {},
      "description": "Properties of an output resource."
    },
    "PersistentVolume": {
      "type": "object",
      "properties": {
        "rbac": {
          "$ref": "#/definitions/VolumePermission",
          "description": "Container read/write access to the volume"
        },
        "source": {
          "type": "string",
          "description": "The source of the volume"
        }
      },
      "description": "Specifies a persistent volume for a container",
      "required": [
        "source"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Volume"
        }
      ],
      "x-ms-discriminator-value": "persistent"
    },
    "PortProtocol": {
      "type": "string",
      "enum": [
        "TCP",
        "UDP"
      ],
      "x-ms-enum": {
        "name": "PortProtocol",
        "modelAsString": true
      }
    },
    "ProvisioningState": {
      "type": "string",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true
      }
    },
    "ResourceStatus": {
      "type": "object",
      "properties": {
        "outputResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputResource"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "OutputResource[]",
          "description": "Properties of an output resource"
        }
      },
      "description": "Status of a resource.",
      "required": [
        "outputResources"
      ]
    },
    "TcpHealthProbeProperties": {
      "type": "object",
      "properties": {
        "containerPort": {
          "type": "integer",
          "format": "int32",
          "description": "The listening port number"
        }
      },
      "description": "Specifies the properties for readiness/liveness probe using TCP",
      "required": [
        "containerPort"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/HealthProbeProperties"
        }
      ],
      "x-ms-discriminator-value": "tcp"
    },
    "Volume": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Discriminator property for Volume."
        },
        "mountPath": {
          "type": "string",
          "description": "The path where the volume is mounted"
        }
      },
      "description": "Specifies a volume for a container",
      "discriminator": "kind",
      "required": [
        "kind"
      ]
    },
    "VolumePermission": {
      "type": "string",
      "enum": [
        "read",
        "write"
      ],
      "x-ms-enum": {
        "name": "VolumePermission",
        "modelAsString": true
      }
    }
  },
  "parameters": {
    "ContainerResource.containerName": {
      "name": "containerName",
      "in": "path",
      "required": true,
      "description": "Container name",
      "pattern": "^[A-Za-z]([-A-Za-z0-9]*[A-Za-z0-9])?$",
      "maxLength": 63,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "RootScopeParam": {
      "name": "rootScope",
      "in": "path",
      "required": true,
      "description": "root scope path",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
