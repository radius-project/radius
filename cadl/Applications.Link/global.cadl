/*
Copyright 2023 The Radius Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import "@cadl-lang/openapi";

using OpenAPI;


@doc("Basic properties of a Radius resource.")
model BasicResourceProperties {
  @doc("Status of a resource.")
  @visibility("read")
  status?: ResourceStatus;

  @doc("Fully qualified resource ID for the environment that the link is linked to")
  environment: string;

  @doc("Fully qualified resource ID for the application that the link is consumed by")
  application?: Application
}

@doc("Basic properties of a Dapr component object.")
model BasicDaprResourceProperties extends BasicResourceProperties{
  @doc("The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to use the Dapr component.")
  @visibility("read")
  componentName?: string;
}

@doc("Status of a resource.")
model ResourceStatus {
  @doc("Properties of an output resource")
  @extension("x-ms-identifiers", [])
  outputResources?: OutputResource[];
}

@doc("Properties of an output resource.")
model OutputResource {}

@doc("Fully qualified resource ID for the application that the link is consumed by")
scalar Application extends string;

@doc("Provisioning state of the link at the time the operation was called")
enum ProvisioningState {
  Succeeded,
  Failed,
  Canceled,
  Provisioning,
  Updating,
  Deleting,
  Accepted,
}

@doc("The recipe used to automatically deploy underlying infrastructure for a link")
model Recipe{
  @doc("The name of the recipe within the environment to use")
  name: string;
  @doc("Key/value parameters to pass into the recipe at deployment")
  parameters?: Parameters;
}
@doc("Key/value parameters to pass into the recipe at deployment")
model Parameters{}