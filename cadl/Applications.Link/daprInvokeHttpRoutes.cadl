// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-providerhub";
import "@cadl-lang/openapi";

// These files allow the use of {rootScope} in the generated paths with a custom resourceOperations object
import "../customRootScope.cadl";
import "../aksrootscope.cadl";

import "./global.cadl";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.ResourceManager;
using Azure.ResourceManager.Radius;
using OpenAPI;

@service({
  title: "Applications.Link Management APIs",
  version: "2022-03-15-privatepreview",
})
@doc("REST APIs for Applications.Link/daprInvokeHttpRoutes")
@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)
namespace Applications.Link;

@doc("DaprInvokeHttpRoute link properties")
model DaprInvokeHttpRouteProperties extends BasicResourceProperties {
  @doc("Provisioning state of the daprInvokeHttpRoute link at the time the operation was called")
  @visibility("read")
  provisioningState?: ProvisioningState;

  @doc("The Dapr appId used for the route")
  appId: string;

  @doc("The recipe used to automatically deploy underlying infrastructure for the daprInvokeHttpRoute link")
  recipe?: Recipe;
}

@doc("DaprInvokeHttpRoute link")
model DaprInvokeHttpRouteResource is TrackedResource<DaprInvokeHttpRouteProperties> {
  @doc("The name of the DaprInvokeHttpRoute link resource")
  @maxLength(63)
  @pattern("^[a-z]([-a-z0-9]*[a-z0-9])?$")
  @key("daprInvokeHttpRouteName")
  @path
  @segment("daprInvokeHttpRoutes")
  @extension("x-ms-parameter-location", "method")
  name: string;
}

@armResourceOperations
interface DaprInvokeHttpRoute
  extends Radius.RootScopeResourceOperations<
      DaprInvokeHttpRouteResource,
      DaprInvokeHttpRouteProperties,
      RootScopeParam
    > {}