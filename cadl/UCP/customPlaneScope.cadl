// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

// Currently, our spec is not approved by ARM so this is a workaround that the CADL team gave us
// so that we can preface our paths with {rootScope}
// To generate {rootScope} in the path, use the tag --import "./aksrootscope.cadl" while compiling

import "@cadl-lang/openapi";
import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-azure-core";

namespace Azure.ResourceManager.Radius;

using Cadl.Http;
using Cadl.Rest;
using OpenAPI;
using Autorest;
using Azure.Core;
using Azure.ResourceManager.Foundations;

// Skip generation of ListBySubscription
interface PlaneResourceListBySubscription<TResource> {}

model PlaneParentScope<TResource, TRootParams> {
  ...PlaneResourceCommonParameters<TResource, TRootParams>;
  ...ParentKeysOf<TResource>;
}

model PlaneResourceCommonParameters<TResource, TRootParams> {
  ...ApiVersionParameter;
  ...TRootParams;
}

model PlaneResourceInstanceParameters<TResource, TRootParams> {
  ...PlaneResourceCommonParameters<TResource, TRootParams>;
  ...KeysOf<TResource>;
}

interface PlaneResourceOperations<TResource extends ArmResource, TProperties extends object, TRootParams>
  extends Azure.ResourceManager.Radius.ResourceRead<
      TResource,
      PlaneResourceInstanceParameters<TResource, TRootParams>
    >,
    Azure.ResourceManager.Radius.ResourceCreate<
      TResource,
      PlaneResourceInstanceParameters<TResource, TRootParams>
    >,
    Azure.ResourceManager.Radius.ResourceDelete<
      TResource,
      PlaneResourceInstanceParameters<TResource, TRootParams>
    > {} // UCPResourceListByParent<TResource, TRootParams>

// interface UCPResourceListByParent<TResource extends ArmResource, TRootParams> {
//   @get
//   //@pageable
//   @doc("Lists information about all {name}s in the given root scope", TResource)
//   @autoRoute
//   @list(TResource)
//   @segmentOf(TResource)
//   @armResourceList(TResource)
//   ListByPlane(
//     ...PlaneParentScope<TResource, TRootParams>,
//   ): ArmResponse<ResourceListResult<TResource>> | ErrorResponse;
// }

@doc("Custom root scope")
model PlaneParam {
  @doc("The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}")
  @minLength(1)
  @path
  @segment("planes")
  @extension("x-ms-skip-url-encoding", true)
  @extension("x-ms-parameter-location", "client")
  planeType: string;

  @doc("The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}")
  @minLength(1)
  @path
  @extension("x-ms-skip-url-encoding", true)
  @extension("x-ms-parameter-location", "client")
  planeName: string;
}