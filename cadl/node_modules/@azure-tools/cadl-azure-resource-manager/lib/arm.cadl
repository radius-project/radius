import "../dist/src/index.js";
import "@cadl-lang/openapi";
import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-azure-core";

namespace Azure.ResourceManager;

using Cadl.Http;
using Cadl.Rest;
using OpenAPI;
using Autorest;
using Azure.Core;

@doc("Common properties for all ARM resources.")
model ArmResource {
  @doc("Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}")
  @visibility("read")
  id: string;
  // The name property must be included by the resource type author!


  @doc("The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"")
  @visibility("read")
  type: string;

  @doc("Azure Resource Manager metadata containing createdBy and modifiedBy information.")
  @visibility("read")
  systemData?: SystemData;
}

@armCommonDefinition("TrackedResource")
@doc("The resource model definition for an Azure Resource Manager tracked top level resource")
model TrackedResourceBase extends ArmResource {
  @doc("The geo-location where the resource lives")
  @visibility("read", "create")
  location: string;
  ...ArmTagsProperty;
}

@doc("The ARM Resource tags.")
model ArmTagsProperty {
  @doc("Resource tags.")
  tags?: Map<string, string>;
}

@doc("The provisioning state of a resource type.")
@knownValues(ResourceProvisioningStateKV)
model ResourceProvisioningState is string {}
enum ResourceProvisioningStateKV {
  Succeeded,
  Failed,
  Canceled,
}

@doc("Contains a default provisioningState property to be spread into resource property types")
model DefaultProvisioningStateProperty {
  @doc("The provisioning state of the resource.")
  provisioningState: ResourceProvisioningState;
}

@doc("Concrete tracked resource types can be created by aliasing this type using a specific property type.")
@armResourceInternal(TProperties)
model TrackedResource<TProperties> extends TrackedResourceBase {
  @doc("The resource-specific properties for this resource.")
  @visibility("read", "create")
  @extension("x-ms-client-flatten", true)
  properties: TProperties;
}

@doc("The base proxy resource.")
@armCommonDefinition("ProxyResource")
model ProxyResourceBase {
  ...ArmResource;
}

// Note that ProxyResource is the base definition for both kinds of resources
@doc("The base extension resource.")
@armCommonDefinition("ProxyResource")
model ExtensionResourceBase {
  ...ArmResource;
}

@doc("The response of a {name} list operation.", TResource)
@friendlyName("{name}ListResult", TResource)
model ResourceListResult<TResource> is Page<TResource> {}

// Defines a properties type used to create named resource update models.
// This type is not used directly, it is referenced by ResourceUpdateModel<T>.
@doc("The updatable properties of the {name}.", TResource)
@friendlyName("{name}UpdateProperties", TResource)
model ResourceUpdateModelProperties<TResource, TProperties> is OptionalProperties<UpdateableProperties<TProperties>> {}

// Defines a model type used to create named resource update models
//   e.g. `model MyResourceUpdate is ResourceUpdate<MyResourceProperties> {}`
@doc("The type used for update operations of the {name}.", TResource)
@friendlyName("{name}Update", TResource)
model ResourceUpdateModel<TResource, TProperties> is OmitProperties<OptionalProperties<UpdateableProperties<TResource>>, "Name" | "name"> {
  properties?: ResourceUpdateModelProperties<TResource, TProperties>;
}

@doc("Concrete proxy resource types can be created by aliasing this type using a specific property type.")
@armResourceInternal(TProperties)
model ProxyResource<TProperties> extends ProxyResourceBase {
  @doc("The resource-specific properties for this resource.")
  @visibility("read", "create")
  @extension("x-ms-client-flatten", true)
  properties: TProperties;
}

@doc("Concrete extension resource types can be created by aliasing this type using a specific property type.")
@armResourceInternal(TProperties)
model ExtensionResource<TProperties> extends ExtensionResourceBase {
  @doc("The resource-specific properties for this resource.")
  @visibility("read", "create")
  @extension("x-ms-client-flatten", true)
  properties: TProperties;
}

@doc("The default name parameter type")
model NameParameter {
  @doc("The name of the resource")
  @path
  name: string;
}

@doc("ARM operation completed successfully.")
model ArmResponse<T> is OkResponse<T> {}

@doc("ARM create operation completed successfully.")
model ArmCreatedResponse<T> {
  ...CreatedResponse;
  ...RetryAfterHeader;

  @doc("The reponse body.")
  @body
  body: T;
}

@doc("Resource deleted successfully.")
model ArmDeletedResponse {
  @doc("The status code.")
  @statusCode
  statusCode: 200;
}

@doc("Resource deletion accepted.")
model ArmDeleteAcceptedResponse {
  @doc("The status code.")
  @statusCode
  statusCode: 202;
  ...RetryAfterHeader;
}

@doc("Resource deleted successfully.")
model ArmDeletedNoContentResponse {
  @doc("The status code.")
  @statusCode
  statusCode: 204;
}

@doc("The default api-version parameter type.")
model ApiVersionParameter {
  @query
  @minLength(1)
  @doc("The API version to use for this operation.")
  @armCommonParameter("ApiVersionParameter")
  "api-version": string;
}

@doc("The default subscriptionId parameter type.")
model SubscriptionId {
  @path
  @minLength(1)
  @segment("subscriptions")
  @doc("The ID of the target subscription.")
  @armCommonParameter("SubscriptionIdParameter")
  subscriptionId: string;
}

@doc("The default resource group parameter type.")
model ResourceGroup {
  @path
  @minLength(1)
  @maxLength(90)
  @segment("resourceGroups")
  @pattern("^[-\\w\\._\\(\\)]+$")
  @doc("The name of the resource group. The name is case insensitive.")
  @armCommonParameter("ResourceGroupNameParameter")
  resourceGroupName: string;
}

model ProviderNamespace<TResource> {
  @path
  @segment("providers")
  @assignProviderNameValue(TResource)
  @doc("The provider namespace for the resource.")
  provider: "Microsoft.ThisWillBeReplaced";
}

model ResourceCommonParameters<TResource> {
  ...ApiVersionParameter;
  ...SubscriptionId;
  ...ResourceGroup;
  ...ProviderNamespace<TResource>;
}

model ResourceInstanceParameters<TResource> {
  ...ResourceCommonParameters<TResource>;
  ...KeysOf<TResource>;
}

model SubscriptionScope<TResource> {
  ...ApiVersionParameter;
  ...SubscriptionId;
  ...ProviderNamespace<TResource>;
  ...ParentKeysOf<TResource>;
}

model ResourceGroupScope<TResource> {
  ...ApiVersionParameter;
  ...SubscriptionId;
  ...ResourceGroup;
  ...ProviderNamespace<TResource>;
  ...ParentKeysOf<TResource>;
}

@doc("The default resourceUri parameter type.")
model ResourceUriParameter {
  @path
  @doc("The fully qualified Azure Resource manager identifier of the resource.")
  @extension("x-ms-skip-url-encoding", true)
  resourceUri: string;
}

@doc("The default operationId parameter type.")
model OperationIdParameter {
  @path
  @minLength(1)
  @doc("The ID of an ongoing async operation.")
  @armCommonParameter("OperationIdParameter")
  operationId: string;
}

@doc("The common resource parameters type.")
model CommonResourceParameters {
  ...ApiVersionParameter;
  ...SubscriptionId;
  ...ResourceGroup;
}

@armCommonDefinition
@doc("Details of a REST API operation, returned from the Resource Provider Operations API")
model Operation {
  @doc("""
  The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
  """)
  @visibility("read")
  name?: string;

  @doc("""
  Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
  """)
  @visibility("read")
  isDataAction?: boolean;

  @doc("Localized display information for this particular operation.")
  display?: OperationDisplay;

  @doc("""
  The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
  """)
  @visibility("read")
  origin?: Origin;

  @doc("""
  Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
  """)
  actionType?: ActionType;
}

@doc("""
The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
""")
@knownValues(OriginKV)
model Origin is string {}
enum OriginKV {
  user,
  system,
  "user,system",
}

@doc("""
Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
""")
@knownValues(ActionTypeKV)
model ActionType is string {}
enum ActionTypeKV {
  Internal,
}

@armCommonDefinition
@doc("""
A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
""")
model OperationListResult extends Page<Operation> {}

@armCommonDefinition
@doc("Localized display information for and operation.")
model OperationDisplay {
  @doc("""
  The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
  """)
  provider?: string;

  @doc("""
  The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
  """)
  resource?: string;

  @doc("""
  The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
  """)
  operation?: string;

  @doc("The short, localized friendly description of the operation; suitable for tool tips and detailed views.")
  description?: string;
}

@armCommonDefinition
@doc("The current status of an async operation.")
model OperationStatusResult {
  @doc("Fully qualified ID for the async operation.")
  id?: string;

  @doc("Name of the async operation.")
  name?: string;

  @doc("Operation status.")
  status: string;

  @doc("Percent of the operation that is complete.")
  @minValue(0)
  @maxValue(100)
  percentComplete?: int32;

  @doc("The start time of the operation.")
  startTime?: zonedDateTime;

  @doc("The end time of the operation.")
  endTime?: zonedDateTime;

  @doc("The operations list.")
  operations: OperationStatusResult[];

  @doc("If present, details of the operation error.")
  error?: ErrorDetail;
}

@error
@armCommonDefinition
@doc("Common error response for all Azure Resource Manager APIs to return error details for failed operations.")
model ErrorResponse {
  @doc("The error object.")
  error?: ErrorDetail;
}

@armCommonDefinition
@doc("The error detail.")
model ErrorDetail {
  @doc("The error code.")
  @visibility("read")
  code?: string;

  @doc("The error message.")
  @visibility("read")
  message?: string;

  @doc("The error target.")
  @visibility("read")
  target?: string;

  @extension("x-ms-identifiers", ["message", "target"])
  @doc("The error details.")
  @visibility("read")
  details?: ErrorDetail[];

  @extension("x-ms-identifiers", ["message", "target"])
  @doc("The error additional info.")
  @visibility("read")
  additionalInfo?: ErrorAdditionalInfo[];
}

@armCommonDefinition
@doc("The resource management error additional info.")
model ErrorAdditionalInfo {
  @doc("The additional info type.")
  @visibility("read")
  type?: string;

  @doc("The additional info.")
  @visibility("read")
  info?: {};
}

// NOTE: This is how the enum is named in types.json
@doc("The kind of entity that created the resource.")
@knownValues(createdByTypeKV)
model createdByType is string {}
enum createdByTypeKV {
  User,
  Application,
  ManagedIdentity,
  Key,
}

@armCommonDefinition("systemData")
@doc("Metadata pertaining to creation and last modification of the resource.")
model SystemData {
  @visibility("read")
  @doc("The identity that created the resource.")
  createdBy?: string;

  @visibility("read")
  @doc("The type of identity that created the resource.")
  createdByType?: createdByType;

  @visibility("read")
  @doc("The type of identity that created the resource.")
  createdAt?: plainDate;

  @visibility("read")
  @doc("The identity that last modified the resource.")
  lastModifiedBy?: string;

  @visibility("read")
  @doc("The type of identity that last modified the resource.")
  lastModifiedByType?: createdByType;

  @visibility("read")
  @doc("The timestamp of resource last modification (UTC)")
  lastModifiedAt?: plainDate;
}

// Arm optional envelope properties
@doc("The managed service identities envelope.")
model ManagedServiceIdentity {
  @doc("The managed service identities assigned to this resource.")
  identity?: ManagedIdentityProperties;
}

@doc("Managed identity for services that are constrained to system-assigned managed identities.")
model ManagedSystemAssignedIdentity {
  @doc("The managed service identities assigned to this resource.")
  identity?: ManagedSystemIdentityProperties;
}

@doc("The eTag property envelope.")
model EntityTag {
  @doc("If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.")
  @visibility("read")
  eTag?: string;
}

@doc("The managedBy property envelope.")
model ManagedBy {
  @doc("The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.")
  managedBy?: string;
}

@doc("The resource kind property envelope.")
model ResourceKind {
  @doc("Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.")
  @pattern("^[-\\w\\._,\\(\\\\\\)]+$")
  @visibility("read", "create")
  kind?: string;
}

@doc("Details of the resource plan.")
@armCommonDefinition("Plan")
model ResourcePlanType {
  @doc("A user defined name of the 3rd Party Artifact that is being procured.")
  name: string;

  @doc("The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic")
  publisher: string;

  @doc("The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. ")
  product: string;

  @doc("A publisher provided promotion code as provisioned in Data Market for the said product/artifact.")
  promotionCode?: string;

  @doc("The version of the desired product/artifact.")
  version?: string;
}

@doc("The resource plan property envelope.")
model ResourcePlan {
  @doc("Details of the resource plan.")
  plan?: ResourcePlanType;
}

@doc("Available service tiers for the SKU.")
@knownValues(SkuTierKV)
model SkuTier is string {}
enum SkuTierKV {
  "Free",
  "Basic",
  "Standard",
  "Premium",
}

@doc("The SKU (Stock Keeping Unit) assigned to this resource.")
@armCommonDefinition("Sku")
model ResourceSkuType {
  @doc("The name of the SKU, usually a combination of letters and numbers, for example, 'P3'")
  name: string;

  @doc("This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.")
  tier?: SkuTier;

  @doc("The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.")
  size?: string;

  @doc("If the service has different generations of hardware, for the same SKU, then that can be captured here.")
  family?: string;

  @doc("If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.")
  capacity?: int32;
}

@doc("The SKU (Stock Keeping Unit) assigned to this resource.")
model ResourceSku {
  @doc("The SKU (Stock Keeping Unit) assigned to this resource.")
  sku?: ResourceSkuType;
}

@armCommonDefinition("ManagedServiceIdentity", "v4", "managedidentity.json")
@doc("The properties of the managed service identities assigned to this resource.")
model ManagedIdentityProperties {
  @doc("The Active Directory tenant id of the principal.")
  @visibility("read")
  tenantId?: string;

  @doc("The active directory identifier of this principal.")
  @visibility("read")
  principalId?: string;

  @doc("The type of managed identity assigned to this resource.")
  type: ManagedIdentityType;

  @doc("The identities assigned to this resource by the user.")
  userAssignedIdentities?: Map<string, UserAssignedIdentity>;
}

@armCommonDefinition("SystemAssignedServiceIdentity", "v4", "managedidentity.json")
@doc("The properties of the service-assigned identity associated with this resource.")
model ManagedSystemIdentityProperties {
  @doc("The Active Directory tenant id of the principal.")
  @visibility("read")
  tenantId?: string;

  @doc("The active directory identifier of this principal.")
  @visibility("read")
  principalId?: string;

  @doc("The type of managed identity assigned to this resource.")
  type: ManagedSystemIdentityType;
}

@doc("A managed identity assigned by the user.")
model UserAssignedIdentity {
  @doc("The active directory client identifier for this principal.")
  clientId?: string;

  @doc("The active directory identifier for this principal.")
  principalId?: string;
}

@doc("The kind of managed identity assigned to this resource.")
@knownValues(ManagedIdentityTypeKV)
model ManagedIdentityType is string {}
enum ManagedIdentityTypeKV {
  None,
  SystemAssigned,
  UserAssigned,
  SystemAndUserAssigned: "SystemAssigned, UserAssigned",
}

@doc("The kind of managemed identity assigned to this resource.")
@knownValues(ManagedSystemIdentityTypeKV)
model ManagedSystemIdentityType is string {}
enum ManagedSystemIdentityTypeKV {
  None,
  SystemAssigned,
}

@copyResourceKeyParameters
model KeysOf<TResource> {}

@copyResourceKeyParameters("parent")
model ParentKeysOf<TResource> {}

interface ResourceRead<TResource> {
  @autoRoute
  @doc("Get a {name}", TResource)
  @get
  @armResourceRead(TResource)
  Get(...ResourceInstanceParameters<TResource>): ArmResponse<TResource> | ErrorResponse;
}

interface ResourceCreate<TResource> {
  @autoRoute
  @doc("Create a {name}", TResource)
  @extension("x-ms-long-running-operation", true)
  @asyncOperationOptions("azure-async-operation")
  @armResourceCreateOrUpdate(TResource)
  @put
  CreateOrUpdate(
    ...ResourceInstanceParameters<TResource>,

    @doc("Resource create parameters.")
    @body
    resource: TResource
  ): ArmResponse<TResource> | ArmCreatedResponse<TResource> | ErrorResponse;
}

@doc("Update model for resource tags")
interface ResourceUpdate<TResource, TProperties> {
  @autoRoute
  @doc("Update a {name}", TResource)
  @armResourceUpdate(TResource)
  @patch
  Update(
    ...ResourceInstanceParameters<TResource>,

    @doc("The resource properties to be updated.")
    @body
    properties: ResourceUpdateModel<TResource, TProperties>
  ): ArmResponse<TResource> | ErrorResponse;
}

interface ResourceDelete<TResource> {
  @autoRoute
  @doc("Delete a {name}", TResource)
  @extension("x-ms-long-running-operation", true)
  @asyncOperationOptions("azure-async-operation")
  @armResourceDelete(TResource)
  @delete
  Delete(...ResourceInstanceParameters<TResource>):
    | ArmDeletedResponse
    | ArmDeleteAcceptedResponse
    | ArmDeletedNoContentResponse
    | ErrorResponse;
}

interface ResourceListBySubscription<TResource> {
  @pageable
  @autoRoute
  @doc("List {name} resources by subscription ID", TResource)
  @list(TResource)
  @segmentOf(TResource)
  @armResourceList(TResource)
  @get
  ListBySubscription(
    ...SubscriptionScope<TResource>
  ): ArmResponse<ResourceListResult<TResource>> | ErrorResponse;
}

interface ResourceListByParent<TResource> {
  @get
  @pageable
  @autoRoute
  @list(TResource)
  @segmentOf(TResource)
  @armRenameListByOperation(TResource) // This must come before @armResourceList!
  @armResourceList(TResource)
  ListByParent(
    ...ResourceGroupScope<TResource>
  ): ArmResponse<ResourceListResult<TResource>> | ErrorResponse;
}

interface ResourceInstanceOperations<TResource, TProperties>
  extends ResourceRead<TResource>,
    ResourceUpdate<TResource, TProperties>,
    ResourceDelete<TResource> {}

interface ResourceCollectionOperations<TResource>
  extends ResourceCreate<TResource>,
    ResourceListByParent<TResource>,
    ResourceListBySubscription<TResource> {}

interface ResourceOperations<TResource, TProperties>
  extends ResourceRead<TResource>,
    ResourceCreate<TResource>,
    ResourceUpdate<TResource, TProperties>,
    ResourceDelete<TResource>,
    ResourceListByParent<TResource>,
    ResourceListBySubscription<TResource> {}

// Defines a model type used to create named resource update models
//   e.g. `model MyResourceUpdate is ResourceUpdate<MyResourceProperties> {}`
@doc("The type used for update operations of the {name}.", TResource)
@friendlyName("{name}Update", TResource)
model ProxyResourceUpdateModel<TResource, TProperties> {
  properties?: ResourceUpdateModelProperties<TResource, TProperties>;
}

interface ProxyResourceOperations<TResource>
  extends ResourceRead<TResource>,
    ResourceCreate<TResource>,
    ResourceDelete<TResource>,
    ResourceListByParent<TResource> {}

interface ProxyResourceUpdate<TResource, TProperties> {
  @autoRoute
  @doc("Update a {name}", TResource)
  @patch
  @armResourceUpdate(TResource)
  Update(
    ...ResourceInstanceParameters<TResource>,

    @doc("The resource properties to be updated.")
    @body
    properties: ProxyResourceUpdateModel<TResource, TProperties>
  ): ArmResponse<TResource> | ErrorResponse;
}

@tag("Operations")
interface Operations {
  @autoRoute
  @armUpdateProviderNamespace
  @pageable
  @doc("List the operations for the provider")
  @segment("operations")
  @get
  List(
    ...ApiVersionParameter,

    @path
    @segment("providers")
    @doc("The provider namespace (this parameter will not show up in operations).")
    provider: "Microsoft.ThisWillBeReplaced"
  ): ArmResponse<OperationListResult> | ErrorResponse;
}

model ExtensionResourceCommonParameters<TResource> {
  ...ApiVersionParameter;
  ...ResourceUriParameter;
  ...ProviderNamespace<TResource>;
}

model ExtensionResourceInstanceParameters<TResource> {
  ...ExtensionResourceCommonParameters<TResource>;
  ...KeysOf<TResource>;
}

interface ExtensionResourceRead<TResource> {
  @doc("Get a {name}", TResource)
  @armResourceRead(TResource)
  @get
  Get(...ExtensionResourceInstanceParameters<TResource>): ArmResponse<TResource> | ErrorResponse;
}

interface ExtensionResourceCreate<TResource> {
  @doc("Create a {name}", TResource)
  @extension("x-ms-long-running-operation", true)
  @asyncOperationOptions("azure-async-operation")
  @armResourceCreateOrUpdate(TResource)
  @put
  CreateOrUpdate(
    ...ExtensionResourceInstanceParameters<TResource>,

    @doc("Resource create parameters.")
    @body
    resource: TResource
  ): ArmResponse<TResource> | ArmCreatedResponse<TResource> | ErrorResponse;
}

interface ExtensionResourceUpdate<TResource, TProperties> {
  @doc("Update a {name}", TResource)
  @armResourceUpdate(TResource)
  @patch
  Update(
    ...ExtensionResourceInstanceParameters<TResource>,

    @doc("The resource properties to be updated.")
    @body
    properties: ResourceUpdateModel<TResource, TProperties>
  ): ArmResponse<TResource> | ErrorResponse;
}

interface ExtensionResourceDelete<TResource> {
  @doc("Delete a {name}", TResource)
  @extension("x-ms-long-running-operation", true)
  @asyncOperationOptions("azure-async-operation")
  @armResourceDelete(TResource)
  @delete
  Delete(...ExtensionResourceInstanceParameters<TResource>):
    | ArmDeletedResponse
    | ArmDeleteAcceptedResponse
    | ArmDeletedNoContentResponse
    | ErrorResponse;
}

interface ExtensionResourceList<TResource> {
  @pageable
  @autoRoute
  @doc("List {name} resources by parent", TResource)
  @list(TResource)
  @segmentOf(TResource)
  @get
  List(
    ...ExtensionResourceCommonParameters<TResource>,
    ...ParentKeysOf<TResource>
  ): ArmResponse<ResourceListResult<TResource>> | ErrorResponse;
}

interface ExtensionResourceInstanceOperations<TResource, TProperties>
  extends ExtensionResourceRead<TResource>,
    ExtensionResourceUpdate<TResource, TProperties>,
    ExtensionResourceDelete<TResource> {}

interface ExtensionResourceCollectionOperations<TResource>
  extends ExtensionResourceCreate<TResource>,
    ExtensionResourceList<TResource> {}

interface ExtensionResourceOperations<TResource, TProperties>
  extends ExtensionResourceRead<TResource>,
    ExtensionResourceCreate<TResource>,
    ExtensionResourceUpdate<TResource, TProperties>,
    ExtensionResourceDelete<TResource>,
    ExtensionResourceList<TResource> {}
