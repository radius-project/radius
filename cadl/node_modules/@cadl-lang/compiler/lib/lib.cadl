namespace Cadl;

@intrinsic("bytes")
model bytes {}

@numeric
@intrinsic("int64")
model int64 {}

@numeric
@intrinsic("int32")
model int32 {}

@numeric
@intrinsic("int16")
model int16 {}

@numeric
@intrinsic("int8")
model int8 {}

@numeric
@intrinsic("uint64")
model uint64 {}

@numeric
@intrinsic("uint32")
model uint32 {}

@numeric
@intrinsic("uint16")
model uint16 {}

@numeric
@intrinsic("uint8")
model uint8 {}

@numeric
@intrinsic("safeint")
model safeint {}

@numeric
@intrinsic("float32")
model float32 {}

@numeric
@intrinsic("float64")
model float64 {}

@intrinsic("string")
model string {}

@intrinsic("plainDate")
model plainDate {}

@intrinsic("plainTime")
model plainTime {}

@intrinsic("zonedDateTime")
model zonedDateTime {}

@intrinsic("duration")
model duration {}

@intrinsic("boolean")
model boolean {}

@intrinsic("null")
model null {}

// want to change this to
// model<K, V> = [K, V][];
// but templates aren't supported with model = yet.
@intrinsic("Map")
model Map<K, V> {
  @doc("the key of the Map.")
  k: K;

  @doc("the vaule of the Map.")
  v: V;
}

@doc("The template for adding optional properties.")
@withOptionalProperties
model OptionalProperties<T> {
  ...T;
}

@doc("The template for adding updateable properties.")
@withUpdateableProperties
model UpdateableProperties<T> {
  ...T;
}

@doc("The template for omitting properties.")
@withoutOmittedProperties(TStringOrTuple)
model OmitProperties<T, TStringOrTuple> {
  ...T;
}

@withoutDefaultValues
model OmitDefaults<T> {
  ...T;
}
