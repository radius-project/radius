/*
Copyright 2023 The Radius Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Currently, our spec is not approved by ARM so this is a workaround that the CADL team gave us
// so that we can preface our paths with {rootScope}
// To generate {rootScope} in the path, use the tag --import "./aksrootscope.cadl" while compiling

import "@cadl-lang/openapi";
import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";
import "@azure-tools/cadl-azure-resource-manager";
import "@azure-tools/cadl-azure-core";

namespace Azure.ResourceManager.Radius;

using Cadl.Http;
using Cadl.Rest;
using OpenAPI;
using Autorest;
using Azure.Core;
using Azure.ResourceManager.Foundations;

model RootScopeParentScope<TResource, TRootParams> {
  ...RootScopeResourceCommonParameters<TResource, TRootParams>;
  ...ParentKeysOf<TResource>;
}

model RootScopeResourceCommonParameters<TResource, TRootParams> {
  ...ApiVersionParameter;
  ...TRootParams;
  ...ProviderNamespace<TResource>;
}

model RootScopeResourceInstanceParameters<TResource, TRootParams> {
  ...RootScopeResourceCommonParameters<TResource, TRootParams>;
  ...KeysOf<TResource>;
}

interface ResourceRead<TResource extends ArmResource, TRootParams> {
  @autoRoute
  @doc("Retrieves information about a {name}", TResource)
  @get
  @armResourceRead(TResource)
  Get(...TRootParams): ArmResponse<TResource> | ErrorResponse;
}

interface ResourceCreate<TResource extends ArmResource, TRootParams> {
  @autoRoute
  @doc("Creates or updates a {name}", TResource)
  @armResourceCreateOrUpdate(TResource)
  @put
  CreateOrUpdate(
    ...TRootParams,

    @doc("Resource create parameters.")
    @body
    resource: TResource
  ): ArmResponse<TResource> | ArmCreatedResponse<TResource> | ErrorResponse;
}
interface ResourceDelete<TResource extends ArmResource, TRootParams> {
  @autoRoute
  @doc("Deletes an existing {name}", TResource)
  @armResourceDelete(TResource)
  @delete
  Delete(...TRootParams):
    | ArmDeletedResponse
    | ArmDeleteAcceptedResponse
    | ArmDeletedNoContentResponse
    | ErrorResponse;
}

interface ResourceDeleteAsync<TResource extends ArmResource, TRootParams> {
  @autoRoute
  @doc("Deletes an existing {name}", TResource)
  @extension("x-ms-long-running-operation", true)
  @asyncOperationOptions("azure-async-operation")
  @armResourceDelete(TResource)
  @delete
  Delete(...TRootParams):
    | ArmDeletedResponse
    | ArmDeleteAcceptedResponse
    | ArmDeletedNoContentResponse
    | ErrorResponse;
}

interface ResourceListByParent<TResource extends ArmResource, TRootParams> {
  @get
  //@pageable
  @doc("Lists information about all {name}s in the given root scope", TResource)
  @autoRoute
  @list(TResource)
  @segmentOf(TResource)
  @armResourceList(TResource)
  ListByRootScope(
    ...RootScopeParentScope<TResource, TRootParams>,
  ): ArmResponse<ResourceListResult<TResource>> | ErrorResponse;
}

interface RootScopeResourceOperations<TResource extends ArmResource, TProperties extends object, TRootParams>
  extends ResourceRead<
      TResource,
      RootScopeResourceInstanceParameters<TResource, TRootParams>
    >,
    ResourceCreate<
      TResource,
      RootScopeResourceInstanceParameters<TResource, TRootParams>
    >,
    ResourceListByParent<TResource, TRootParams> {}

// ResourceOperationWithSyncDelete, ResourceOperationWithAsyncDelete intersfaces will be moved into RootScopeResourceOperations when we have async delete support for all link resources.
interface ResourceOperationWithSyncDelete<TResource extends ArmResource, TProperties extends object, TRootParams>
  extends RootScopeResourceOperations<
  TResource, TProperties, TRootParams
  >,
  ResourceDelete<
      TResource,
      RootScopeResourceInstanceParameters<TResource, TRootParams>
    >{}

interface ResourceOperationWithAsyncDelete<TResource extends ArmResource, TProperties extends object, TRootParams>
  extends RootScopeResourceOperations<
  TResource, TProperties, TRootParams
  >,
  ResourceDeleteAsync<
      TResource,
      RootScopeResourceInstanceParameters<TResource, TRootParams>
    >{}
