package aci

import (
	"context"

	v1 "github.com/radius-project/radius/pkg/armrpc/api/v1"
	"github.com/radius-project/radius/pkg/corerp/datamodel"
	"github.com/radius-project/radius/pkg/corerp/renderers"
	"github.com/radius-project/radius/pkg/resourcemodel"
	rpv1 "github.com/radius-project/radius/pkg/rp/v1"
	"github.com/radius-project/radius/pkg/to"
	"github.com/radius-project/radius/pkg/ucp/resources"

	cs2client "github.com/radius-project/azure-cs2/client/v20230515preview"
)

const (
	// hard-coded for PoC.
	aciLocation = "West US 3"
)

type Renderer struct {
}

func (r Renderer) GetDependencyIDs(ctx context.Context, dm v1.DataModelInterface) (radiusResourceIDs []resources.ID, azureResourceIDs []resources.ID, err error) {
	return nil, nil, nil
}

func (r Renderer) Render(ctx context.Context, dm v1.DataModelInterface, options renderers.RenderOptions) (renderers.RendererOutput, error) {
	resource, ok := dm.(*datamodel.ContainerResource)
	if !ok {
		return renderers.RendererOutput{}, v1.ErrInvalidModelConversion
	}

	properties := resource.Properties

	CPU := float64(1)
	MemoryInGB := float64(2)

	env := []*cs2client.EnvironmentVariable{}

	for name, val := range properties.Container.Env {
		env = append(env, &cs2client.EnvironmentVariable{
			Name:  to.Ptr(name),
			Value: to.Ptr(val),
		})
	}

	profile := &cs2client.ContainerGroupProfile{
		Location: to.Ptr(aciLocation),
		Name:     to.Ptr(resource.Name),
		Properties: &cs2client.ContainerGroupProfilePropertiesProperties{
			Containers: []*cs2client.Container{
				{
					Name: to.Ptr(resource.Name),
					Properties: &cs2client.ContainerProperties{
						Image:                to.Ptr(resource.Properties.Container.Image),
						EnvironmentVariables: env,
						Command:              to.SliceOfPtrs[string](properties.Container.Command...),
						/*
							Ports: []*cs2client.ContainerPort{
								{
									Port:     to.Ptr(port),
									Protocol: to.Ptr(cs2client.ContainerNetworkProtocolTCP),
								},
							},*/
						Resources: &cs2client.ResourceRequirements{
							Requests: &cs2client.ResourceRequests{
								CPU:        to.Ptr(CPU),
								MemoryInGB: to.Ptr(MemoryInGB),
							},
						},
					},
				},
			},
			/*IPAddress: &cs2client.IPAddress{
				Ports: []*cs2client.Port{
					{
						Protocol: to.Ptr(cs2client.ContainerGroupNetworkProtocolTCP),
						Port:     to.Ptr(port),
					},
				},
				Type: to.Ptr(cs2client.ContainerGroupIPAddressTypePublic),
			},*/
			OSType: to.Ptr(cs2client.OperatingSystemTypesLinux),
			SKU:    to.Ptr(cs2client.ContainerGroupSKUStandard),
		},
	}

	orProfile := rpv1.OutputResource{
		LocalID: rpv1.LocalIDAzureCGProfile,
		ID:      resources.MustParse(options.Environment.Compute.ACICompute.ResourceGroup + "/providers/Microsoft.ContainerInstance/containerGroupProfiles/" + resource.Name),
		CreateResource: &rpv1.Resource{
			ResourceType: resourcemodel.ResourceType{
				Type:     "Microsoft.ContainerInstance/containerGroupProfiles",
				Provider: resourcemodel.ProviderAzure,
			},
			Data: profile,
		},
	}

	desiredCount := int32(1)

	ssName := resource.Name + "-css"

	scaleSet := &cs2client.ContainerScaleSet{
		Name:     to.Ptr(ssName),
		Location: to.Ptr(aciLocation),
		Properties: &cs2client.ContainerScaleSetProperties{
			UpdateProfile: &cs2client.UpdateProfile{
				UpdateMode: to.Ptr(cs2client.UpdateModeRolling),
			},
			ElasticProfile: &cs2client.ElasticProfile{
				DesiredCount: to.Ptr(desiredCount),
				ContainerGroupNamingPolicy: &cs2client.ContainerGroupNamingPolicy{
					GUIDNamingPolicy: &cs2client.GUIDNamingPolicy{
						Prefix: to.Ptr(resource.Name + "-"),
					},
				},
			},
			ContainerGroupProfiles: []*cs2client.ContainerGroupProfileAutoGenerated{
				{
					Resource: &cs2client.APIEntityReference{},
				},
			},
		},
	}

	orScaleSet := rpv1.OutputResource{
		LocalID: rpv1.LocalIDAzureCGScaleSet,
		ID:      resources.MustParse(options.Environment.Compute.ACICompute.ResourceGroup + "/providers/Microsoft.ContainerInstance/containerScaleSets/" + ssName),
		CreateResource: &rpv1.Resource{
			ResourceType: resourcemodel.ResourceType{
				Type:     "Microsoft.ContainerInstance/containerScaleSets",
				Provider: resourcemodel.ProviderAzure,
			},
			Data:         scaleSet,
			Dependencies: []string{rpv1.LocalIDAzureCGProfile},
		},
	}

	return renderers.RendererOutput{
		Resources:      []rpv1.OutputResource{orProfile, orScaleSet},
		RadiusResource: dm,
	}, nil
}
