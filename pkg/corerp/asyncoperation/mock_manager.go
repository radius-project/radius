// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/corerp/asyncoperation (interfaces: AsyncOperationsManager)

// Package asyncoperation is a generated GoMock package.
package asyncoperation

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAsyncOperationsManager is a mock of AsyncOperationsManager interface.
type MockAsyncOperationsManager struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncOperationsManagerMockRecorder
}

// MockAsyncOperationsManagerMockRecorder is the mock recorder for MockAsyncOperationsManager.
type MockAsyncOperationsManagerMockRecorder struct {
	mock *MockAsyncOperationsManager
}

// NewMockAsyncOperationsManager creates a new mock instance.
func NewMockAsyncOperationsManager(ctrl *gomock.Controller) *MockAsyncOperationsManager {
	mock := &MockAsyncOperationsManager{ctrl: ctrl}
	mock.recorder = &MockAsyncOperationsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncOperationsManager) EXPECT() *MockAsyncOperationsManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAsyncOperationsManager) Create(arg0 context.Context, arg1, arg2, arg3 string, arg4 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAsyncOperationsManagerMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAsyncOperationsManager)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *MockAsyncOperationsManager) Delete(arg0 context.Context, arg1 string, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAsyncOperationsManagerMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAsyncOperationsManager)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockAsyncOperationsManager) Get(arg0 context.Context, arg1 string, arg2 uuid.UUID) (*AsyncOperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*AsyncOperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAsyncOperationsManagerMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAsyncOperationsManager)(nil).Get), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockAsyncOperationsManager) Update(arg0 context.Context, arg1 string, arg2 uuid.UUID, arg3 *AsyncOperationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAsyncOperationsManagerMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAsyncOperationsManager)(nil).Update), arg0, arg1, arg2, arg3)
}
