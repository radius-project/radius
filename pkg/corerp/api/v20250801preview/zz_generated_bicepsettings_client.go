// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20250801preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BicepSettingsClient contains the methods for the BicepSettings group.
// Don't use this type directly, use NewBicepSettingsClient() instead.
type BicepSettingsClient struct {
	internal *arm.Client
	rootScope string
}

// NewBicepSettingsClient creates a new instance of BicepSettingsClient with the specified values.
//   - rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
//     and Azure resource scope is
//     /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewBicepSettingsClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*BicepSettingsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &BicepSettingsClient{
		rootScope: rootScope,
	internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a BicepSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - bicepSettingsName - Bicep settings resource name.
//   - resource - Resource create parameters.
//   - options - BicepSettingsClientCreateOrUpdateOptions contains the optional parameters for the BicepSettingsClient.CreateOrUpdate
//     method.
func (client *BicepSettingsClient) CreateOrUpdate(ctx context.Context, bicepSettingsName string, resource BicepSettingsResource, options *BicepSettingsClientCreateOrUpdateOptions) (BicepSettingsClientCreateOrUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "BicepSettingsClient.CreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, bicepSettingsName, resource, options)
	if err != nil {
		return BicepSettingsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BicepSettingsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return BicepSettingsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *BicepSettingsClient) createOrUpdateCreateRequest(ctx context.Context, bicepSettingsName string, resource BicepSettingsResource, _ *BicepSettingsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/bicepSettings/{bicepSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bicepSettingsName == "" {
		return nil, errors.New("parameter bicepSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bicepSettingsName}", url.PathEscape(bicepSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
;	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *BicepSettingsClient) createOrUpdateHandleResponse(resp *http.Response) (BicepSettingsClientCreateOrUpdateResponse, error) {
	result := BicepSettingsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BicepSettingsResource); err != nil {
		return BicepSettingsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a BicepSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - bicepSettingsName - Bicep settings resource name.
//   - options - BicepSettingsClientDeleteOptions contains the optional parameters for the BicepSettingsClient.Delete method.
func (client *BicepSettingsClient) Delete(ctx context.Context, bicepSettingsName string, options *BicepSettingsClientDeleteOptions) (BicepSettingsClientDeleteResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "BicepSettingsClient.Delete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, bicepSettingsName, options)
	if err != nil {
		return BicepSettingsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BicepSettingsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return BicepSettingsClientDeleteResponse{}, err
	}
	return BicepSettingsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *BicepSettingsClient) deleteCreateRequest(ctx context.Context, bicepSettingsName string, _ *BicepSettingsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/bicepSettings/{bicepSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bicepSettingsName == "" {
		return nil, errors.New("parameter bicepSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bicepSettingsName}", url.PathEscape(bicepSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a BicepSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - bicepSettingsName - Bicep settings resource name.
//   - options - BicepSettingsClientGetOptions contains the optional parameters for the BicepSettingsClient.Get method.
func (client *BicepSettingsClient) Get(ctx context.Context, bicepSettingsName string, options *BicepSettingsClientGetOptions) (BicepSettingsClientGetResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "BicepSettingsClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, bicepSettingsName, options)
	if err != nil {
		return BicepSettingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BicepSettingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BicepSettingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *BicepSettingsClient) getCreateRequest(ctx context.Context, bicepSettingsName string, _ *BicepSettingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/bicepSettings/{bicepSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bicepSettingsName == "" {
		return nil, errors.New("parameter bicepSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bicepSettingsName}", url.PathEscape(bicepSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BicepSettingsClient) getHandleResponse(resp *http.Response) (BicepSettingsClientGetResponse, error) {
	result := BicepSettingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BicepSettingsResource); err != nil {
		return BicepSettingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List BicepSettingsResource resources by Scope
//
// Generated from API version 2025-08-01-preview
//   - options - BicepSettingsClientListByScopeOptions contains the optional parameters for the BicepSettingsClient.NewListByScopePager
//     method.
func (client *BicepSettingsClient) NewListByScopePager(options *BicepSettingsClientListByScopeOptions) (*runtime.Pager[BicepSettingsClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[BicepSettingsClientListByScopeResponse]{
		More: func(page BicepSettingsClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *BicepSettingsClientListByScopeResponse) (BicepSettingsClientListByScopeResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByScopeCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return BicepSettingsClientListByScopeResponse{}, err
			}
			return client.listByScopeHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *BicepSettingsClient) listByScopeCreateRequest(ctx context.Context, _ *BicepSettingsClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/bicepSettings"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *BicepSettingsClient) listByScopeHandleResponse(resp *http.Response) (BicepSettingsClientListByScopeResponse, error) {
	result := BicepSettingsClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BicepSettingsResourceListResult); err != nil {
		return BicepSettingsClientListByScopeResponse{}, err
	}
	return result, nil
}

// Update - Update a BicepSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - bicepSettingsName - Bicep settings resource name.
//   - properties - The resource properties to be updated.
//   - options - BicepSettingsClientUpdateOptions contains the optional parameters for the BicepSettingsClient.Update method.
func (client *BicepSettingsClient) Update(ctx context.Context, bicepSettingsName string, properties BicepSettingsResourceUpdate, options *BicepSettingsClientUpdateOptions) (BicepSettingsClientUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "BicepSettingsClient.Update", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, bicepSettingsName, properties, options)
	if err != nil {
		return BicepSettingsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BicepSettingsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BicepSettingsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *BicepSettingsClient) updateCreateRequest(ctx context.Context, bicepSettingsName string, properties BicepSettingsResourceUpdate, _ *BicepSettingsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/bicepSettings/{bicepSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if bicepSettingsName == "" {
		return nil, errors.New("parameter bicepSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{bicepSettingsName}", url.PathEscape(bicepSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *BicepSettingsClient) updateHandleResponse(resp *http.Response) (BicepSettingsClientUpdateResponse, error) {
	result := BicepSettingsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BicepSettingsResource); err != nil {
		return BicepSettingsClientUpdateResponse{}, err
	}
	return result, nil
}

