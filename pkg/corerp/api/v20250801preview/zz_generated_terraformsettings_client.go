// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20250801preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// TerraformSettingsClient contains the methods for the TerraformSettings group.
// Don't use this type directly, use NewTerraformSettingsClient() instead.
type TerraformSettingsClient struct {
	internal *arm.Client
	rootScope string
}

// NewTerraformSettingsClient creates a new instance of TerraformSettingsClient with the specified values.
//   - rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
//     and Azure resource scope is
//     /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewTerraformSettingsClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*TerraformSettingsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &TerraformSettingsClient{
		rootScope: rootScope,
	internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a TerraformSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - terraformSettingsName - Terraform settings resource name.
//   - resource - Resource create parameters.
//   - options - TerraformSettingsClientCreateOrUpdateOptions contains the optional parameters for the TerraformSettingsClient.CreateOrUpdate
//     method.
func (client *TerraformSettingsClient) CreateOrUpdate(ctx context.Context, terraformSettingsName string, resource TerraformSettingsResource, options *TerraformSettingsClientCreateOrUpdateOptions) (TerraformSettingsClientCreateOrUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "TerraformSettingsClient.CreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, terraformSettingsName, resource, options)
	if err != nil {
		return TerraformSettingsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TerraformSettingsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return TerraformSettingsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *TerraformSettingsClient) createOrUpdateCreateRequest(ctx context.Context, terraformSettingsName string, resource TerraformSettingsResource, _ *TerraformSettingsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/terraformSettings/{terraformSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if terraformSettingsName == "" {
		return nil, errors.New("parameter terraformSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{terraformSettingsName}", url.PathEscape(terraformSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
;	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *TerraformSettingsClient) createOrUpdateHandleResponse(resp *http.Response) (TerraformSettingsClientCreateOrUpdateResponse, error) {
	result := TerraformSettingsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TerraformSettingsResource); err != nil {
		return TerraformSettingsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a TerraformSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - terraformSettingsName - Terraform settings resource name.
//   - options - TerraformSettingsClientDeleteOptions contains the optional parameters for the TerraformSettingsClient.Delete
//     method.
func (client *TerraformSettingsClient) Delete(ctx context.Context, terraformSettingsName string, options *TerraformSettingsClientDeleteOptions) (TerraformSettingsClientDeleteResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "TerraformSettingsClient.Delete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, terraformSettingsName, options)
	if err != nil {
		return TerraformSettingsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TerraformSettingsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return TerraformSettingsClientDeleteResponse{}, err
	}
	return TerraformSettingsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *TerraformSettingsClient) deleteCreateRequest(ctx context.Context, terraformSettingsName string, _ *TerraformSettingsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/terraformSettings/{terraformSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if terraformSettingsName == "" {
		return nil, errors.New("parameter terraformSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{terraformSettingsName}", url.PathEscape(terraformSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a TerraformSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - terraformSettingsName - Terraform settings resource name.
//   - options - TerraformSettingsClientGetOptions contains the optional parameters for the TerraformSettingsClient.Get method.
func (client *TerraformSettingsClient) Get(ctx context.Context, terraformSettingsName string, options *TerraformSettingsClientGetOptions) (TerraformSettingsClientGetResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "TerraformSettingsClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, terraformSettingsName, options)
	if err != nil {
		return TerraformSettingsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TerraformSettingsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TerraformSettingsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *TerraformSettingsClient) getCreateRequest(ctx context.Context, terraformSettingsName string, _ *TerraformSettingsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/terraformSettings/{terraformSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if terraformSettingsName == "" {
		return nil, errors.New("parameter terraformSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{terraformSettingsName}", url.PathEscape(terraformSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TerraformSettingsClient) getHandleResponse(resp *http.Response) (TerraformSettingsClientGetResponse, error) {
	result := TerraformSettingsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TerraformSettingsResource); err != nil {
		return TerraformSettingsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List TerraformSettingsResource resources by Scope
//
// Generated from API version 2025-08-01-preview
//   - options - TerraformSettingsClientListByScopeOptions contains the optional parameters for the TerraformSettingsClient.NewListByScopePager
//     method.
func (client *TerraformSettingsClient) NewListByScopePager(options *TerraformSettingsClientListByScopeOptions) (*runtime.Pager[TerraformSettingsClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[TerraformSettingsClientListByScopeResponse]{
		More: func(page TerraformSettingsClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *TerraformSettingsClientListByScopeResponse) (TerraformSettingsClientListByScopeResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByScopeCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return TerraformSettingsClientListByScopeResponse{}, err
			}
			return client.listByScopeHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *TerraformSettingsClient) listByScopeCreateRequest(ctx context.Context, _ *TerraformSettingsClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/terraformSettings"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *TerraformSettingsClient) listByScopeHandleResponse(resp *http.Response) (TerraformSettingsClientListByScopeResponse, error) {
	result := TerraformSettingsClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TerraformSettingsResourceListResult); err != nil {
		return TerraformSettingsClientListByScopeResponse{}, err
	}
	return result, nil
}

// Update - Update a TerraformSettingsResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - terraformSettingsName - Terraform settings resource name.
//   - properties - The resource properties to be updated.
//   - options - TerraformSettingsClientUpdateOptions contains the optional parameters for the TerraformSettingsClient.Update
//     method.
func (client *TerraformSettingsClient) Update(ctx context.Context, terraformSettingsName string, properties TerraformSettingsResourceUpdate, options *TerraformSettingsClientUpdateOptions) (TerraformSettingsClientUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "TerraformSettingsClient.Update", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, terraformSettingsName, properties, options)
	if err != nil {
		return TerraformSettingsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return TerraformSettingsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return TerraformSettingsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *TerraformSettingsClient) updateCreateRequest(ctx context.Context, terraformSettingsName string, properties TerraformSettingsResourceUpdate, _ *TerraformSettingsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/terraformSettings/{terraformSettingsName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if terraformSettingsName == "" {
		return nil, errors.New("parameter terraformSettingsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{terraformSettingsName}", url.PathEscape(terraformSettingsName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *TerraformSettingsClient) updateHandleResponse(resp *http.Response) (TerraformSettingsClientUpdateResponse, error) {
	result := TerraformSettingsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TerraformSettingsResource); err != nil {
		return TerraformSettingsClientUpdateResponse{}, err
	}
	return result, nil
}

