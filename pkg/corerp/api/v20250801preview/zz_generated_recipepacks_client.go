// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20250801preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RecipePacksClient contains the methods for the RecipePacks group.
// Don't use this type directly, use NewRecipePacksClient() instead.
type RecipePacksClient struct {
	internal *arm.Client
	rootScope string
}

// NewRecipePacksClient creates a new instance of RecipePacksClient with the specified values.
//   - rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
//     and Azure resource scope is
//     /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewRecipePacksClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*RecipePacksClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &RecipePacksClient{
		rootScope: rootScope,
	internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a RecipePackResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - recipePackName - Recipe pack name
//   - resource - Resource create parameters.
//   - options - RecipePacksClientCreateOrUpdateOptions contains the optional parameters for the RecipePacksClient.CreateOrUpdate
//     method.
func (client *RecipePacksClient) CreateOrUpdate(ctx context.Context, recipePackName string, resource RecipePackResource, options *RecipePacksClientCreateOrUpdateOptions) (RecipePacksClientCreateOrUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "RecipePacksClient.CreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, recipePackName, resource, options)
	if err != nil {
		return RecipePacksClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RecipePacksClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return RecipePacksClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RecipePacksClient) createOrUpdateCreateRequest(ctx context.Context, recipePackName string, resource RecipePackResource, _ *RecipePacksClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/recipePacks/{recipePackName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if recipePackName == "" {
		return nil, errors.New("parameter recipePackName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recipePackName}", url.PathEscape(recipePackName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
;	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *RecipePacksClient) createOrUpdateHandleResponse(resp *http.Response) (RecipePacksClientCreateOrUpdateResponse, error) {
	result := RecipePacksClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecipePackResource); err != nil {
		return RecipePacksClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a RecipePackResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - recipePackName - Recipe pack name
//   - options - RecipePacksClientDeleteOptions contains the optional parameters for the RecipePacksClient.Delete method.
func (client *RecipePacksClient) Delete(ctx context.Context, recipePackName string, options *RecipePacksClientDeleteOptions) (RecipePacksClientDeleteResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "RecipePacksClient.Delete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, recipePackName, options)
	if err != nil {
		return RecipePacksClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RecipePacksClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return RecipePacksClientDeleteResponse{}, err
	}
	return RecipePacksClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *RecipePacksClient) deleteCreateRequest(ctx context.Context, recipePackName string, _ *RecipePacksClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/recipePacks/{recipePackName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if recipePackName == "" {
		return nil, errors.New("parameter recipePackName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recipePackName}", url.PathEscape(recipePackName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a RecipePackResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - recipePackName - Recipe pack name
//   - options - RecipePacksClientGetOptions contains the optional parameters for the RecipePacksClient.Get method.
func (client *RecipePacksClient) Get(ctx context.Context, recipePackName string, options *RecipePacksClientGetOptions) (RecipePacksClientGetResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "RecipePacksClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, recipePackName, options)
	if err != nil {
		return RecipePacksClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RecipePacksClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RecipePacksClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *RecipePacksClient) getCreateRequest(ctx context.Context, recipePackName string, _ *RecipePacksClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/recipePacks/{recipePackName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if recipePackName == "" {
		return nil, errors.New("parameter recipePackName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recipePackName}", url.PathEscape(recipePackName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RecipePacksClient) getHandleResponse(resp *http.Response) (RecipePacksClientGetResponse, error) {
	result := RecipePacksClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecipePackResource); err != nil {
		return RecipePacksClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List RecipePackResource resources by Scope
//
// Generated from API version 2025-08-01-preview
//   - options - RecipePacksClientListByScopeOptions contains the optional parameters for the RecipePacksClient.NewListByScopePager
//     method.
func (client *RecipePacksClient) NewListByScopePager(options *RecipePacksClientListByScopeOptions) (*runtime.Pager[RecipePacksClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[RecipePacksClientListByScopeResponse]{
		More: func(page RecipePacksClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RecipePacksClientListByScopeResponse) (RecipePacksClientListByScopeResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByScopeCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return RecipePacksClientListByScopeResponse{}, err
			}
			return client.listByScopeHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *RecipePacksClient) listByScopeCreateRequest(ctx context.Context, _ *RecipePacksClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/recipePacks"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *RecipePacksClient) listByScopeHandleResponse(resp *http.Response) (RecipePacksClientListByScopeResponse, error) {
	result := RecipePacksClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecipePackResourceListResult); err != nil {
		return RecipePacksClientListByScopeResponse{}, err
	}
	return result, nil
}

// Update - Update a RecipePackResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01-preview
//   - recipePackName - Recipe pack name
//   - properties - The resource properties to be updated.
//   - options - RecipePacksClientUpdateOptions contains the optional parameters for the RecipePacksClient.Update method.
func (client *RecipePacksClient) Update(ctx context.Context, recipePackName string, properties RecipePackResourceUpdate, options *RecipePacksClientUpdateOptions) (RecipePacksClientUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "RecipePacksClient.Update", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, recipePackName, properties, options)
	if err != nil {
		return RecipePacksClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RecipePacksClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RecipePacksClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *RecipePacksClient) updateCreateRequest(ctx context.Context, recipePackName string, properties RecipePackResourceUpdate, _ *RecipePacksClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Radius.Core/recipePacks/{recipePackName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if recipePackName == "" {
		return nil, errors.New("parameter recipePackName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recipePackName}", url.PathEscape(recipePackName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
	return nil, err
}
;	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *RecipePacksClient) updateHandleResponse(resp *http.Response) (RecipePacksClientUpdateResponse, error) {
	result := RecipePacksClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecipePackResource); err != nil {
		return RecipePacksClientUpdateResponse{}, err
	}
	return result, nil
}

