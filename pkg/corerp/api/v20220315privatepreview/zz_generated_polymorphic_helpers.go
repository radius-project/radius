//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import "encoding/json"

func unmarshalEnvironmentComputeClassification(rawMsg json.RawMessage) (EnvironmentComputeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EnvironmentComputeClassification
	switch m["kind"] {
	case "kubernetes":
		b = &KubernetesCompute{}
	default:
		b = &EnvironmentCompute{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEnvironmentComputeClassificationArray(rawMsg json.RawMessage) ([]EnvironmentComputeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EnvironmentComputeClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEnvironmentComputeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEnvironmentComputeClassificationMap(rawMsg json.RawMessage) (map[string]EnvironmentComputeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]EnvironmentComputeClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalEnvironmentComputeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalExtensionClassification(rawMsg json.RawMessage) (ExtensionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ExtensionClassification
	switch m["kind"] {
	case "daprSidecar":
		b = &DaprSidecarExtension{}
	case "manualScaling":
		b = &ManualScalingExtension{}
	default:
		b = &Extension{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalExtensionClassificationArray(rawMsg json.RawMessage) ([]ExtensionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ExtensionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalExtensionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalExtensionClassificationMap(rawMsg json.RawMessage) (map[string]ExtensionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]ExtensionClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalExtensionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalHealthProbePropertiesClassification(rawMsg json.RawMessage) (HealthProbePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b HealthProbePropertiesClassification
	switch m["kind"] {
	case "exec":
		b = &ExecHealthProbeProperties{}
	case "httpGet":
		b = &HTTPGetHealthProbeProperties{}
	case "tcp":
		b = &TCPHealthProbeProperties{}
	default:
		b = &HealthProbeProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalHealthProbePropertiesClassificationArray(rawMsg json.RawMessage) ([]HealthProbePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]HealthProbePropertiesClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalHealthProbePropertiesClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalHealthProbePropertiesClassificationMap(rawMsg json.RawMessage) (map[string]HealthProbePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]HealthProbePropertiesClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalHealthProbePropertiesClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalVolumeClassification(rawMsg json.RawMessage) (VolumeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b VolumeClassification
	switch m["kind"] {
	case "ephemeral":
		b = &EphemeralVolume{}
	case "persistent":
		b = &PersistentVolume{}
	default:
		b = &Volume{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalVolumeClassificationArray(rawMsg json.RawMessage) ([]VolumeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]VolumeClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalVolumeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalVolumeClassificationMap(rawMsg json.RawMessage) (map[string]VolumeClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]VolumeClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalVolumeClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

