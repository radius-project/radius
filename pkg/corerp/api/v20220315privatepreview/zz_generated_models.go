//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import "time"

type ApplicationExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string
}

// GetApplicationExtension implements the ApplicationExtensionClassification interface for type ApplicationExtension.
func (a *ApplicationExtension) GetApplicationExtension() *ApplicationExtension { return a }

// GetExtension implements the ExtensionClassification interface for type ApplicationExtension.
func (a *ApplicationExtension) GetExtension() *Extension {
	return &Extension{
		Kind: a.Kind,
	}
}

// ApplicationKubernetesMetadataExtension - Specifies the metadata that should be applied to Kubernetes resources created
// by all Containers in this Application.
type ApplicationKubernetesMetadataExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// Annotations to be applied to the Kubernetes resources output by the resource
	Annotations map[string]*string

	// Labels to be applied to the Kubernetes resources output by the resource
	Labels map[string]*string
}

// GetApplicationExtension implements the ApplicationExtensionClassification interface for type ApplicationKubernetesMetadataExtension.
func (a *ApplicationKubernetesMetadataExtension) GetApplicationExtension() *ApplicationExtension {
	return &ApplicationExtension{
		Kind: a.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type ApplicationKubernetesMetadataExtension.
func (a *ApplicationKubernetesMetadataExtension) GetExtension() *Extension {
	return &Extension{
		Kind: a.Kind,
	}
}

// ApplicationKubernetesNamespaceExtension - Specifies application-scoped namespace.
type ApplicationKubernetesNamespaceExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// REQUIRED; The Kubernetes namespace to use for this application.
	Namespace *string
}

// GetApplicationExtension implements the ApplicationExtensionClassification interface for type ApplicationKubernetesNamespaceExtension.
func (a *ApplicationKubernetesNamespaceExtension) GetApplicationExtension() *ApplicationExtension {
	return &ApplicationExtension{
		Kind: a.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type ApplicationKubernetesNamespaceExtension.
func (a *ApplicationKubernetesNamespaceExtension) GetExtension() *Extension {
	return &Extension{
		Kind: a.Kind,
	}
}

// ApplicationProperties - Application properties
type ApplicationProperties struct {
	// REQUIRED; The resource id of the environment linked to application.
	Environment *string

	// Extensions spec of the resource
	Extensions []ApplicationExtensionClassification

	// READ-ONLY; Provisioning state of the application at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// ApplicationResource - Radius Application.
type ApplicationResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Application properties
	Properties *ApplicationProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ApplicationResourceList - The list of applications.
type ApplicationResourceList struct {
	// The link used to get the next page of applications list.
	NextLink *string

	// The list of applications.
	Value []*ApplicationResource
}

type AzureKeyVaultVolumeProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// REQUIRED; The volume kind
	Kind *string

	// REQUIRED; The ID of the keyvault to use for this volume resource
	Resource *string

	// The KeyVault certificates that this volume exposes
	Certificates map[string]*CertificateObjectProperties

	// The resource id of the environment linked to the resource
	Environment *string

	// The KeyVault keys that this volume exposes
	Keys map[string]*KeyObjectProperties

	// The KeyVault secrets that this volume exposes
	Secrets map[string]*SecretObjectProperties

	// READ-ONLY; Provisioning state of the Volume at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// GetVolumeProperties implements the VolumePropertiesClassification interface for type AzureKeyVaultVolumeProperties.
func (a *AzureKeyVaultVolumeProperties) GetVolumeProperties() *VolumeProperties {
	return &VolumeProperties{
		Application: a.Application,
		Environment: a.Environment,
		Kind: a.Kind,
		ProvisioningState: a.ProvisioningState,
		Status: a.Status,
	}
}

// BasicResourceProperties - Basic properties of a Radius resource.
type BasicResourceProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// The resource id of the environment linked to the resource
	Environment *string

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// BicepRecipeProperties - Properties of a Recipe linked to an Environment.
type BicepRecipeProperties struct {
	// REQUIRED; Format of the template provided by the recipe. Allowed values: bicep, terraform.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any
}

// GetEnvironmentRecipeProperties implements the EnvironmentRecipePropertiesClassification interface for type BicepRecipeProperties.
func (b *BicepRecipeProperties) GetEnvironmentRecipeProperties() *EnvironmentRecipeProperties {
	return &EnvironmentRecipeProperties{
		Parameters: b.Parameters,
		TemplateKind: b.TemplateKind,
		TemplatePath: b.TemplatePath,
	}
}

type CertificateObjectProperties struct {
	// REQUIRED; The name of the certificate
	Name *string

	// File name when written to disk.
	Alias *string

	// Certificate object type to be downloaded - the certificate itself, private key or public key of the certificate
	CertType *CertType

	// Encoding format. Default utf-8
	Encoding *Encoding

	// Certificate format. Default pem
	Format *Format

	// Certificate version
	Version *string
}

type ConnectionProperties struct {
	// REQUIRED; The source of the connection
	Source *string
	DisableDefaultEnvVars *bool

	// The properties of IAM
	Iam *IamProperties
}

// Container - Definition of a container.
type Container struct {
	// REQUIRED; The registry and image to download and run in your container
	Image *string

	// Arguments to the entrypoint. Overrides the container image's CMD
	Args []*string

	// Entrypoint array. Overrides the container image's ENTRYPOINT
	Command []*string

	// Dictionary of
	Env map[string]*string

	// Properties for readiness/liveness probe
	LivenessProbe HealthProbePropertiesClassification

	// Dictionary of
	Ports map[string]*ContainerPort

	// Properties for readiness/liveness probe
	ReadinessProbe HealthProbePropertiesClassification

	// Dictionary of
	Volumes map[string]VolumeClassification

	// Working directory for the container
	WorkingDir *string
}

type ContainerExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string
}

// GetContainerExtension implements the ContainerExtensionClassification interface for type ContainerExtension.
func (c *ContainerExtension) GetContainerExtension() *ContainerExtension { return c }

// GetExtension implements the ExtensionClassification interface for type ContainerExtension.
func (c *ContainerExtension) GetExtension() *Extension {
	return &Extension{
		Kind: c.Kind,
	}
}

// ContainerKubernetesMetadataExtension - Specifies the metadata that should be applied to Kubernetes resources created for
// the Container resource
type ContainerKubernetesMetadataExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// Annotations to be applied to the Kubernetes resources output by the resource
	Annotations map[string]*string

	// Labels to be applied to the Kubernetes resources output by the resource
	Labels map[string]*string
}

// GetContainerExtension implements the ContainerExtensionClassification interface for type ContainerKubernetesMetadataExtension.
func (c *ContainerKubernetesMetadataExtension) GetContainerExtension() *ContainerExtension {
	return &ContainerExtension{
		Kind: c.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type ContainerKubernetesMetadataExtension.
func (c *ContainerKubernetesMetadataExtension) GetExtension() *Extension {
	return &Extension{
		Kind: c.Kind,
	}
}

// ContainerPort - Specifies a listening port for the container
type ContainerPort struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// Specifies the port that will be exposed by this container. Must be set when value different from containerPort is desired.
	Port *int32

	// Protocol in use by the port
	Protocol *Protocol

	// Specifies a route provided by this port
	Provides *string

	// Specifies the URL scheme of the communication protocol. Consumers can use the scheme to construct a URL. The value defaults
// to 'http' or 'https' depending on the port value.
	Scheme *string
}

// ContainerProperties - Container properties
type ContainerProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// REQUIRED; Definition of a container.
	Container *Container

	// Dictionary of
	Connections map[string]*ConnectionProperties

	// The resource id of the environment linked to the resource
	Environment *string

	// Extensions spec of the resource
	Extensions []ContainerExtensionClassification

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// READ-ONLY; Gets the status of the container at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// ContainerResource - Container
type ContainerResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Container properties
	Properties *ContainerProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ContainerResourceList - The list of containers.
type ContainerResourceList struct {
	// The link used to get the next page of containers list.
	NextLink *string

	// The list of containers.
	Value []*ContainerResource
}

// DaprSidecarExtension - Specifies the resource should have a Dapr sidecar injected
type DaprSidecarExtension struct {
	// REQUIRED; The Dapr appId. Specifies the identifier used by Dapr for service invocation.
	AppID *string

	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// The Dapr appPort. Specifies the internal listening port for the application to handle requests from the Dapr sidecar.
	AppPort *int32

	// Specifies the Dapr configuration to use for the resource.
	Config *string

	// Specifies the Dapr app-protocol to use for the resource.
	Protocol *Protocol
}

// GetContainerExtension implements the ContainerExtensionClassification interface for type DaprSidecarExtension.
func (d *DaprSidecarExtension) GetContainerExtension() *ContainerExtension {
	return &ContainerExtension{
		Kind: d.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type DaprSidecarExtension.
func (d *DaprSidecarExtension) GetExtension() *Extension {
	return &Extension{
		Kind: d.Kind,
	}
}

// EnvironmentCompute - Compute resource used by application environment resource.
type EnvironmentCompute struct {
	// REQUIRED; Type of compute resource.
	Kind *string

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type EnvironmentCompute.
func (e *EnvironmentCompute) GetEnvironmentCompute() *EnvironmentCompute { return e }

type EnvironmentExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string
}

// GetEnvironmentExtension implements the EnvironmentExtensionClassification interface for type EnvironmentExtension.
func (e *EnvironmentExtension) GetEnvironmentExtension() *EnvironmentExtension { return e }

// GetExtension implements the ExtensionClassification interface for type EnvironmentExtension.
func (e *EnvironmentExtension) GetExtension() *Extension {
	return &Extension{
		Kind: e.Kind,
	}
}

// EnvironmentKubernetesMetadataExtension - Specifies the metadata that should be applied to Kubernetes resources created
// by all Containers in this Environment.
type EnvironmentKubernetesMetadataExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// Annotations to be applied to the Kubernetes resources output by the resource
	Annotations map[string]*string

	// Labels to be applied to the Kubernetes resources output by the resource
	Labels map[string]*string
}

// GetEnvironmentExtension implements the EnvironmentExtensionClassification interface for type EnvironmentKubernetesMetadataExtension.
func (e *EnvironmentKubernetesMetadataExtension) GetEnvironmentExtension() *EnvironmentExtension {
	return &EnvironmentExtension{
		Kind: e.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type EnvironmentKubernetesMetadataExtension.
func (e *EnvironmentKubernetesMetadataExtension) GetExtension() *Extension {
	return &Extension{
		Kind: e.Kind,
	}
}

// EnvironmentProperties - Application environment properties
type EnvironmentProperties struct {
	// REQUIRED; Compute resource used by application environment resource.
	Compute EnvironmentComputeClassification

	// Extensions spec of the resource
	Extensions []EnvironmentExtensionClassification

	// Cloud providers configuration for the environment.
	Providers *Providers

	// Specifies Recipes linked to the Environment.
	Recipes map[string]map[string]EnvironmentRecipePropertiesClassification

	// READ-ONLY; Provisioning state of the environment at the time the operation was called.
	ProvisioningState *ProvisioningState
}

// EnvironmentRecipeProperties - Properties of a Recipe linked to an Environment.
type EnvironmentRecipeProperties struct {
	// REQUIRED; Format of the template provided by the recipe. Allowed values: bicep, terraform.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any
}

// GetEnvironmentRecipeProperties implements the EnvironmentRecipePropertiesClassification interface for type EnvironmentRecipeProperties.
func (e *EnvironmentRecipeProperties) GetEnvironmentRecipeProperties() *EnvironmentRecipeProperties { return e }

// EnvironmentResource - Application environment.
type EnvironmentResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Application environment properties
	Properties *EnvironmentProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EnvironmentResourceList - The list of environments.
type EnvironmentResourceList struct {
	// The link used to get the next page of environments list.
	NextLink *string

	// The list of environments.
	Value []*EnvironmentResource
}

// EphemeralVolume - Specifies an ephemeral volume for a container
type EphemeralVolume struct {
	// REQUIRED; The Volume kind
	Kind *string

	// REQUIRED; Backing store for the ephemeral volume
	ManagedStore *ManagedStore

	// The path where the volume is mounted
	MountPath *string
}

// GetVolume implements the VolumeClassification interface for type EphemeralVolume.
func (e *EphemeralVolume) GetVolume() *Volume {
	return &Volume{
		Kind: e.Kind,
		MountPath: e.MountPath,
	}
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// ExecHealthProbeProperties - Specifies the properties for readiness/liveness probe using an executable
type ExecHealthProbeProperties struct {
	// REQUIRED; Command to execute to probe readiness/liveness
	Command *string

	// REQUIRED; The HealthProbeProperties kind
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type ExecHealthProbeProperties.
func (e *ExecHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: e.FailureThreshold,
		InitialDelaySeconds: e.InitialDelaySeconds,
		Kind: e.Kind,
		PeriodSeconds: e.PeriodSeconds,
		TimeoutSeconds: e.TimeoutSeconds,
	}
}

// ExtenderList - Object that includes an array of Extender and a possible portable resource for next set.
type ExtenderList struct {
	// The link used to fetch the next page of Extender list.
	NextLink *string

	// List of Extender portable resources.
	Value []*ExtenderResource
}

// ExtenderProperties - Extender portable resource properties.
type ExtenderProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The resource id of the environment linked to the resource
	Environment *string

	// The recipe used to automatically deploy underlying infrastructure for the Extender portable resource.
	Recipe *ResourceRecipe

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning

	// The secret values for the given Extender portable resource.
	Secrets map[string]any

	// READ-ONLY; Provisioning state of the Extender portable resource at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// ExtenderResource - Extender portable resource.
type ExtenderResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Extender portable resource properties.
	Properties *ExtenderProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Extension of a resource.
type Extension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string
}

// GetExtension implements the ExtensionClassification interface for type Extension.
func (e *Extension) GetExtension() *Extension { return e }

// GatewayProperties - Gateway properties
type GatewayProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// REQUIRED; Routes attached to this Gateway
	Routes []*GatewayRoute

	// The resource id of the environment linked to the resource
	Environment *string

	// Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.
	Hostname *GatewayPropertiesHostname

	// Sets Gateway to not be exposed externally (no public IP address associated). Defaults to false (exposed to internet).
	Internal *bool

	// TLS configuration for the Gateway.
	TLS *GatewayPropertiesTLS

	// READ-ONLY; Provisioning state of the Gateway at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus

	// READ-ONLY; URL of the gateway resource. Readonly.
	URL *string
}

// GatewayPropertiesHostname - Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one:
// mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.
type GatewayPropertiesHostname struct {
	// Specify a fully-qualified domain name: myapp.mydomain.com. Mutually exclusive with 'prefix' and will take priority if both
// are defined.
	FullyQualifiedHostname *string

	// Specify a prefix for the hostname: myhostname.myapp.PUBLICHOSTNAMEORIP.nip.io. Mutually exclusive with 'fullyQualifiedHostname'
// and will be overridden if both are defined.
	Prefix *string
}

// GatewayPropertiesTLS - TLS configuration for the Gateway.
type GatewayPropertiesTLS struct {
	// Declares which Kubernetes TLS secret will be used.
	CertificateFrom *string

	// TLS minimum protocol version (defaults to 1.2).
	MinimumProtocolVersion *TLSMinVersion

	// If true, gateway lets the https traffic sslPassthrough to the backend servers for decryption.
	SSLPassthrough *bool
}

// GatewayResource - Gateway Resource that specifies how traffic is exposed to the application.
type GatewayResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Gateway properties
	Properties *GatewayProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// GatewayResourceList - The list of Gateways.
type GatewayResourceList struct {
	// The link used to get the next page of Gateways list.
	NextLink *string

	// The list of Gateways.
	Value []*GatewayResource
}

type GatewayRoute struct {
	// The HttpRoute to route to. Ex - myserviceroute.id.
	Destination *string

	// The path to match the incoming request path on. Ex - /myservice.
	Path *string

	// Optionally update the prefix when sending the request to the service. Ex - replacePrefix: '/' and path: '/myservice' will
// transform '/myservice/myroute' to '/myroute'
	ReplacePrefix *string
}

// HTTPGetHealthProbeProperties - Specifies the properties for readiness/liveness probe using HTTP Get
type HTTPGetHealthProbeProperties struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// REQUIRED; The HealthProbeProperties kind
	Kind *string

	// REQUIRED; The route to make the HTTP request on
	Path *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Custom HTTP headers to add to the get request
	Headers map[string]*string

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type HTTPGetHealthProbeProperties.
func (h *HTTPGetHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: h.FailureThreshold,
		InitialDelaySeconds: h.InitialDelaySeconds,
		Kind: h.Kind,
		PeriodSeconds: h.PeriodSeconds,
		TimeoutSeconds: h.TimeoutSeconds,
	}
}

// HTTPRouteProperties - HTTP Route properties
type HTTPRouteProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// The resource id of the environment linked to the resource
	Environment *string

	// The internal hostname accepting traffic for the HTTP Route. Readonly.
	Hostname *string

	// The port number for the HTTP Route. Defaults to 80. Readonly.
	Port *int32

	// The scheme used for traffic. Readonly.
	Scheme *string

	// A stable URL that that can be used to route traffic to a resource. Readonly.
	URL *string

	// READ-ONLY; Provisioning state of the HTTP Route at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// HTTPRouteResource - Radius HTTP Route Resource.
type HTTPRouteResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; HTTP Route properties
	Properties *HTTPRouteProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// HTTPRouteResourceList - The list of HTTP Routes.
type HTTPRouteResourceList struct {
	// The link used to get the next page of HTTP Routes list.
	NextLink *string

	// The list of HTTP Route.
	Value []*HTTPRouteResource
}

// HealthProbeProperties - Properties for readiness/liveness probe
type HealthProbeProperties struct {
	// REQUIRED; The HealthProbeProperties kind
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type HealthProbeProperties.
func (h *HealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties { return h }

// IamProperties - The properties of IAM
type IamProperties struct {
	// REQUIRED; The kind of IAM provider to configure
	Kind *Kind

	// RBAC permissions to be assigned on the source resource
	Roles []*string
}

type IdentitySettings struct {
	// REQUIRED; Configuration for supported external identity providers
	Kind *IdentitySettingKind

	// The URI for your compute platform's OIDC issuer
	OidcIssuer *string

	// The resource ID of the provisioned identity
	Resource *string
}

type KeyObjectProperties struct {
	// REQUIRED; The name of the key
	Name *string

	// File name when written to disk.
	Alias *string

	// Key version
	Version *string
}

// KubernetesCompute - Specifies the properties for Kubernetes compute environment
type KubernetesCompute struct {
	// REQUIRED; Type of compute resource.
	Kind *string

	// REQUIRED; The namespace to use for the environment.
	Namespace *string

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type KubernetesCompute.
func (k *KubernetesCompute) GetEnvironmentCompute() *EnvironmentCompute {
	return &EnvironmentCompute{
		Identity: k.Identity,
		Kind: k.Kind,
		ResourceID: k.ResourceID,
	}
}

// ManualScalingExtension - ManualScaling Extension
type ManualScalingExtension struct {
	// REQUIRED; Specifies the extensions of a resource.
	Kind *string

	// Replica count.
	Replicas *int32
}

// GetContainerExtension implements the ContainerExtensionClassification interface for type ManualScalingExtension.
func (m *ManualScalingExtension) GetContainerExtension() *ContainerExtension {
	return &ContainerExtension{
		Kind: m.Kind,
	}
}

// GetExtension implements the ExtensionClassification interface for type ManualScalingExtension.
func (m *ManualScalingExtension) GetExtension() *Extension {
	return &Extension{
		Kind: m.Kind,
	}
}

// PersistentVolume - Specifies a persistent volume for a container
type PersistentVolume struct {
	// REQUIRED; The Volume kind
	Kind *string

	// REQUIRED; The source of the volume
	Source *string

	// The path where the volume is mounted
	MountPath *string

	// Container read/write access to the volume
	Permission *VolumePermission
}

// GetVolume implements the VolumeClassification interface for type PersistentVolume.
func (p *PersistentVolume) GetVolume() *Volume {
	return &Volume{
		Kind: p.Kind,
		MountPath: p.MountPath,
	}
}

// Providers - Cloud providers configuration
type Providers struct {
	// AWS cloud provider configuration
	Aws *ProvidersAws

	// Azure cloud provider configuration
	Azure *ProvidersAzure
}

// ProvidersAws - AWS cloud provider configuration
type ProvidersAws struct {
	// Target scope for AWS resources to be deployed into. For example: '/planes/aws/aws/accounts/000000000000/regions/us-west-2'
	Scope *string
}

// ProvidersAzure - Azure cloud provider configuration
type ProvidersAzure struct {
	// Target scope for Azure resources to be deployed into. For example: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup'
	Scope *string
}

// Recipe properties.
type Recipe struct {
	// Type of the link this recipe can be consumed by. For example: 'Applications.Link/mongoDatabases'
	LinkType *string

	// Name of the recipe registered to the environment.
	Name *string
}

// RecipeMetadataProperties - Properties of a Recipe linked to an Environment.
type RecipeMetadataProperties struct {
	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Format of the template provided by the recipe. Allowed values: bicep, terraform.
	TemplateKind *string

	// Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Version of the template to deploy. For Terraform recipes using a module registry this is required, but must be omitted
// for other module sources.
	TemplateVersion *string
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ResourceRecipe - The recipe used to automatically deploy underlying infrastructure for a portable resource.
type ResourceRecipe struct {
	// REQUIRED; The name of the recipe within the environment to use.
	Name *string

	// Key/value parameters to pass into the recipe at deployment.
	Parameters map[string]any
}

// ResourceStatus - Status of a resource.
type ResourceStatus struct {
	// Compute resource used by application environment resource.
	Compute EnvironmentComputeClassification
	OutputResources []map[string]any
}

type SecretObjectProperties struct {
	// REQUIRED; The name of the secret
	Name *string

	// File name when written to disk.
	Alias *string

	// Encoding format. Default utf-8
	Encoding *Encoding

	// Secret version
	Version *string
}

// SecretStoreListSecretsResult - The list of secrets
type SecretStoreListSecretsResult struct {
	// An object to represent key-value type secrets
	Data map[string]*SecretValueProperties

	// The type of secret store data
	Type *SecretStoreDataType
}

type SecretStoreProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// REQUIRED; An object to represent key-value type secrets
	Data map[string]*SecretValueProperties

	// The resource id of the environment linked to the resource
	Environment *string

	// The resource id of external secret store.
	Resource *string

	// The type of secret store data
	Type *SecretStoreDataType

	// READ-ONLY; Provisioning state of the SecretStore at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// SecretStoreResource - Radius SecretStore Resource.
type SecretStoreResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *SecretStoreProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SecretStoreResourceList - The list of SecretStores.
type SecretStoreResourceList struct {
	// The link used to get the next page of SecretStores list.
	NextLink *string

	// The list of SecretStore.
	Value []*SecretStoreResource
}

type SecretValueProperties struct {
	// The encoding of value
	Encoding *SecretValueEncoding

	// The value of secret.
	Value *string

	// The referenced secret in properties.resource
	ValueFrom *ValueFromProperties
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TCPHealthProbeProperties - Specifies the properties for readiness/liveness probe using TCP
type TCPHealthProbeProperties struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// REQUIRED; The HealthProbeProperties kind
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type TCPHealthProbeProperties.
func (t *TCPHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: t.FailureThreshold,
		InitialDelaySeconds: t.InitialDelaySeconds,
		Kind: t.Kind,
		PeriodSeconds: t.PeriodSeconds,
		TimeoutSeconds: t.TimeoutSeconds,
	}
}

// TerraformRecipeProperties - Properties of a Recipe linked to an Environment.
type TerraformRecipeProperties struct {
	// REQUIRED; Format of the template provided by the recipe. Allowed values: bicep, terraform.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Version of the template to deploy. For Terraform recipes using a module registry this is required, but must be omitted
// for other module sources.
	TemplateVersion *string
}

// GetEnvironmentRecipeProperties implements the EnvironmentRecipePropertiesClassification interface for type TerraformRecipeProperties.
func (t *TerraformRecipeProperties) GetEnvironmentRecipeProperties() *EnvironmentRecipeProperties {
	return &EnvironmentRecipeProperties{
		Parameters: t.Parameters,
		TemplateKind: t.TemplateKind,
		TemplatePath: t.TemplatePath,
	}
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

type ValueFromProperties struct {
	// REQUIRED; The name of the referenced secret.
	Name *string

	// The version of the referenced secret.
	Version *string
}

// Volume - Specifies a volume for a container
type Volume struct {
	// REQUIRED; The Volume kind
	Kind *string

	// The path where the volume is mounted
	MountPath *string
}

// GetVolume implements the VolumeClassification interface for type Volume.
func (v *Volume) GetVolume() *Volume { return v }

type VolumeProperties struct {
	// REQUIRED; Specifies the resource id of the application
	Application *string

	// REQUIRED; The volume kind
	Kind *string

	// The resource id of the environment linked to the resource
	Environment *string

	// READ-ONLY; Provisioning state of the Volume at the time the operation was called.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of the resource
	Status *ResourceStatus
}

// GetVolumeProperties implements the VolumePropertiesClassification interface for type VolumeProperties.
func (v *VolumeProperties) GetVolumeProperties() *VolumeProperties { return v }

// VolumeResource - Radius Volume Resource.
type VolumeResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED
	Properties VolumePropertiesClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VolumeResourceList - The list of Volumes.
type VolumeResourceList struct {
	// The link used to get the next page of Volumes list.
	NextLink *string

	// The list of Volume.
	Value []*VolumeResource
}

