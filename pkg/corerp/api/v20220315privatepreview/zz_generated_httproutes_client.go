//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HTTPRoutesClient contains the methods for the HTTPRoutes group.
// Don't use this type directly, use NewHTTPRoutesClient() instead.
type HTTPRoutesClient struct {
	ep string
	pl runtime.Pipeline
	rootScope string
}

// NewHTTPRoutesClient creates a new instance of HTTPRoutesClient with the specified values.
func NewHTTPRoutesClient(con *arm.Connection, rootScope string) *HTTPRoutesClient {
	return &HTTPRoutesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), rootScope: rootScope}
}

// CreateOrUpdate - Create or update an HTTP Route.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HTTPRoutesClient) CreateOrUpdate(ctx context.Context, httpRouteName string, httpRouteResource HTTPRouteResource, options *HTTPRoutesCreateOrUpdateOptions) (HTTPRoutesCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, httpRouteName, httpRouteResource, options)
	if err != nil {
		return HTTPRoutesCreateOrUpdateResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return HTTPRoutesCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusNoContent) {
		return HTTPRoutesCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *HTTPRoutesClient) createOrUpdateCreateRequest(ctx context.Context, httpRouteName string, httpRouteResource HTTPRouteResource, options *HTTPRoutesCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/httpRoutes/{httpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if httpRouteName == "" {
		return nil, errors.New("parameter httpRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{httpRouteName}", url.PathEscape(httpRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, httpRouteResource)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *HTTPRoutesClient) createOrUpdateHandleResponse(resp *http.Response) (HTTPRoutesCreateOrUpdateResponse, error) {
	result := HTTPRoutesCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HTTPRouteResource); err != nil {
		return HTTPRoutesCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *HTTPRoutesClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete an HTTP Route.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HTTPRoutesClient) Delete(ctx context.Context, httpRouteName string, options *HTTPRoutesDeleteOptions) (HTTPRoutesDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, httpRouteName, options)
	if err != nil {
		return HTTPRoutesDeleteResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return HTTPRoutesDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return HTTPRoutesDeleteResponse{}, client.deleteHandleError(resp)
	}
	return HTTPRoutesDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HTTPRoutesClient) deleteCreateRequest(ctx context.Context, httpRouteName string, options *HTTPRoutesDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/httpRoutes/{httpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if httpRouteName == "" {
		return nil, errors.New("parameter httpRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{httpRouteName}", url.PathEscape(httpRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *HTTPRoutesClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets the properties of an HTTP Route.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HTTPRoutesClient) Get(ctx context.Context, httpRouteName string, options *HTTPRoutesGetOptions) (HTTPRoutesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, httpRouteName, options)
	if err != nil {
		return HTTPRoutesGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return HTTPRoutesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HTTPRoutesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HTTPRoutesClient) getCreateRequest(ctx context.Context, httpRouteName string, options *HTTPRoutesGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/httpRoutes/{httpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if httpRouteName == "" {
		return nil, errors.New("parameter httpRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{httpRouteName}", url.PathEscape(httpRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HTTPRoutesClient) getHandleResponse(resp *http.Response) (HTTPRoutesGetResponse, error) {
	result := HTTPRoutesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HTTPRouteResource); err != nil {
		return HTTPRoutesGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *HTTPRoutesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByScope - List all HTTP Routes in the given scope.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HTTPRoutesClient) ListByScope(options *HTTPRoutesListByScopeOptions) (*HTTPRoutesListByScopePager) {
	return &HTTPRoutesListByScopePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByScopeCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp HTTPRoutesListByScopeResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.HTTPRouteResourceList.NextLink)
		},
	}
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *HTTPRoutesClient) listByScopeCreateRequest(ctx context.Context, options *HTTPRoutesListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/httpRoutes"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *HTTPRoutesClient) listByScopeHandleResponse(resp *http.Response) (HTTPRoutesListByScopeResponse, error) {
	result := HTTPRoutesListByScopeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HTTPRouteResourceList); err != nil {
		return HTTPRoutesListByScopeResponse{}, err
	}
	return result, nil
}

// listByScopeHandleError handles the ListByScope error response.
func (client *HTTPRoutesClient) listByScopeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Update the properties of an existing HTTP Route.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HTTPRoutesClient) Update(ctx context.Context, httpRouteName string, httpRouteResource HTTPRouteResource, options *HTTPRoutesUpdateOptions) (HTTPRoutesUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, httpRouteName, httpRouteResource, options)
	if err != nil {
		return HTTPRoutesUpdateResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return HTTPRoutesUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusNoContent) {
		return HTTPRoutesUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *HTTPRoutesClient) updateCreateRequest(ctx context.Context, httpRouteName string, httpRouteResource HTTPRouteResource, options *HTTPRoutesUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/httpRoutes/{httpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if httpRouteName == "" {
		return nil, errors.New("parameter httpRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{httpRouteName}", url.PathEscape(httpRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, httpRouteResource)
}

// updateHandleResponse handles the Update response.
func (client *HTTPRoutesClient) updateHandleResponse(resp *http.Response) (HTTPRoutesUpdateResponse, error) {
	result := HTTPRoutesUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HTTPRouteResource); err != nil {
		return HTTPRoutesUpdateResponse{}, err
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *HTTPRoutesClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

