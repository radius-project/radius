//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OperationResultsClient contains the methods for the OperationResults group.
// Don't use this type directly, use NewOperationResultsClient() instead.
type OperationResultsClient struct {
	con *connection
	subscriptionID string
}

// NewOperationResultsClient creates a new instance of OperationResultsClient with the specified values.
func NewOperationResultsClient(con *connection, subscriptionID string) *OperationResultsClient {
	return &OperationResultsClient{con: con, subscriptionID: subscriptionID}
}

// GetByOperationID - Get results of an operation by operation id.
// If the operation fails it returns the *ErrorResponse error type.
func (client *OperationResultsClient) GetByOperationID(ctx context.Context, location string, operationID string, options *OperationResultsGetByOperationIDOptions) (OperationResultsGetByOperationIDResponse, error) {
	req, err := client.getByOperationIDCreateRequest(ctx, location, operationID, options)
	if err != nil {
		return OperationResultsGetByOperationIDResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return OperationResultsGetByOperationIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OperationResultsGetByOperationIDResponse{}, client.getByOperationIDHandleError(resp)
	}
	return OperationResultsGetByOperationIDResponse{RawResponse: resp}, nil
}

// getByOperationIDCreateRequest creates the GetByOperationID request.
func (client *OperationResultsClient) getByOperationIDCreateRequest(ctx context.Context, location string, operationID string, options *OperationResultsGetByOperationIDOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Applications.Core/locations/{location}/operationResults/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByOperationIDHandleError handles the GetByOperationID error response.
func (client *OperationResultsClient) getByOperationIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

