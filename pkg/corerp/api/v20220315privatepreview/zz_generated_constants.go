//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

const (
	module = "v20220315privatepreview"
	version = "v0.0.1"
)

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication CreatedByType = "Application"
	CreatedByTypeKey CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{	
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// EnvironmentComputeKind - Type of compute resource.
type EnvironmentComputeKind string

const (
	EnvironmentComputeKindKubernetes EnvironmentComputeKind = "kubernetes"
)

// PossibleEnvironmentComputeKindValues returns the possible values for the EnvironmentComputeKind const type.
func PossibleEnvironmentComputeKindValues() []EnvironmentComputeKind {
	return []EnvironmentComputeKind{	
		EnvironmentComputeKindKubernetes,
	}
}

// ToPtr returns a *EnvironmentComputeKind pointing to the current value.
func (c EnvironmentComputeKind) ToPtr() *EnvironmentComputeKind {
	return &c
}

// Kind - The kind of IAM provider to configure
type Kind string

const (
	KindAzure Kind = "azure"
)

// PossibleKindValues returns the possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{	
		KindAzure,
	}
}

// ToPtr returns a *Kind pointing to the current value.
func (c Kind) ToPtr() *Kind {
	return &c
}

// ManagedStore - Backing store for the ephemeral volume
type ManagedStore string

const (
	ManagedStoreDisk ManagedStore = "disk"
	ManagedStoreMemory ManagedStore = "memory"
)

// PossibleManagedStoreValues returns the possible values for the ManagedStore const type.
func PossibleManagedStoreValues() []ManagedStore {
	return []ManagedStore{	
		ManagedStoreDisk,
		ManagedStoreMemory,
	}
}

// ToPtr returns a *ManagedStore pointing to the current value.
func (c ManagedStore) ToPtr() *ManagedStore {
	return &c
}

// Protocol - Protocol in use by the port
type Protocol string

const (
	ProtocolGrpc Protocol = "grpc"
	ProtocolHTTP Protocol = "http"
	ProtocolTCP Protocol = "TCP"
	ProtocolUDP Protocol = "UDP"
)

// PossibleProtocolValues returns the possible values for the Protocol const type.
func PossibleProtocolValues() []Protocol {
	return []Protocol{	
		ProtocolGrpc,
		ProtocolHTTP,
		ProtocolTCP,
		ProtocolUDP,
	}
}

// ToPtr returns a *Protocol pointing to the current value.
func (c Protocol) ToPtr() *Protocol {
	return &c
}

// ProvisioningState - Gets the status of the container at the time the operation was called.
type ProvisioningState string

const (
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	ProvisioningStateFailed ProvisioningState = "Failed"
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{	
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// ToPtr returns a *ProvisioningState pointing to the current value.
func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// VolumeRbac - Container read/write access to the volume
type VolumeRbac string

const (
	VolumeRbacRead VolumeRbac = "read"
	VolumeRbacWrite VolumeRbac = "write"
)

// PossibleVolumeRbacValues returns the possible values for the VolumeRbac const type.
func PossibleVolumeRbacValues() []VolumeRbac {
	return []VolumeRbac{	
		VolumeRbacRead,
		VolumeRbacWrite,
	}
}

// ToPtr returns a *VolumeRbac pointing to the current value.
func (c VolumeRbac) ToPtr() *VolumeRbac {
	return &c
}

