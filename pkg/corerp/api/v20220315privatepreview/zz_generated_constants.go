//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

const (
	moduleName = "v20220315privatepreview"
	moduleVersion = "v0.0.1"
)

// CertType - Certificate object type to be downloaded - the certificate itself, private key or public key of the certificate
type CertType string

const (
	CertTypeCertificate CertType = "certificate"
	CertTypePublickey CertType = "publickey"
	CertTypePrivatekey CertType = "privatekey"
)

// PossibleCertTypeValues returns the possible values for the CertType const type.
func PossibleCertTypeValues() []CertType {
	return []CertType{	
		CertTypeCertificate,
		CertTypePublickey,
		CertTypePrivatekey,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication CreatedByType = "Application"
	CreatedByTypeKey CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{	
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// Encoding - Encoding format. Default utf-8
type Encoding string

const (
	EncodingUTF8 Encoding = "utf-8"
	EncodingHex Encoding = "hex"
	EncodingBase64 Encoding = "base64"
)

// PossibleEncodingValues returns the possible values for the Encoding const type.
func PossibleEncodingValues() []Encoding {
	return []Encoding{	
		EncodingUTF8,
		EncodingHex,
		EncodingBase64,
	}
}

// Format - Certificate format. Default pem
type Format string

const (
	FormatPem Format = "pem"
	FormatPfx Format = "pfx"
)

// PossibleFormatValues returns the possible values for the Format const type.
func PossibleFormatValues() []Format {
	return []Format{	
		FormatPem,
		FormatPfx,
	}
}

// IdentitySettingKind - Configuration for supported external identity providers
type IdentitySettingKind string

const (
	IdentitySettingKindUndefined IdentitySettingKind = "undefined"
	IdentitySettingKindAzureComWorkload IdentitySettingKind = "azure.com.workload"
)

// PossibleIdentitySettingKindValues returns the possible values for the IdentitySettingKind const type.
func PossibleIdentitySettingKindValues() []IdentitySettingKind {
	return []IdentitySettingKind{	
		IdentitySettingKindUndefined,
		IdentitySettingKindAzureComWorkload,
	}
}

// Kind - The kind of IAM provider to configure
type Kind string

const (
	KindAzure Kind = "azure"
)

// PossibleKindValues returns the possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{	
		KindAzure,
	}
}

// ManagedStore - Backing store for the ephemeral volume
type ManagedStore string

const (
	ManagedStoreDisk ManagedStore = "disk"
	ManagedStoreMemory ManagedStore = "memory"
)

// PossibleManagedStoreValues returns the possible values for the ManagedStore const type.
func PossibleManagedStoreValues() []ManagedStore {
	return []ManagedStore{	
		ManagedStoreDisk,
		ManagedStoreMemory,
	}
}

// Protocol - Protocol in use by the port
type Protocol string

const (
	ProtocolGrpc Protocol = "grpc"
	ProtocolHTTP Protocol = "http"
	ProtocolTCP Protocol = "TCP"
	ProtocolUDP Protocol = "UDP"
)

// PossibleProtocolValues returns the possible values for the Protocol const type.
func PossibleProtocolValues() []Protocol {
	return []Protocol{	
		ProtocolGrpc,
		ProtocolHTTP,
		ProtocolTCP,
		ProtocolUDP,
	}
}

// ProvisioningState - Provisioning state of the resource at the time the operation was called.
type ProvisioningState string

const (
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	ProvisioningStateFailed ProvisioningState = "Failed"
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{	
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// SecretStoreDataType - The type of secret store data
type SecretStoreDataType string

const (
	SecretStoreDataTypeGeneric SecretStoreDataType = "generic"
	SecretStoreDataTypeCertificate SecretStoreDataType = "certificate"
)

// PossibleSecretStoreDataTypeValues returns the possible values for the SecretStoreDataType const type.
func PossibleSecretStoreDataTypeValues() []SecretStoreDataType {
	return []SecretStoreDataType{	
		SecretStoreDataTypeGeneric,
		SecretStoreDataTypeCertificate,
	}
}

// SecretValueEncoding - The encoding of value
type SecretValueEncoding string

const (
	SecretValueEncodingRaw SecretValueEncoding = "raw"
	SecretValueEncodingBase64 SecretValueEncoding = "base64"
)

// PossibleSecretValueEncodingValues returns the possible values for the SecretValueEncoding const type.
func PossibleSecretValueEncodingValues() []SecretValueEncoding {
	return []SecretValueEncoding{	
		SecretValueEncodingRaw,
		SecretValueEncodingBase64,
	}
}

// TLSMinVersion - TLS minimum protocol version (defaults to 1.2).
type TLSMinVersion string

const (
	TLSMinVersionOne2 TLSMinVersion = "1.2"
	TLSMinVersionOne3 TLSMinVersion = "1.3"
)

// PossibleTLSMinVersionValues returns the possible values for the TLSMinVersion const type.
func PossibleTLSMinVersionValues() []TLSMinVersion {
	return []TLSMinVersion{	
		TLSMinVersionOne2,
		TLSMinVersionOne3,
	}
}

// VolumePermission - Container read/write access to the volume
type VolumePermission string

const (
	VolumePermissionRead VolumePermission = "read"
	VolumePermissionWrite VolumePermission = "write"
)

// PossibleVolumePermissionValues returns the possible values for the VolumePermission const type.
func PossibleVolumePermissionValues() []VolumePermission {
	return []VolumePermission{	
		VolumePermissionRead,
		VolumePermissionWrite,
	}
}

