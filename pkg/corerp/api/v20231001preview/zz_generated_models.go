//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20231001preview

import "time"

// ApplicationGraphConnection - Describes the connection between two resources.
type ApplicationGraphConnection struct {
	// REQUIRED; The direction of the connection. 'Outbound' indicates this connection specifies the ID of the destination and
// 'Inbound' indicates indicates this connection specifies the ID of the source.
	Direction *Direction

	// REQUIRED; The resource ID
	ID *string
}

// ApplicationGraphOutputResource - Describes an output resource that comprises an application graph resource.
type ApplicationGraphOutputResource struct {
	// REQUIRED; The resource ID.
	ID *string

	// REQUIRED; The resource name.
	Name *string

	// REQUIRED; The resource type.
	Type *string
}

// ApplicationGraphResource - Describes a resource in the application graph.
type ApplicationGraphResource struct {
	// REQUIRED; The connections between resources in the application graph.
	Connections []*ApplicationGraphConnection

	// REQUIRED; The resource ID.
	ID *string

	// REQUIRED; The resource name.
	Name *string

	// REQUIRED; The resources that comprise this resource.
	OutputResources []*ApplicationGraphOutputResource

	// REQUIRED; provisioningState of this resource.
	ProvisioningState *string

	// REQUIRED; The resource type.
	Type *string
}

// ApplicationGraphResponse - Describes the application architecture and its dependencies.
type ApplicationGraphResponse struct {
	// REQUIRED; The resources in the application graph.
	Resources []*ApplicationGraphResource
}

// ApplicationProperties - Application properties
type ApplicationProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The application extension.
	Extensions []ExtensionClassification

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// ApplicationResource - Radius Application resource
type ApplicationResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *ApplicationProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ApplicationResourceListResult - The response of a ApplicationResource list operation.
type ApplicationResourceListResult struct {
	// REQUIRED; The ApplicationResource items on this page
	Value []*ApplicationResource

	// The link to the next page of items
	NextLink *string
}

// ApplicationResourceUpdate - The type used for update operations of the ApplicationResource.
type ApplicationResourceUpdate struct {
	// The updatable properties of the ApplicationResource.
	Properties *ApplicationResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// ApplicationResourceUpdateProperties - The updatable properties of the ApplicationResource.
type ApplicationResourceUpdateProperties struct {
	// The compute resource used by application environment.
	Compute EnvironmentComputeUpdateClassification

	// The environment extension.
	Extensions []ExtensionClassification

	// Cloud providers configuration for the environment.
	Providers *ProvidersUpdate

	// Specifies Recipes linked to the Environment.
	Recipes map[string]map[string]RecipePropertiesUpdateClassification

	// Simulated environment.
	Simulated *bool
}

// AzureKeyVaultVolumeProperties - Represents Azure Key Vault Volume properties
type AzureKeyVaultVolumeProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// REQUIRED; Discriminator property for VolumeProperties.
	Kind *string

	// REQUIRED; The ID of the keyvault to use for this volume resource
	Resource *string

	// The KeyVault certificates that this volume exposes
	Certificates map[string]*CertificateObjectProperties

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The KeyVault keys that this volume exposes
	Keys map[string]*KeyObjectProperties

	// The KeyVault secrets that this volume exposes
	Secrets map[string]*SecretObjectProperties

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// GetVolumeProperties implements the VolumePropertiesClassification interface for type AzureKeyVaultVolumeProperties.
func (a *AzureKeyVaultVolumeProperties) GetVolumeProperties() *VolumeProperties {
	return &VolumeProperties{
		Application: a.Application,
		Environment: a.Environment,
		Kind: a.Kind,
		ProvisioningState: a.ProvisioningState,
		Status: a.Status,
	}
}

// BicepRecipeProperties - Represents Bicep recipe properties.
type BicepRecipeProperties struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Connect to the Bicep registry using HTTP (not-HTTPS). This should be used when the registry is known not to support HTTPS,
// for example in a locally-hosted registry. Defaults to false (use HTTPS/TLS).
	PlainHTTP *bool
}

// GetRecipeProperties implements the RecipePropertiesClassification interface for type BicepRecipeProperties.
func (b *BicepRecipeProperties) GetRecipeProperties() *RecipeProperties {
	return &RecipeProperties{
		Parameters: b.Parameters,
		TemplateKind: b.TemplateKind,
		TemplatePath: b.TemplatePath,
	}
}

// BicepRecipePropertiesUpdate - Represents Bicep recipe properties.
type BicepRecipePropertiesUpdate struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Connect to the Bicep registry using HTTP (not-HTTPS). This should be used when the registry is known not to support HTTPS,
// for example in a locally-hosted registry. Defaults to false (use HTTPS/TLS).
	PlainHTTP *bool

	// Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string
}

// GetRecipePropertiesUpdate implements the RecipePropertiesUpdateClassification interface for type BicepRecipePropertiesUpdate.
func (b *BicepRecipePropertiesUpdate) GetRecipePropertiesUpdate() *RecipePropertiesUpdate {
	return &RecipePropertiesUpdate{
		Parameters: b.Parameters,
		TemplateKind: b.TemplateKind,
		TemplatePath: b.TemplatePath,
	}
}

// CertificateObjectProperties - Represents certificate object properties
type CertificateObjectProperties struct {
	// REQUIRED; The name of the certificate
	Name *string

	// File name when written to disk
	Alias *string

	// Certificate object type to be downloaded - the certificate itself, private key or public key of the certificate
	CertType *CertificateTypes

	// Encoding format. Default utf-8
	Encoding *VolumeSecretEncodings

	// Certificate format. Default pem
	Format *CertificateFormats

	// Certificate version
	Version *string
}

// ConnectionProperties - Connection Properties
type ConnectionProperties struct {
	// REQUIRED; The source of the connection
	Source *string

	// default environment variable override
	DisableDefaultEnvVars *bool

	// iam properties
	Iam *IamProperties
}

// ConnectionPropertiesUpdate - Connection Properties
type ConnectionPropertiesUpdate struct {
	// default environment variable override
	DisableDefaultEnvVars *bool

	// iam properties
	Iam *IamPropertiesUpdate

	// The source of the connection
	Source *string
}

// Container - Definition of a container
type Container struct {
	// REQUIRED; The registry and image to download and run in your container
	Image *string

	// Arguments to the entrypoint. Overrides the container image's CMD
	Args []*string

	// Entrypoint array. Overrides the container image's ENTRYPOINT
	Command []*string

	// environment
	Env map[string]*string

	// The pull policy for the container image
	ImagePullPolicy *ImagePullPolicy

	// liveness probe properties
	LivenessProbe HealthProbePropertiesClassification

	// container ports
	Ports map[string]*ContainerPortProperties

	// readiness probe properties
	ReadinessProbe HealthProbePropertiesClassification

	// container volumes
	Volumes map[string]VolumeClassification

	// Working directory for the container
	WorkingDir *string
}

// ContainerPortProperties - Specifies a listening port for the container
type ContainerPortProperties struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// Specifies the port that will be exposed by this container. Must be set when value different from containerPort is desired
	Port *int32

	// Protocol in use by the port
	Protocol *PortProtocol

	// Specifies a route provided by this port
	Provides *string

	// Specifies the URL scheme of the communication protocol. Consumers can use the scheme to construct a URL. The value defaults
// to 'http' or 'https' depending on the port value
	Scheme *string
}

// ContainerPortPropertiesUpdate - Specifies a listening port for the container
type ContainerPortPropertiesUpdate struct {
	// The listening port number
	ContainerPort *int32

	// Specifies the port that will be exposed by this container. Must be set when value different from containerPort is desired
	Port *int32

	// Protocol in use by the port
	Protocol *PortProtocol

	// Specifies a route provided by this port
	Provides *string

	// Specifies the URL scheme of the communication protocol. Consumers can use the scheme to construct a URL. The value defaults
// to 'http' or 'https' depending on the port value
	Scheme *string
}

// ContainerProperties - Container properties
type ContainerProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// REQUIRED; Definition of a container.
	Container *Container

	// Specifies a connection to another resource.
	Connections map[string]*ConnectionProperties

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// Extensions spec of the resource
	Extensions []ExtensionClassification

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// Specifies how the underlying container resource is provisioned and managed.
	ResourceProvisioning *ContainerResourceProvisioning

	// A collection of references to resources associated with the container
	Resources []*ResourceReference

	// The restart policy for the underlying container
	RestartPolicy *RestartPolicy

	// Specifies Runtime-specific functionality
	Runtimes *RuntimesProperties

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// ContainerResource - Concrete tracked resource types can be created by aliasing this type using a specific property type.
type ContainerResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *ContainerProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ContainerResourceListResult - The response of a ContainerResource list operation.
type ContainerResourceListResult struct {
	// REQUIRED; The ContainerResource items on this page
	Value []*ContainerResource

	// The link to the next page of items
	NextLink *string
}

// ContainerResourceUpdate - The type used for update operations of the ContainerResource.
type ContainerResourceUpdate struct {
	// The updatable properties of the ContainerResource.
	Properties *ContainerResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// ContainerResourceUpdateProperties - The updatable properties of the ContainerResource.
type ContainerResourceUpdateProperties struct {
	// Fully qualified resource ID for the application
	Application *string

	// Specifies a connection to another resource.
	Connections map[string]*ConnectionPropertiesUpdate

	// Definition of a container.
	Container *ContainerUpdate

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// Extensions spec of the resource
	Extensions []ExtensionClassification

	// Configuration for supported external identity providers
	Identity *IdentitySettingsUpdate

	// Specifies how the underlying container resource is provisioned and managed.
	ResourceProvisioning *ContainerResourceProvisioning

	// A collection of references to resources associated with the container
	Resources []*ResourceReference

	// The restart policy for the underlying container
	RestartPolicy *RestartPolicy

	// Specifies Runtime-specific functionality
	Runtimes *RuntimesProperties
}

// ContainerUpdate - Definition of a container
type ContainerUpdate struct {
	// Arguments to the entrypoint. Overrides the container image's CMD
	Args []*string

	// Entrypoint array. Overrides the container image's ENTRYPOINT
	Command []*string

	// environment
	Env map[string]*string

	// The registry and image to download and run in your container
	Image *string

	// The pull policy for the container image
	ImagePullPolicy *ImagePullPolicy

	// liveness probe properties
	LivenessProbe HealthProbePropertiesClassification

	// container ports
	Ports map[string]*ContainerPortPropertiesUpdate

	// readiness probe properties
	ReadinessProbe HealthProbePropertiesClassification

	// container volumes
	Volumes map[string]VolumeClassification

	// Working directory for the container
	WorkingDir *string
}

// DaprSidecarExtension - Specifies the resource should have a Dapr sidecar injected
type DaprSidecarExtension struct {
	// REQUIRED; The Dapr appId. Specifies the identifier used by Dapr for service invocation.
	AppID *string

	// REQUIRED; Discriminator property for Extension.
	Kind *string

	// The Dapr appPort. Specifies the internal listening port for the application to handle requests from the Dapr sidecar.
	AppPort *int32

	// Specifies the Dapr configuration to use for the resource.
	Config *string

	// Specifies the Dapr app-protocol to use for the resource.
	Protocol *DaprSidecarExtensionProtocol
}

// GetExtension implements the ExtensionClassification interface for type DaprSidecarExtension.
func (d *DaprSidecarExtension) GetExtension() *Extension {
	return &Extension{
		Kind: d.Kind,
	}
}

// EnvironmentCompute - Represents backing compute resource
type EnvironmentCompute struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type EnvironmentCompute.
func (e *EnvironmentCompute) GetEnvironmentCompute() *EnvironmentCompute { return e }

// EnvironmentComputeUpdate - Represents backing compute resource
type EnvironmentComputeUpdate struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string

	// Configuration for supported external identity providers
	Identity *IdentitySettingsUpdate

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentComputeUpdate implements the EnvironmentComputeUpdateClassification interface for type EnvironmentComputeUpdate.
func (e *EnvironmentComputeUpdate) GetEnvironmentComputeUpdate() *EnvironmentComputeUpdate { return e }

// EnvironmentProperties - Environment properties
type EnvironmentProperties struct {
	// REQUIRED; The compute resource used by application environment.
	Compute EnvironmentComputeClassification

	// The environment extension.
	Extensions []ExtensionClassification

	// Cloud providers configuration for the environment.
	Providers *Providers

	// Specifies Recipes linked to the Environment.
	Recipes map[string]map[string]RecipePropertiesClassification

	// Simulated environment.
	Simulated *bool

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState
}

// EnvironmentResource - The environment resource
type EnvironmentResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *EnvironmentProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EnvironmentResourceListResult - The response of a EnvironmentResource list operation.
type EnvironmentResourceListResult struct {
	// REQUIRED; The EnvironmentResource items on this page
	Value []*EnvironmentResource

	// The link to the next page of items
	NextLink *string
}

// EnvironmentResourceUpdate - The type used for update operations of the EnvironmentResource.
type EnvironmentResourceUpdate struct {
	// The updatable properties of the EnvironmentResource.
	Properties *EnvironmentResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// EnvironmentResourceUpdateProperties - The updatable properties of the EnvironmentResource.
type EnvironmentResourceUpdateProperties struct {
	// The compute resource used by application environment.
	Compute EnvironmentComputeUpdateClassification

	// The environment extension.
	Extensions []ExtensionClassification

	// Cloud providers configuration for the environment.
	Providers *ProvidersUpdate

	// Specifies Recipes linked to the Environment.
	Recipes map[string]map[string]RecipePropertiesUpdateClassification

	// Simulated environment.
	Simulated *bool
}

// EphemeralVolume - Specifies an ephemeral volume for a container
type EphemeralVolume struct {
	// REQUIRED; Discriminator property for Volume.
	Kind *string

	// REQUIRED; Backing store for the ephemeral volume
	ManagedStore *ManagedStore

	// The path where the volume is mounted
	MountPath *string
}

// GetVolume implements the VolumeClassification interface for type EphemeralVolume.
func (e *EphemeralVolume) GetVolume() *Volume {
	return &Volume{
		Kind: e.Kind,
		MountPath: e.MountPath,
	}
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// ExecHealthProbeProperties - Specifies the properties for readiness/liveness probe using an executable
type ExecHealthProbeProperties struct {
	// REQUIRED; Command to execute to probe readiness/liveness
	Command *string

	// REQUIRED; Discriminator property for HealthProbeProperties.
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type ExecHealthProbeProperties.
func (e *ExecHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: e.FailureThreshold,
		InitialDelaySeconds: e.InitialDelaySeconds,
		Kind: e.Kind,
		PeriodSeconds: e.PeriodSeconds,
		TimeoutSeconds: e.TimeoutSeconds,
	}
}

// ExtenderProperties - ExtenderResource portable resource properties
type ExtenderProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string

	// The recipe used to automatically deploy underlying infrastructure for the extender portable resource
	Recipe *Recipe

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning

	// The secrets for referenced resource
	Secrets map[string]any

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// ExtenderResource portable resource
type ExtenderResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *ExtenderProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ExtenderResourceListResult - The response of a ExtenderResource list operation.
type ExtenderResourceListResult struct {
	// REQUIRED; The ExtenderResource items on this page
	Value []*ExtenderResource

	// The link to the next page of items
	NextLink *string
}

// ExtenderResourceUpdate - The type used for update operations of the ExtenderResource.
type ExtenderResourceUpdate struct {
	// The updatable properties of the ExtenderResource.
	Properties *ExtenderResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// ExtenderResourceUpdateProperties - The updatable properties of the ExtenderResource.
type ExtenderResourceUpdateProperties struct {
	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string

	// Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string

	// The recipe used to automatically deploy underlying infrastructure for the extender portable resource
	Recipe *RecipeUpdate

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning

	// The secrets for referenced resource
	Secrets map[string]any
}

// Extension of a environment/application resource.
type Extension struct {
	// REQUIRED; Discriminator property for Extension.
	Kind *string
}

// GetExtension implements the ExtensionClassification interface for type Extension.
func (e *Extension) GetExtension() *Extension { return e }

// GatewayHostname - Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.
type GatewayHostname struct {
	// Specify a fully-qualified domain name: myapp.mydomain.com. Mutually exclusive with 'prefix' and will take priority if both
// are defined.
	FullyQualifiedHostname *string

	// Specify a prefix for the hostname: myhostname.myapp.PUBLICHOSTNAMEORIP.nip.io. Mutually exclusive with 'fullyQualifiedHostname'
// and will be overridden if both are defined.
	Prefix *string
}

// GatewayProperties - Gateway properties
type GatewayProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// REQUIRED; Routes attached to this Gateway
	Routes []*GatewayRoute

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.
	Hostname *GatewayHostname

	// Sets Gateway to not be exposed externally (no public IP address associated). Defaults to false (exposed to internet).
	Internal *bool

	// TLS configuration for the Gateway.
	TLS *GatewayTLS

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus

	// READ-ONLY; URL of the gateway resource. Readonly
	URL *string
}

// GatewayResource - Concrete tracked resource types can be created by aliasing this type using a specific property type.
type GatewayResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *GatewayProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// GatewayResourceListResult - The response of a GatewayResource list operation.
type GatewayResourceListResult struct {
	// REQUIRED; The GatewayResource items on this page
	Value []*GatewayResource

	// The link to the next page of items
	NextLink *string
}

// GatewayResourceUpdate - The type used for update operations of the GatewayResource.
type GatewayResourceUpdate struct {
	// The updatable properties of the GatewayResource.
	Properties *GatewayResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// GatewayResourceUpdateProperties - The updatable properties of the GatewayResource.
type GatewayResourceUpdateProperties struct {
	// Fully qualified resource ID for the application
	Application *string

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// Declare hostname information for the Gateway. Leaving the hostname empty auto-assigns one: mygateway.myapp.PUBLICHOSTNAMEORIP.nip.io.
	Hostname *GatewayHostname

	// Sets Gateway to not be exposed externally (no public IP address associated). Defaults to false (exposed to internet).
	Internal *bool

	// Routes attached to this Gateway
	Routes []*GatewayRoute

	// TLS configuration for the Gateway.
	TLS *GatewayTLS
}

// GatewayRoute - Route attached to Gateway
type GatewayRoute struct {
	// The HttpRoute to route to. Ex - myserviceroute.id.
	Destination *string

	// The path to match the incoming request path on. Ex - /myservice.
	Path *string

	// Optionally update the prefix when sending the request to the service. Ex - replacePrefix: '/' and path: '/myservice' will
// transform '/myservice/myroute' to '/myroute'
	ReplacePrefix *string
}

// GatewayTLS - TLS configuration definition for Gateway resource.
type GatewayTLS struct {
	// The resource id for the secret containing the TLS certificate and key for the gateway.
	CertificateFrom *string

	// TLS minimum protocol version (defaults to 1.2).
	MinimumProtocolVersion *TLSMinVersion

	// If true, gateway lets the https traffic sslPassthrough to the backend servers for decryption.
	SSLPassthrough *bool
}

// HTTPGetHealthProbeProperties - Specifies the properties for readiness/liveness probe using HTTP Get
type HTTPGetHealthProbeProperties struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// REQUIRED; Discriminator property for HealthProbeProperties.
	Kind *string

	// REQUIRED; The route to make the HTTP request on
	Path *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Custom HTTP headers to add to the get request
	Headers map[string]*string

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type HTTPGetHealthProbeProperties.
func (h *HTTPGetHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: h.FailureThreshold,
		InitialDelaySeconds: h.InitialDelaySeconds,
		Kind: h.Kind,
		PeriodSeconds: h.PeriodSeconds,
		TimeoutSeconds: h.TimeoutSeconds,
	}
}

// HTTPRouteProperties - HTTPRoute properties
type HTTPRouteProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The internal hostname accepting traffic for the HTTP Route. Readonly.
	Hostname *string

	// The port number for the HTTP Route. Defaults to 80. Readonly.
	Port *int32

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The scheme used for traffic. Readonly.
	Scheme *string

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus

	// READ-ONLY; A stable URL that that can be used to route traffic to a resource. Readonly.
	URL *string
}

// HTTPRouteResource - Radius HTTPRoute Resource.
type HTTPRouteResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *HTTPRouteProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// HTTPRouteResourceListResult - The response of a HttpRouteResource list operation.
type HTTPRouteResourceListResult struct {
	// REQUIRED; The HttpRouteResource items on this page
	Value []*HTTPRouteResource

	// The link to the next page of items
	NextLink *string
}

// HTTPRouteResourceUpdate - The type used for update operations of the HttpRouteResource.
type HTTPRouteResourceUpdate struct {
	// The updatable properties of the HttpRouteResource.
	Properties *HTTPRouteResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// HTTPRouteResourceUpdateProperties - The updatable properties of the HttpRouteResource.
type HTTPRouteResourceUpdateProperties struct {
	// Fully qualified resource ID for the application
	Application *string

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The internal hostname accepting traffic for the HTTP Route. Readonly.
	Hostname *string

	// The port number for the HTTP Route. Defaults to 80. Readonly.
	Port *int32
}

// HealthProbeProperties - Properties for readiness/liveness probe
type HealthProbeProperties struct {
	// REQUIRED; Discriminator property for HealthProbeProperties.
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type HealthProbeProperties.
func (h *HealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties { return h }

// IamProperties - IAM properties
type IamProperties struct {
	// REQUIRED; The kind of IAM provider to configure
	Kind *IAMKind

	// RBAC permissions to be assigned on the source resource
	Roles []*string
}

// IamPropertiesUpdate - IAM properties
type IamPropertiesUpdate struct {
	// The kind of IAM provider to configure
	Kind *IAMKind

	// RBAC permissions to be assigned on the source resource
	Roles []*string
}

// IdentitySettings is the external identity setting.
type IdentitySettings struct {
	// REQUIRED; kind of identity setting
	Kind *IdentitySettingKind

	// The URI for your compute platform's OIDC issuer
	OidcIssuer *string

	// The resource ID of the provisioned identity
	Resource *string
}

// IdentitySettingsUpdate - IdentitySettings is the external identity setting.
type IdentitySettingsUpdate struct {
	// kind of identity setting
	Kind *IdentitySettingKind

	// The URI for your compute platform's OIDC issuer
	OidcIssuer *string

	// The resource ID of the provisioned identity
	Resource *string
}

// KeyObjectProperties - Represents key object properties
type KeyObjectProperties struct {
	// REQUIRED; The name of the key
	Name *string

	// File name when written to disk
	Alias *string

	// Key version
	Version *string
}

// KubernetesCompute - The Kubernetes compute configuration
type KubernetesCompute struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string

	// REQUIRED; The namespace to use for the environment.
	Namespace *string

	// Configuration for supported external identity providers
	Identity *IdentitySettings

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type KubernetesCompute.
func (k *KubernetesCompute) GetEnvironmentCompute() *EnvironmentCompute {
	return &EnvironmentCompute{
		Identity: k.Identity,
		Kind: k.Kind,
		ResourceID: k.ResourceID,
	}
}

// KubernetesComputeUpdate - The Kubernetes compute configuration
type KubernetesComputeUpdate struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string

	// Configuration for supported external identity providers
	Identity *IdentitySettingsUpdate

	// The namespace to use for the environment.
	Namespace *string

	// The resource id of the compute resource for application environment.
	ResourceID *string
}

// GetEnvironmentComputeUpdate implements the EnvironmentComputeUpdateClassification interface for type KubernetesComputeUpdate.
func (k *KubernetesComputeUpdate) GetEnvironmentComputeUpdate() *EnvironmentComputeUpdate {
	return &EnvironmentComputeUpdate{
		Identity: k.Identity,
		Kind: k.Kind,
		ResourceID: k.ResourceID,
	}
}

// KubernetesMetadataExtension - Kubernetes metadata extension of a environment/application resource.
type KubernetesMetadataExtension struct {
	// REQUIRED; Discriminator property for Extension.
	Kind *string

	// Annotations to be applied to the Kubernetes resources output by the resource
	Annotations map[string]*string

	// Labels to be applied to the Kubernetes resources output by the resource
	Labels map[string]*string
}

// GetExtension implements the ExtensionClassification interface for type KubernetesMetadataExtension.
func (k *KubernetesMetadataExtension) GetExtension() *Extension {
	return &Extension{
		Kind: k.Kind,
	}
}

// KubernetesNamespaceExtension - Kubernetes namespace extension of a environment/application resource.
type KubernetesNamespaceExtension struct {
	// REQUIRED; Discriminator property for Extension.
	Kind *string

	// REQUIRED; The namespace of the application environment.
	Namespace *string
}

// GetExtension implements the ExtensionClassification interface for type KubernetesNamespaceExtension.
func (k *KubernetesNamespaceExtension) GetExtension() *Extension {
	return &Extension{
		Kind: k.Kind,
	}
}

// KubernetesRuntimeProperties - The runtime configuration properties for Kubernetes
type KubernetesRuntimeProperties struct {
	// The serialized YAML manifest which represents the base Kubernetes resources to deploy, such as Deployment, Service, ServiceAccount,
// Secrets, and ConfigMaps.
	Base *string

	// A strategic merge patch that will be applied to the PodSpec object when this container is being deployed.
	Pod map[string]any
}

// ManualScalingExtension - ManualScaling Extension
type ManualScalingExtension struct {
	// REQUIRED; Discriminator property for Extension.
	Kind *string

	// REQUIRED; Replica count.
	Replicas *int32
}

// GetExtension implements the ExtensionClassification interface for type ManualScalingExtension.
func (m *ManualScalingExtension) GetExtension() *Extension {
	return &Extension{
		Kind: m.Kind,
	}
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// OutputResource - Properties of an output resource.
type OutputResource struct {
	// The UCP resource ID of the underlying resource.
	ID *string

	// The logical identifier scoped to the owning Radius resource. This is only needed or used when a resource has a dependency
// relationship. LocalIDs do not have any particular format or meaning beyond
// being compared to determine dependency relationships.
	LocalID *string

	// Determines whether Radius manages the lifecycle of the underlying resource.
	RadiusManaged *bool
}

// PersistentVolume - Specifies a persistent volume for a container
type PersistentVolume struct {
	// REQUIRED; Discriminator property for Volume.
	Kind *string

	// REQUIRED; The source of the volume
	Source *string

	// The path where the volume is mounted
	MountPath *string

	// Container read/write access to the volume
	Permission *VolumePermission
}

// GetVolume implements the VolumeClassification interface for type PersistentVolume.
func (p *PersistentVolume) GetVolume() *Volume {
	return &Volume{
		Kind: p.Kind,
		MountPath: p.MountPath,
	}
}

// Providers - The Cloud providers configuration
type Providers struct {
	// The AWS cloud provider configuration
	Aws *ProvidersAws

	// The Azure cloud provider configuration
	Azure *ProvidersAzure
}

// ProvidersAws - The AWS cloud provider definition
type ProvidersAws struct {
	// REQUIRED; Target scope for AWS resources to be deployed into. For example: '/planes/aws/aws/accounts/000000000000/regions/us-west-2'
	Scope *string
}

// ProvidersAwsUpdate - The AWS cloud provider definition
type ProvidersAwsUpdate struct {
	// Target scope for AWS resources to be deployed into. For example: '/planes/aws/aws/accounts/000000000000/regions/us-west-2'
	Scope *string
}

// ProvidersAzure - The Azure cloud provider definition
type ProvidersAzure struct {
	// REQUIRED; Target scope for Azure resources to be deployed into. For example: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup'
	Scope *string
}

// ProvidersAzureUpdate - The Azure cloud provider definition
type ProvidersAzureUpdate struct {
	// Target scope for Azure resources to be deployed into. For example: '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup'
	Scope *string
}

// ProvidersUpdate - The Cloud providers configuration
type ProvidersUpdate struct {
	// The AWS cloud provider configuration
	Aws *ProvidersAwsUpdate

	// The Azure cloud provider configuration
	Azure *ProvidersAzureUpdate
}

// Recipe - The recipe used to automatically deploy underlying infrastructure for a portable resource
type Recipe struct {
	// REQUIRED; The name of the recipe within the environment to use
	Name *string

	// Key/value parameters to pass into the recipe at deployment
	Parameters map[string]any
}

// RecipeGetMetadata - Represents the request body of the getmetadata action.
type RecipeGetMetadata struct {
	// REQUIRED; The name of the recipe registered to the environment
	Name *string

	// REQUIRED; Type of the resource this recipe can be consumed by. For example: 'Applications.Datastores/mongoDatabases'
	ResourceType *string
}

// RecipeGetMetadataResponse - The properties of a Recipe linked to an Environment.
type RecipeGetMetadataResponse struct {
	// REQUIRED; The key/value parameters to pass to the recipe template at deployment.
	Parameters map[string]any

	// REQUIRED; The format of the template provided by the recipe. Allowed values: bicep, terraform.
	TemplateKind *string

	// REQUIRED; The path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Connect to the Bicep registry using HTTP (not-HTTPS). This should be used when the registry is known not to support HTTPS,
// for example in a locally-hosted registry. Defaults to false (use HTTPS/TLS).
	PlainHTTP *bool

	// The version of the template to deploy. For Terraform recipes using a module registry this is required, but must be omitted
// for other module sources.
	TemplateVersion *string
}

// RecipeProperties - Format of the template provided by the recipe. Allowed values: bicep, terraform.
type RecipeProperties struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any
}

// GetRecipeProperties implements the RecipePropertiesClassification interface for type RecipeProperties.
func (r *RecipeProperties) GetRecipeProperties() *RecipeProperties { return r }

// RecipePropertiesUpdate - Format of the template provided by the recipe. Allowed values: bicep, terraform.
type RecipePropertiesUpdate struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string
}

// GetRecipePropertiesUpdate implements the RecipePropertiesUpdateClassification interface for type RecipePropertiesUpdate.
func (r *RecipePropertiesUpdate) GetRecipePropertiesUpdate() *RecipePropertiesUpdate { return r }

// RecipeStatus - Recipe status at deployment time for a resource.
type RecipeStatus struct {
	// REQUIRED; TemplateKind is the kind of the recipe template used by the portable resource upon deployment.
	TemplateKind *string

	// REQUIRED; TemplatePath is the path of the recipe consumed by the portable resource upon deployment.
	TemplatePath *string

	// TemplateVersion is the version number of the template.
	TemplateVersion *string
}

// RecipeUpdate - The recipe used to automatically deploy underlying infrastructure for a portable resource
type RecipeUpdate struct {
	// The name of the recipe within the environment to use
	Name *string

	// Key/value parameters to pass into the recipe at deployment
	Parameters map[string]any
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ResourceReference - Describes a reference to an existing resource
type ResourceReference struct {
	// REQUIRED; Resource id of an existing resource
	ID *string
}

// ResourceStatus - Status of a resource.
type ResourceStatus struct {
	// The compute resource associated with the resource.
	Compute EnvironmentComputeClassification

	// Properties of an output resource
	OutputResources []*OutputResource

	// READ-ONLY; The recipe data at the time of deployment
	Recipe *RecipeStatus
}

// RuntimesProperties - The properties for runtime configuration
type RuntimesProperties struct {
	// The runtime configuration properties for Kubernetes
	Kubernetes *KubernetesRuntimeProperties
}

// SecretObjectProperties - Represents secret object properties
type SecretObjectProperties struct {
	// REQUIRED; The name of the secret
	Name *string

	// File name when written to disk
	Alias *string

	// Encoding format. Default utf-8
	Encoding *VolumeSecretEncodings

	// secret version
	Version *string
}

// SecretStoreListSecretsResult - The list of secrets
type SecretStoreListSecretsResult struct {
	// REQUIRED; An object to represent key-value type secrets
	Data map[string]*SecretValueProperties

	// REQUIRED; The type of secret store data
	Type *SecretStoreDataType
}

// SecretStoreProperties - The properties of SecretStore
type SecretStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// REQUIRED; An object to represent key-value type secrets
	Data map[string]*SecretValueProperties

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The resource id of external secret store.
	Resource *string

	// The type of secret store data
	Type *SecretStoreDataType

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// SecretStoreResource - Concrete tracked resource types can be created by aliasing this type using a specific property type.
type SecretStoreResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties *SecretStoreProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SecretStoreResourceListResult - The response of a SecretStoreResource list operation.
type SecretStoreResourceListResult struct {
	// REQUIRED; The SecretStoreResource items on this page
	Value []*SecretStoreResource

	// The link to the next page of items
	NextLink *string
}

// SecretStoreResourceUpdate - The type used for update operations of the SecretStoreResource.
type SecretStoreResourceUpdate struct {
	// The updatable properties of the SecretStoreResource.
	Properties *SecretStoreResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SecretStoreResourceUpdateProperties - The updatable properties of the SecretStoreResource.
type SecretStoreResourceUpdateProperties struct {
	// Fully qualified resource ID for the application
	Application *string

	// An object to represent key-value type secrets
	Data map[string]*SecretValueProperties

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// The resource id of external secret store.
	Resource *string

	// The type of secret store data
	Type *SecretStoreDataType
}

// SecretValueProperties - The properties of SecretValue
type SecretValueProperties struct {
	// The encoding of value
	Encoding *SecretValueEncoding

	// The value of secret.
	Value *string

	// The referenced secret in properties.resource
	ValueFrom *ValueFromProperties
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TCPHealthProbeProperties - Specifies the properties for readiness/liveness probe using TCP
type TCPHealthProbeProperties struct {
	// REQUIRED; The listening port number
	ContainerPort *int32

	// REQUIRED; Discriminator property for HealthProbeProperties.
	Kind *string

	// Threshold number of times the probe fails after which a failure would be reported
	FailureThreshold *float32

	// Initial delay in seconds before probing for readiness/liveness
	InitialDelaySeconds *float32

	// Interval for the readiness/liveness probe in seconds
	PeriodSeconds *float32

	// Number of seconds after which the readiness/liveness probe times out. Defaults to 5 seconds
	TimeoutSeconds *float32
}

// GetHealthProbeProperties implements the HealthProbePropertiesClassification interface for type TCPHealthProbeProperties.
func (t *TCPHealthProbeProperties) GetHealthProbeProperties() *HealthProbeProperties {
	return &HealthProbeProperties{
		FailureThreshold: t.FailureThreshold,
		InitialDelaySeconds: t.InitialDelaySeconds,
		Kind: t.Kind,
		PeriodSeconds: t.PeriodSeconds,
		TimeoutSeconds: t.TimeoutSeconds,
	}
}

// TerraformRecipeProperties - Represents Terraform recipe properties.
type TerraformRecipeProperties struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// REQUIRED; Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Version of the template to deploy. For Terraform recipes using a module registry this is required, but must be omitted
// for other module sources.
	TemplateVersion *string
}

// GetRecipeProperties implements the RecipePropertiesClassification interface for type TerraformRecipeProperties.
func (t *TerraformRecipeProperties) GetRecipeProperties() *RecipeProperties {
	return &RecipeProperties{
		Parameters: t.Parameters,
		TemplateKind: t.TemplateKind,
		TemplatePath: t.TemplatePath,
	}
}

// TerraformRecipePropertiesUpdate - Represents Terraform recipe properties.
type TerraformRecipePropertiesUpdate struct {
	// REQUIRED; Discriminator property for RecipeProperties.
	TemplateKind *string

	// Key/value parameters to pass to the recipe template at deployment
	Parameters map[string]any

	// Path to the template provided by the recipe. Currently only link to Azure Container Registry is supported.
	TemplatePath *string

	// Version of the template to deploy. For Terraform recipes using a module registry this is required, but must be omitted
// for other module sources.
	TemplateVersion *string
}

// GetRecipePropertiesUpdate implements the RecipePropertiesUpdateClassification interface for type TerraformRecipePropertiesUpdate.
func (t *TerraformRecipePropertiesUpdate) GetRecipePropertiesUpdate() *RecipePropertiesUpdate {
	return &RecipePropertiesUpdate{
		Parameters: t.Parameters,
		TemplateKind: t.TemplateKind,
		TemplatePath: t.TemplatePath,
	}
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ValueFromProperties - The Secret value source properties
type ValueFromProperties struct {
	// REQUIRED; The name of the referenced secret.
	Name *string

	// The version of the referenced secret.
	Version *string
}

// Volume - Specifies a volume for a container
type Volume struct {
	// REQUIRED; Discriminator property for Volume.
	Kind *string

	// The path where the volume is mounted
	MountPath *string
}

// GetVolume implements the VolumeClassification interface for type Volume.
func (v *Volume) GetVolume() *Volume { return v }

// VolumeProperties - Volume properties
type VolumeProperties struct {
	// REQUIRED; Fully qualified resource ID for the application
	Application *string

	// REQUIRED; Discriminator property for VolumeProperties.
	Kind *string

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus
}

// GetVolumeProperties implements the VolumePropertiesClassification interface for type VolumeProperties.
func (v *VolumeProperties) GetVolumeProperties() *VolumeProperties { return v }

// VolumeResource - Radius Volume resource.
type VolumeResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; The resource-specific properties for this resource.
	Properties VolumePropertiesClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VolumeResourceListResult - The response of a VolumeResource list operation.
type VolumeResourceListResult struct {
	// REQUIRED; The VolumeResource items on this page
	Value []*VolumeResource

	// The link to the next page of items
	NextLink *string
}

// VolumeResourceUpdate - The type used for update operations of the VolumeResource.
type VolumeResourceUpdate struct {
	// The updatable properties of the VolumeResource.
	Properties *VolumeResourceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// VolumeResourceUpdateProperties - The updatable properties of the VolumeResource.
type VolumeResourceUpdateProperties struct {
	// Fully qualified resource ID for the application
	Application *string

	// Fully qualified resource ID for the environment that the application is linked to
	Environment *string
}

