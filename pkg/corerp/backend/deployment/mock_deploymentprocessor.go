// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/corerp/backend/deployment (interfaces: DeploymentProcessor)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_deploymentprocessor.go -package=deployment -self_package github.com/radius-project/radius/pkg/corerp/backend/deployment github.com/radius-project/radius/pkg/corerp/backend/deployment DeploymentProcessor
//

// Package deployment is a generated GoMock package.
package deployment

import (
	context "context"
	reflect "reflect"

	v1 "github.com/radius-project/radius/pkg/armrpc/api/v1"
	renderers "github.com/radius-project/radius/pkg/corerp/renderers"
	v10 "github.com/radius-project/radius/pkg/rp/v1"
	resources "github.com/radius-project/radius/pkg/ucp/resources"
	gomock "go.uber.org/mock/gomock"
)

// MockDeploymentProcessor is a mock of DeploymentProcessor interface.
type MockDeploymentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentProcessorMockRecorder
}

// MockDeploymentProcessorMockRecorder is the mock recorder for MockDeploymentProcessor.
type MockDeploymentProcessorMockRecorder struct {
	mock *MockDeploymentProcessor
}

// NewMockDeploymentProcessor creates a new mock instance.
func NewMockDeploymentProcessor(ctrl *gomock.Controller) *MockDeploymentProcessor {
	mock := &MockDeploymentProcessor{ctrl: ctrl}
	mock.recorder = &MockDeploymentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentProcessor) EXPECT() *MockDeploymentProcessorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeploymentProcessor) Delete(arg0 context.Context, arg1 resources.ID, arg2 []v10.OutputResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentProcessorMockRecorder) Delete(arg0, arg1, arg2 any) *MockDeploymentProcessorDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentProcessor)(nil).Delete), arg0, arg1, arg2)
	return &MockDeploymentProcessorDeleteCall{Call: call}
}

// MockDeploymentProcessorDeleteCall wrap *gomock.Call
type MockDeploymentProcessorDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeploymentProcessorDeleteCall) Return(arg0 error) *MockDeploymentProcessorDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeploymentProcessorDeleteCall) Do(f func(context.Context, resources.ID, []v10.OutputResource) error) *MockDeploymentProcessorDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeploymentProcessorDeleteCall) DoAndReturn(f func(context.Context, resources.ID, []v10.OutputResource) error) *MockDeploymentProcessorDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deploy mocks base method.
func (m *MockDeploymentProcessor) Deploy(arg0 context.Context, arg1 resources.ID, arg2 renderers.RendererOutput) (v10.DeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(v10.DeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockDeploymentProcessorMockRecorder) Deploy(arg0, arg1, arg2 any) *MockDeploymentProcessorDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeploymentProcessor)(nil).Deploy), arg0, arg1, arg2)
	return &MockDeploymentProcessorDeployCall{Call: call}
}

// MockDeploymentProcessorDeployCall wrap *gomock.Call
type MockDeploymentProcessorDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeploymentProcessorDeployCall) Return(arg0 v10.DeploymentOutput, arg1 error) *MockDeploymentProcessorDeployCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeploymentProcessorDeployCall) Do(f func(context.Context, resources.ID, renderers.RendererOutput) (v10.DeploymentOutput, error)) *MockDeploymentProcessorDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeploymentProcessorDeployCall) DoAndReturn(f func(context.Context, resources.ID, renderers.RendererOutput) (v10.DeploymentOutput, error)) *MockDeploymentProcessorDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchSecrets mocks base method.
func (m *MockDeploymentProcessor) FetchSecrets(arg0 context.Context, arg1 ResourceData) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSecrets", arg0, arg1)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSecrets indicates an expected call of FetchSecrets.
func (mr *MockDeploymentProcessorMockRecorder) FetchSecrets(arg0, arg1 any) *MockDeploymentProcessorFetchSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSecrets", reflect.TypeOf((*MockDeploymentProcessor)(nil).FetchSecrets), arg0, arg1)
	return &MockDeploymentProcessorFetchSecretsCall{Call: call}
}

// MockDeploymentProcessorFetchSecretsCall wrap *gomock.Call
type MockDeploymentProcessorFetchSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeploymentProcessorFetchSecretsCall) Return(arg0 map[string]any, arg1 error) *MockDeploymentProcessorFetchSecretsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeploymentProcessorFetchSecretsCall) Do(f func(context.Context, ResourceData) (map[string]any, error)) *MockDeploymentProcessorFetchSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeploymentProcessorFetchSecretsCall) DoAndReturn(f func(context.Context, ResourceData) (map[string]any, error)) *MockDeploymentProcessorFetchSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Render mocks base method.
func (m *MockDeploymentProcessor) Render(arg0 context.Context, arg1 resources.ID, arg2 v1.DataModelInterface) (renderers.RendererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0, arg1, arg2)
	ret0, _ := ret[0].(renderers.RendererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockDeploymentProcessorMockRecorder) Render(arg0, arg1, arg2 any) *MockDeploymentProcessorRenderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockDeploymentProcessor)(nil).Render), arg0, arg1, arg2)
	return &MockDeploymentProcessorRenderCall{Call: call}
}

// MockDeploymentProcessorRenderCall wrap *gomock.Call
type MockDeploymentProcessorRenderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeploymentProcessorRenderCall) Return(arg0 renderers.RendererOutput, arg1 error) *MockDeploymentProcessorRenderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeploymentProcessorRenderCall) Do(f func(context.Context, resources.ID, v1.DataModelInterface) (renderers.RendererOutput, error)) *MockDeploymentProcessorRenderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeploymentProcessorRenderCall) DoAndReturn(f func(context.Context, resources.ID, v1.DataModelInterface) (renderers.RendererOutput, error)) *MockDeploymentProcessorRenderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
