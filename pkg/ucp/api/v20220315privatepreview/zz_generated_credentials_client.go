//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CredentialsClient contains the methods for the Credentials group.
// Don't use this type directly, use NewCredentialsClient() instead.
type CredentialsClient struct {
	host string
	pl runtime.Pipeline
}

// NewCredentialsClient creates a new instance of CredentialsClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewCredentialsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*CredentialsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &CredentialsClient{
		host: ep,
pl: pl,
	}
	return client, nil
}

// Delete - Delete credential resource for this plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// credentialName - The name of the credential
// options - CredentialsClientDeleteOptions contains the optional parameters for the CredentialsClient.Delete method.
func (client *CredentialsClient) Delete(ctx context.Context, planeType string, planeName string, credentialName string, options *CredentialsClientDeleteOptions) (CredentialsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, planeType, planeName, credentialName, options)
	if err != nil {
		return CredentialsClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CredentialsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return CredentialsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return CredentialsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CredentialsClient) deleteCreateRequest(ctx context.Context, planeType string, planeName string, credentialName string, options *CredentialsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials/{credentialName}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	if credentialName == "" {
		return nil, errors.New("parameter credentialName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{credentialName}", url.PathEscape(credentialName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get name of the secret that is holding credentials for the plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// credentialName - The name of the credential
// options - CredentialsClientGetOptions contains the optional parameters for the CredentialsClient.Get method.
func (client *CredentialsClient) Get(ctx context.Context, planeType string, planeName string, credentialName string, options *CredentialsClientGetOptions) (CredentialsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, planeType, planeName, credentialName, options)
	if err != nil {
		return CredentialsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CredentialsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CredentialsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CredentialsClient) getCreateRequest(ctx context.Context, planeType string, planeName string, credentialName string, options *CredentialsClientGetOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials/{credentialName}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	if credentialName == "" {
		return nil, errors.New("parameter credentialName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{credentialName}", url.PathEscape(credentialName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CredentialsClient) getHandleResponse(resp *http.Response) (CredentialsClientGetResponse, error) {
	result := CredentialsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResource); err != nil {
		return CredentialsClientGetResponse{}, err
	}
	return result, nil
}

// List - List the credentials for this plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// options - CredentialsClientListOptions contains the optional parameters for the CredentialsClient.List method.
func (client *CredentialsClient) List(ctx context.Context, planeType string, planeName string, options *CredentialsClientListOptions) (CredentialsClientListResponse, error) {
	req, err := client.listCreateRequest(ctx, planeType, planeName, options)
	if err != nil {
		return CredentialsClientListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CredentialsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CredentialsClientListResponse{}, runtime.NewResponseError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *CredentialsClient) listCreateRequest(ctx context.Context, planeType string, planeName string, options *CredentialsClientListOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *CredentialsClient) listHandleResponse(resp *http.Response) (CredentialsClientListResponse, error) {
	result := CredentialsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResourceList); err != nil {
		return CredentialsClientListResponse{}, err
	}
	return result, nil
}

