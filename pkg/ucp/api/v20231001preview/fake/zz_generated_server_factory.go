// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the v20231001preview.ClientFactory type.
type ServerFactory struct {
	// APIVersionsServer contains the fakes for client APIVersionsClient
	APIVersionsServer APIVersionsServer

	// AwsCredentialsServer contains the fakes for client AwsCredentialsClient
	AwsCredentialsServer AwsCredentialsServer

	// AwsPlanesServer contains the fakes for client AwsPlanesClient
	AwsPlanesServer AwsPlanesServer

	// AzureCredentialsServer contains the fakes for client AzureCredentialsClient
	AzureCredentialsServer AzureCredentialsServer

	// AzurePlanesServer contains the fakes for client AzurePlanesClient
	AzurePlanesServer AzurePlanesServer

	// LocationsServer contains the fakes for client LocationsClient
	LocationsServer LocationsServer

	// PlanesServer contains the fakes for client PlanesClient
	PlanesServer PlanesServer

	// RadiusPlanesServer contains the fakes for client RadiusPlanesClient
	RadiusPlanesServer RadiusPlanesServer

	// ResourceGroupsServer contains the fakes for client ResourceGroupsClient
	ResourceGroupsServer ResourceGroupsServer

	// ResourceProvidersServer contains the fakes for client ResourceProvidersClient
	ResourceProvidersServer ResourceProvidersServer

	// ResourceTypesServer contains the fakes for client ResourceTypesClient
	ResourceTypesServer ResourceTypesServer

	// ResourcesServer contains the fakes for client ResourcesClient
	ResourcesServer ResourcesServer

}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of v20231001preview.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of v20231001preview.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv *ServerFactory
	trMu sync.Mutex
	trAPIVersionsServer *APIVersionsServerTransport
	trAwsCredentialsServer *AwsCredentialsServerTransport
	trAwsPlanesServer *AwsPlanesServerTransport
	trAzureCredentialsServer *AzureCredentialsServerTransport
	trAzurePlanesServer *AzurePlanesServerTransport
	trLocationsServer *LocationsServerTransport
	trPlanesServer *PlanesServerTransport
	trRadiusPlanesServer *RadiusPlanesServerTransport
	trResourceGroupsServer *ResourceGroupsServerTransport
	trResourceProvidersServer *ResourceProvidersServerTransport
	trResourceTypesServer *ResourceTypesServerTransport
	trResourcesServer *ResourcesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "APIVersionsClient":
		initServer(s, &s.trAPIVersionsServer, func() *APIVersionsServerTransport { return NewAPIVersionsServerTransport(&s.srv.APIVersionsServer) })
		resp, err = s.trAPIVersionsServer.Do(req)
	case "AwsCredentialsClient":
		initServer(s, &s.trAwsCredentialsServer, func() *AwsCredentialsServerTransport { return NewAwsCredentialsServerTransport(&s.srv.AwsCredentialsServer) })
		resp, err = s.trAwsCredentialsServer.Do(req)
	case "AwsPlanesClient":
		initServer(s, &s.trAwsPlanesServer, func() *AwsPlanesServerTransport { return NewAwsPlanesServerTransport(&s.srv.AwsPlanesServer) })
		resp, err = s.trAwsPlanesServer.Do(req)
	case "AzureCredentialsClient":
		initServer(s, &s.trAzureCredentialsServer, func() *AzureCredentialsServerTransport { return NewAzureCredentialsServerTransport(&s.srv.AzureCredentialsServer) })
		resp, err = s.trAzureCredentialsServer.Do(req)
	case "AzurePlanesClient":
		initServer(s, &s.trAzurePlanesServer, func() *AzurePlanesServerTransport { return NewAzurePlanesServerTransport(&s.srv.AzurePlanesServer) })
		resp, err = s.trAzurePlanesServer.Do(req)
	case "LocationsClient":
		initServer(s, &s.trLocationsServer, func() *LocationsServerTransport { return NewLocationsServerTransport(&s.srv.LocationsServer) })
		resp, err = s.trLocationsServer.Do(req)
	case "PlanesClient":
		initServer(s, &s.trPlanesServer, func() *PlanesServerTransport { return NewPlanesServerTransport(&s.srv.PlanesServer) })
		resp, err = s.trPlanesServer.Do(req)
	case "RadiusPlanesClient":
		initServer(s, &s.trRadiusPlanesServer, func() *RadiusPlanesServerTransport { return NewRadiusPlanesServerTransport(&s.srv.RadiusPlanesServer) })
		resp, err = s.trRadiusPlanesServer.Do(req)
	case "ResourceGroupsClient":
		initServer(s, &s.trResourceGroupsServer, func() *ResourceGroupsServerTransport { return NewResourceGroupsServerTransport(&s.srv.ResourceGroupsServer) })
		resp, err = s.trResourceGroupsServer.Do(req)
	case "ResourceProvidersClient":
		initServer(s, &s.trResourceProvidersServer, func() *ResourceProvidersServerTransport { return NewResourceProvidersServerTransport(&s.srv.ResourceProvidersServer) })
		resp, err = s.trResourceProvidersServer.Do(req)
	case "ResourceTypesClient":
		initServer(s, &s.trResourceTypesServer, func() *ResourceTypesServerTransport { return NewResourceTypesServerTransport(&s.srv.ResourceTypesServer) })
		resp, err = s.trResourceTypesServer.Do(req)
	case "ResourcesClient":
		initServer(s, &s.trResourcesServer, func() *ResourcesServerTransport { return NewResourcesServerTransport(&s.srv.ResourcesServer) })
		resp, err = s.trResourcesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
