//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220901privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureCredentialClient contains the methods for the AzureCredential group.
// Don't use this type directly, use NewAzureCredentialClient() instead.
type AzureCredentialClient struct {
	host string
	pl runtime.Pipeline
}

// NewAzureCredentialClient creates a new instance of AzureCredentialClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAzureCredentialClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureCredentialClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &AzureCredentialClient{
		host: ep,
pl: pl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update a Credential.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// credentialName - The name of the credential
// credential - Credential details
// options - AzureCredentialClientCreateOrUpdateOptions contains the optional parameters for the AzureCredentialClient.CreateOrUpdate
// method.
func (client *AzureCredentialClient) CreateOrUpdate(ctx context.Context, planeType string, planeName string, credentialName string, credential CredentialResource, options *AzureCredentialClientCreateOrUpdateOptions) (AzureCredentialClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, planeType, planeName, credentialName, credential, options)
	if err != nil {
		return AzureCredentialClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureCredentialClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return AzureCredentialClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AzureCredentialClient) createOrUpdateCreateRequest(ctx context.Context, planeType string, planeName string, credentialName string, credential CredentialResource, options *AzureCredentialClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials/{credentialName}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	if credentialName == "" {
		return nil, errors.New("parameter credentialName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{credentialName}", url.PathEscape(credentialName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, credential)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *AzureCredentialClient) createOrUpdateHandleResponse(resp *http.Response) (AzureCredentialClientCreateOrUpdateResponse, error) {
	result := AzureCredentialClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResource); err != nil {
		return AzureCredentialClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete credential resource for this plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// credentialName - The name of the credential
// options - AzureCredentialClientDeleteOptions contains the optional parameters for the AzureCredentialClient.Delete method.
func (client *AzureCredentialClient) Delete(ctx context.Context, planeType string, planeName string, credentialName string, options *AzureCredentialClientDeleteOptions) (AzureCredentialClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, planeType, planeName, credentialName, options)
	if err != nil {
		return AzureCredentialClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureCredentialClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return AzureCredentialClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return AzureCredentialClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AzureCredentialClient) deleteCreateRequest(ctx context.Context, planeType string, planeName string, credentialName string, options *AzureCredentialClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials/{credentialName}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	if credentialName == "" {
		return nil, errors.New("parameter credentialName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{credentialName}", url.PathEscape(credentialName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get name of the secret that is holding credential for the plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// credentialName - The name of the credential
// options - AzureCredentialClientGetOptions contains the optional parameters for the AzureCredentialClient.Get method.
func (client *AzureCredentialClient) Get(ctx context.Context, planeType string, planeName string, credentialName string, options *AzureCredentialClientGetOptions) (AzureCredentialClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, planeType, planeName, credentialName, options)
	if err != nil {
		return AzureCredentialClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureCredentialClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AzureCredentialClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AzureCredentialClient) getCreateRequest(ctx context.Context, planeType string, planeName string, credentialName string, options *AzureCredentialClientGetOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials/{credentialName}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	if credentialName == "" {
		return nil, errors.New("parameter credentialName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{credentialName}", url.PathEscape(credentialName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AzureCredentialClient) getHandleResponse(resp *http.Response) (AzureCredentialClientGetResponse, error) {
	result := AzureCredentialClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResource); err != nil {
		return AzureCredentialClientGetResponse{}, err
	}
	return result, nil
}

// List - List the credentials for this plane instance
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01-privatepreview
// planeType - The type of the plane
// planeName - The name of the plane
// options - AzureCredentialClientListOptions contains the optional parameters for the AzureCredentialClient.List method.
func (client *AzureCredentialClient) List(ctx context.Context, planeType string, planeName string, options *AzureCredentialClientListOptions) (AzureCredentialClientListResponse, error) {
	req, err := client.listCreateRequest(ctx, planeType, planeName, options)
	if err != nil {
		return AzureCredentialClientListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AzureCredentialClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AzureCredentialClientListResponse{}, runtime.NewResponseError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *AzureCredentialClient) listCreateRequest(ctx context.Context, planeType string, planeName string, options *AzureCredentialClientListOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}/{planeName}/providers/System.Azure/credentials"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	if planeName == "" {
		return nil, errors.New("parameter planeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeName}", url.PathEscape(planeName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AzureCredentialClient) listHandleResponse(resp *http.Response) (AzureCredentialClientListResponse, error) {
	result := AzureCredentialClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CredentialResourceList); err != nil {
		return AzureCredentialClientListResponse{}, err
	}
	return result, nil
}

