//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220901privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PlaneTypesClient contains the methods for the PlaneTypes group.
// Don't use this type directly, use NewPlaneTypesClient() instead.
type PlaneTypesClient struct {
	internal *arm.Client
}

// NewPlaneTypesClient creates a new instance of PlaneTypesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPlaneTypesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*PlaneTypesClient, error) {
	cl, err := arm.NewClient(moduleName+".PlaneTypesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PlaneTypesClient{
	internal: cl,
	}
	return client, nil
}

// Get - Retrieves information about a PlaneResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-privatepreview
//   - planeType - The plane type.
//   - options - PlaneTypesClientGetOptions contains the optional parameters for the PlaneTypesClient.Get method.
func (client *PlaneTypesClient) Get(ctx context.Context, planeType string, options *PlaneTypesClientGetOptions) (PlaneTypesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, planeType, options)
	if err != nil {
		return PlaneTypesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return PlaneTypesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return PlaneTypesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *PlaneTypesClient) getCreateRequest(ctx context.Context, planeType string, options *PlaneTypesClientGetOptions) (*policy.Request, error) {
	urlPath := "/planes/{planeType}"
	if planeType == "" {
		return nil, errors.New("parameter planeType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planeType}", url.PathEscape(planeType))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PlaneTypesClient) getHandleResponse(resp *http.Response) (PlaneTypesClientGetResponse, error) {
	result := PlaneTypesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PlaneResource); err != nil {
		return PlaneTypesClientGetResponse{}, err
	}
	return result, nil
}

