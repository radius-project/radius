// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/ucp/frontend/ucphandler/resourcegroups (interfaces: ResourceGroupsUCPHandler)

// Package resourcegroups is a generated GoMock package.
package resourcegroups

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rest "github.com/project-radius/radius/pkg/ucp/rest"
	store "github.com/project-radius/radius/pkg/ucp/store"
)

// MockResourceGroupsUCPHandler is a mock of ResourceGroupsUCPHandler interface.
type MockResourceGroupsUCPHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResourceGroupsUCPHandlerMockRecorder
}

// MockResourceGroupsUCPHandlerMockRecorder is the mock recorder for MockResourceGroupsUCPHandler.
type MockResourceGroupsUCPHandlerMockRecorder struct {
	mock *MockResourceGroupsUCPHandler
}

// NewMockResourceGroupsUCPHandler creates a new mock instance.
func NewMockResourceGroupsUCPHandler(ctrl *gomock.Controller) *MockResourceGroupsUCPHandler {
	mock := &MockResourceGroupsUCPHandler{ctrl: ctrl}
	mock.recorder = &MockResourceGroupsUCPHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceGroupsUCPHandler) EXPECT() *MockResourceGroupsUCPHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResourceGroupsUCPHandler) Create(arg0 context.Context, arg1 store.StorageClient, arg2 []byte, arg3 string) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceGroupsUCPHandlerMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResourceGroupsUCPHandler)(nil).Create), arg0, arg1, arg2, arg3)
}

// DeleteByID mocks base method.
func (m *MockResourceGroupsUCPHandler) DeleteByID(arg0 context.Context, arg1 store.StorageClient, arg2 string) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockResourceGroupsUCPHandlerMockRecorder) DeleteByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockResourceGroupsUCPHandler)(nil).DeleteByID), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockResourceGroupsUCPHandler) GetByID(arg0 context.Context, arg1 store.StorageClient, arg2 string) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResourceGroupsUCPHandlerMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResourceGroupsUCPHandler)(nil).GetByID), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockResourceGroupsUCPHandler) List(arg0 context.Context, arg1 store.StorageClient, arg2 string) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResourceGroupsUCPHandlerMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResourceGroupsUCPHandler)(nil).List), arg0, arg1, arg2)
}
