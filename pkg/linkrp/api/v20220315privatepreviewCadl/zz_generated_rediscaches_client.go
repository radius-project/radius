//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreviewCadl

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// RedisCachesClient contains the methods for the RedisCaches group.
// Don't use this type directly, use NewRedisCachesClient() instead.
type RedisCachesClient struct {
	host string
	pl runtime.Pipeline
}

// NewRedisCachesClient creates a new instance of RedisCachesClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewRedisCachesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*RedisCachesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RedisCachesClient{
		host: ep,
pl: pl,
	}
	return client, nil
}

// CreateOrUpdate - Create a RedisCacheResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// redisCacheName - The name of the RedisCache link resource
// resource - Resource create parameters.
// options - RedisCachesClientCreateOrUpdateOptions contains the optional parameters for the RedisCachesClient.CreateOrUpdate
// method.
func (client *RedisCachesClient) CreateOrUpdate(ctx context.Context, rootScope string, redisCacheName string, resource RedisCacheResource, options *RedisCachesClientCreateOrUpdateOptions) (RedisCachesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, rootScope, redisCacheName, resource, options)
	if err != nil {
		return RedisCachesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedisCachesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return RedisCachesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RedisCachesClient) createOrUpdateCreateRequest(ctx context.Context, rootScope string, redisCacheName string, resource RedisCacheResource, options *RedisCachesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	if redisCacheName == "" {
		return nil, errors.New("parameter redisCacheName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisCacheName}", url.PathEscape(redisCacheName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *RedisCachesClient) createOrUpdateHandleResponse(resp *http.Response) (RedisCachesClientCreateOrUpdateResponse, error) {
	result := RedisCachesClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return RedisCachesClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.RedisCacheResource); err != nil {
		return RedisCachesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a RedisCacheResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// redisCacheName - The name of the RedisCache link resource
// options - RedisCachesClientDeleteOptions contains the optional parameters for the RedisCachesClient.Delete method.
func (client *RedisCachesClient) Delete(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientDeleteOptions) (RedisCachesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, rootScope, redisCacheName, options)
	if err != nil {
		return RedisCachesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedisCachesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return RedisCachesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *RedisCachesClient) deleteCreateRequest(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	if redisCacheName == "" {
		return nil, errors.New("parameter redisCacheName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisCacheName}", url.PathEscape(redisCacheName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *RedisCachesClient) deleteHandleResponse(resp *http.Response) (RedisCachesClientDeleteResponse, error) {
	result := RedisCachesClientDeleteResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return RedisCachesClientDeleteResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// Get - Get a RedisCacheResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// redisCacheName - The name of the RedisCache link resource
// options - RedisCachesClientGetOptions contains the optional parameters for the RedisCachesClient.Get method.
func (client *RedisCachesClient) Get(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientGetOptions) (RedisCachesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, rootScope, redisCacheName, options)
	if err != nil {
		return RedisCachesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedisCachesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RedisCachesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *RedisCachesClient) getCreateRequest(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	if redisCacheName == "" {
		return nil, errors.New("parameter redisCacheName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisCacheName}", url.PathEscape(redisCacheName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RedisCachesClient) getHandleResponse(resp *http.Response) (RedisCachesClientGetResponse, error) {
	result := RedisCachesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RedisCacheResource); err != nil {
		return RedisCachesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List RedisCacheResource resources by resource group
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// options - RedisCachesClientListByResourceGroupOptions contains the optional parameters for the RedisCachesClient.ListByResourceGroup
// method.
func (client *RedisCachesClient) NewListByResourceGroupPager(rootScope string, options *RedisCachesClientListByResourceGroupOptions) (*runtime.Pager[RedisCachesClientListByResourceGroupResponse]) {
	return runtime.NewPager(runtime.PagingHandler[RedisCachesClientListByResourceGroupResponse]{
		More: func(page RedisCachesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RedisCachesClientListByResourceGroupResponse) (RedisCachesClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, rootScope, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return RedisCachesClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return RedisCachesClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return RedisCachesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *RedisCachesClient) listByResourceGroupCreateRequest(ctx context.Context, rootScope string, options *RedisCachesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *RedisCachesClient) listByResourceGroupHandleResponse(resp *http.Response) (RedisCachesClientListByResourceGroupResponse, error) {
	result := RedisCachesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RedisCacheResourceListResult); err != nil {
		return RedisCachesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// ListSecrets - Lists secrets values for the specified RedisCache resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// redisCacheName - The name of the RedisCache link resource
// options - RedisCachesClientListSecretsOptions contains the optional parameters for the RedisCachesClient.ListSecrets method.
func (client *RedisCachesClient) ListSecrets(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientListSecretsOptions) (RedisCachesClientListSecretsResponse, error) {
	req, err := client.listSecretsCreateRequest(ctx, rootScope, redisCacheName, options)
	if err != nil {
		return RedisCachesClientListSecretsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedisCachesClientListSecretsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RedisCachesClientListSecretsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listSecretsHandleResponse(resp)
}

// listSecretsCreateRequest creates the ListSecrets request.
func (client *RedisCachesClient) listSecretsCreateRequest(ctx context.Context, rootScope string, redisCacheName string, options *RedisCachesClientListSecretsOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}/listSecrets"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	if redisCacheName == "" {
		return nil, errors.New("parameter redisCacheName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisCacheName}", url.PathEscape(redisCacheName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSecretsHandleResponse handles the ListSecrets response.
func (client *RedisCachesClient) listSecretsHandleResponse(resp *http.Response) (RedisCachesClientListSecretsResponse, error) {
	result := RedisCachesClientListSecretsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RedisCacheListSecretsResult); err != nil {
		return RedisCachesClientListSecretsResponse{}, err
	}
	return result, nil
}

// Update - Update a RedisCacheResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// redisCacheName - The name of the RedisCache link resource
// properties - The resource properties to be updated.
// options - RedisCachesClientUpdateOptions contains the optional parameters for the RedisCachesClient.Update method.
func (client *RedisCachesClient) Update(ctx context.Context, rootScope string, redisCacheName string, properties RedisCacheResourceUpdate, options *RedisCachesClientUpdateOptions) (RedisCachesClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, rootScope, redisCacheName, properties, options)
	if err != nil {
		return RedisCachesClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedisCachesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RedisCachesClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *RedisCachesClient) updateCreateRequest(ctx context.Context, rootScope string, redisCacheName string, properties RedisCacheResourceUpdate, options *RedisCachesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/redisCaches/{redisCacheName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", rootScope)
	if redisCacheName == "" {
		return nil, errors.New("parameter redisCacheName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisCacheName}", url.PathEscape(redisCacheName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, properties)
}

// updateHandleResponse handles the Update response.
func (client *RedisCachesClient) updateHandleResponse(resp *http.Response) (RedisCachesClientUpdateResponse, error) {
	result := RedisCachesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RedisCacheResource); err != nil {
		return RedisCachesClientUpdateResponse{}, err
	}
	return result, nil
}

