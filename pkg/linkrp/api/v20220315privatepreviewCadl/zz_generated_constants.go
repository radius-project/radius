//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreviewCadl

const (
	moduleName = "v20220315privatepreviewCadl"
	moduleVersion = "v0.0.1"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{	
		ActionTypeInternal,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication CreatedByType = "Application"
	CreatedByTypeKey CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{	
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

type MongoDatabaseMode string

const (
	MongoDatabaseModeRecipe MongoDatabaseMode = "recipe"
	MongoDatabaseModeResource MongoDatabaseMode = "resource"
	MongoDatabaseModeValues MongoDatabaseMode = "values"
)

// PossibleMongoDatabaseModeValues returns the possible values for the MongoDatabaseMode const type.
func PossibleMongoDatabaseModeValues() []MongoDatabaseMode {
	return []MongoDatabaseMode{	
		MongoDatabaseModeRecipe,
		MongoDatabaseModeResource,
		MongoDatabaseModeValues,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem Origin = "system"
	OriginUser Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{	
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ProvisioningState - Provisioning state of the link at the time the operation was called
type ProvisioningState string

const (
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	ProvisioningStateFailed ProvisioningState = "Failed"
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{	
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

type RabbitmqMode string

const (
	RabbitmqModeRecipe RabbitmqMode = "recipe"
	RabbitmqModeValues RabbitmqMode = "values"
)

// PossibleRabbitmqModeValues returns the possible values for the RabbitmqMode const type.
func PossibleRabbitmqModeValues() []RabbitmqMode {
	return []RabbitmqMode{	
		RabbitmqModeRecipe,
		RabbitmqModeValues,
	}
}

type RedisCacheMode string

const (
	RedisCacheModeRecipe RedisCacheMode = "recipe"
	RedisCacheModeResource RedisCacheMode = "resource"
	RedisCacheModeValues RedisCacheMode = "values"
)

// PossibleRedisCacheModeValues returns the possible values for the RedisCacheMode const type.
func PossibleRedisCacheModeValues() []RedisCacheMode {
	return []RedisCacheMode{	
		RedisCacheModeRecipe,
		RedisCacheModeResource,
		RedisCacheModeValues,
	}
}

type SQLDatabaseMode string

const (
	SQLDatabaseModeRecipe SQLDatabaseMode = "recipe"
	SQLDatabaseModeResource SQLDatabaseMode = "resource"
	SQLDatabaseModeValues SQLDatabaseMode = "values"
)

// PossibleSQLDatabaseModeValues returns the possible values for the SQLDatabaseMode const type.
func PossibleSQLDatabaseModeValues() []SQLDatabaseMode {
	return []SQLDatabaseMode{	
		SQLDatabaseModeRecipe,
		SQLDatabaseModeResource,
		SQLDatabaseModeValues,
	}
}

