//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DaprStateStoreClient contains the methods for the DaprStateStore group.
// Don't use this type directly, use NewDaprStateStoreClient() instead.
type DaprStateStoreClient struct {
	host string
	rootScope string
	pl runtime.Pipeline
}

// NewDaprStateStoreClient creates a new instance of DaprStateStoreClient with the specified values.
// rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
// and Azure resource scope is
// /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewDaprStateStoreClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DaprStateStoreClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &DaprStateStoreClient{
		rootScope: rootScope,
		host: ep,
pl: pl,
	}
	return client, nil
}

// BeginCreate - Create a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// daprStateStoreName - DaprStateStore name
// resource - Resource create parameters.
// options - DaprStateStoreClientBeginCreateOptions contains the optional parameters for the DaprStateStoreClient.BeginCreate
// method.
func (client *DaprStateStoreClient) BeginCreate(ctx context.Context, daprStateStoreName string, resource DaprStateStoreResource, options *DaprStateStoreClientBeginCreateOptions) (*runtime.Poller[DaprStateStoreClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, daprStateStoreName, resource, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[DaprStateStoreClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DaprStateStoreClientCreateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Create - Create a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
func (client *DaprStateStoreClient) create(ctx context.Context, daprStateStoreName string, resource DaprStateStoreResource, options *DaprStateStoreClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, daprStateStoreName, resource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// createCreateRequest creates the Create request.
func (client *DaprStateStoreClient) createCreateRequest(ctx context.Context, daprStateStoreName string, resource DaprStateStoreResource, options *DaprStateStoreClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/daprStateStores/{daprStateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if daprStateStoreName == "" {
		return nil, errors.New("parameter daprStateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprStateStoreName}", url.PathEscape(daprStateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// BeginDelete - Delete a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// daprStateStoreName - DaprStateStore name
// options - DaprStateStoreClientBeginDeleteOptions contains the optional parameters for the DaprStateStoreClient.BeginDelete
// method.
func (client *DaprStateStoreClient) BeginDelete(ctx context.Context, daprStateStoreName string, options *DaprStateStoreClientBeginDeleteOptions) (*runtime.Poller[DaprStateStoreClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, daprStateStoreName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[DaprStateStoreClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DaprStateStoreClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Delete a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
func (client *DaprStateStoreClient) deleteOperation(ctx context.Context, daprStateStoreName string, options *DaprStateStoreClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, daprStateStoreName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DaprStateStoreClient) deleteCreateRequest(ctx context.Context, daprStateStoreName string, options *DaprStateStoreClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/daprStateStores/{daprStateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if daprStateStoreName == "" {
		return nil, errors.New("parameter daprStateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprStateStoreName}", url.PathEscape(daprStateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// daprStateStoreName - DaprStateStore name
// options - DaprStateStoreClientGetOptions contains the optional parameters for the DaprStateStoreClient.Get method.
func (client *DaprStateStoreClient) Get(ctx context.Context, daprStateStoreName string, options *DaprStateStoreClientGetOptions) (DaprStateStoreClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, daprStateStoreName, options)
	if err != nil {
		return DaprStateStoreClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DaprStateStoreClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprStateStoreClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DaprStateStoreClient) getCreateRequest(ctx context.Context, daprStateStoreName string, options *DaprStateStoreClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/daprStateStores/{daprStateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if daprStateStoreName == "" {
		return nil, errors.New("parameter daprStateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprStateStoreName}", url.PathEscape(daprStateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DaprStateStoreClient) getHandleResponse(resp *http.Response) (DaprStateStoreClientGetResponse, error) {
	result := DaprStateStoreClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprStateStoreResource); err != nil {
		return DaprStateStoreClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List DaprStateStoreResource resources by Scope
// Generated from API version 2022-03-15-privatepreview
// options - DaprStateStoreClientListByScopeOptions contains the optional parameters for the DaprStateStoreClient.ListByScope
// method.
func (client *DaprStateStoreClient) NewListByScopePager(options *DaprStateStoreClientListByScopeOptions) (*runtime.Pager[DaprStateStoreClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[DaprStateStoreClientListByScopeResponse]{
		More: func(page DaprStateStoreClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DaprStateStoreClientListByScopeResponse) (DaprStateStoreClientListByScopeResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByScopeCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DaprStateStoreClientListByScopeResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DaprStateStoreClientListByScopeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DaprStateStoreClientListByScopeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByScopeHandleResponse(resp)
		},
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *DaprStateStoreClient) listByScopeCreateRequest(ctx context.Context, options *DaprStateStoreClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/daprStateStores"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *DaprStateStoreClient) listByScopeHandleResponse(resp *http.Response) (DaprStateStoreClientListByScopeResponse, error) {
	result := DaprStateStoreClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprStateStoreResourceListResult); err != nil {
		return DaprStateStoreClientListByScopeResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// daprStateStoreName - DaprStateStore name
// properties - The resource properties to be updated.
// options - DaprStateStoreClientBeginUpdateOptions contains the optional parameters for the DaprStateStoreClient.BeginUpdate
// method.
func (client *DaprStateStoreClient) BeginUpdate(ctx context.Context, daprStateStoreName string, properties DaprStateStoreResourceUpdate, options *DaprStateStoreClientBeginUpdateOptions) (*runtime.Poller[DaprStateStoreClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, daprStateStoreName, properties, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[DaprStateStoreClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DaprStateStoreClientUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Update - Update a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
func (client *DaprStateStoreClient) update(ctx context.Context, daprStateStoreName string, properties DaprStateStoreResourceUpdate, options *DaprStateStoreClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, daprStateStoreName, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *DaprStateStoreClient) updateCreateRequest(ctx context.Context, daprStateStoreName string, properties DaprStateStoreResourceUpdate, options *DaprStateStoreClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/daprStateStores/{daprStateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if daprStateStoreName == "" {
		return nil, errors.New("parameter daprStateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprStateStoreName}", url.PathEscape(daprStateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, properties)
}

