//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RabbitMQMessageQueuesClient contains the methods for the RabbitMQMessageQueues group.
// Don't use this type directly, use NewRabbitMQMessageQueuesClient() instead.
type RabbitMQMessageQueuesClient struct {
	host string
	rootScope string
	pl runtime.Pipeline
}

// NewRabbitMQMessageQueuesClient creates a new instance of RabbitMQMessageQueuesClient with the specified values.
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewRabbitMQMessageQueuesClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*RabbitMQMessageQueuesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RabbitMQMessageQueuesClient{
		rootScope: rootScope,
		host: ep,
pl: pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a RabbitMQMessageQueue resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQMessageQueueName - The name of the RabbitMQMessageQueue link resource
// rabbitMQMessageQueueParameters - rabbitMQMessageQueue create parameters
// options - RabbitMQMessageQueuesClientCreateOrUpdateOptions contains the optional parameters for the RabbitMQMessageQueuesClient.CreateOrUpdate
// method.
func (client *RabbitMQMessageQueuesClient) CreateOrUpdate(ctx context.Context, rabbitMQMessageQueueName string, rabbitMQMessageQueueParameters RabbitMQMessageQueueResource, options *RabbitMQMessageQueuesClientCreateOrUpdateOptions) (RabbitMQMessageQueuesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, rabbitMQMessageQueueName, rabbitMQMessageQueueParameters, options)
	if err != nil {
		return RabbitMQMessageQueuesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMQMessageQueuesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return RabbitMQMessageQueuesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RabbitMQMessageQueuesClient) createOrUpdateCreateRequest(ctx context.Context, rabbitMQMessageQueueName string, rabbitMQMessageQueueParameters RabbitMQMessageQueueResource, options *RabbitMQMessageQueuesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQMessageQueueName == "" {
		return nil, errors.New("parameter rabbitMQMessageQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQMessageQueueName}", url.PathEscape(rabbitMQMessageQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, rabbitMQMessageQueueParameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *RabbitMQMessageQueuesClient) createOrUpdateHandleResponse(resp *http.Response) (RabbitMQMessageQueuesClientCreateOrUpdateResponse, error) {
	result := RabbitMQMessageQueuesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQMessageQueueResource); err != nil {
		return RabbitMQMessageQueuesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an existing rabbitMQMessageQueue resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQMessageQueueName - The name of the RabbitMQMessageQueue link resource
// options - RabbitMQMessageQueuesClientDeleteOptions contains the optional parameters for the RabbitMQMessageQueuesClient.Delete
// method.
func (client *RabbitMQMessageQueuesClient) Delete(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientDeleteOptions) (RabbitMQMessageQueuesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, rabbitMQMessageQueueName, options)
	if err != nil {
		return RabbitMQMessageQueuesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMQMessageQueuesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return RabbitMQMessageQueuesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return RabbitMQMessageQueuesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *RabbitMQMessageQueuesClient) deleteCreateRequest(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQMessageQueueName == "" {
		return nil, errors.New("parameter rabbitMQMessageQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQMessageQueueName}", url.PathEscape(rabbitMQMessageQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves information about a rabbitMQMessageQueue resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQMessageQueueName - The name of the RabbitMQMessageQueue link resource
// options - RabbitMQMessageQueuesClientGetOptions contains the optional parameters for the RabbitMQMessageQueuesClient.Get
// method.
func (client *RabbitMQMessageQueuesClient) Get(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientGetOptions) (RabbitMQMessageQueuesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, rabbitMQMessageQueueName, options)
	if err != nil {
		return RabbitMQMessageQueuesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMQMessageQueuesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RabbitMQMessageQueuesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *RabbitMQMessageQueuesClient) getCreateRequest(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQMessageQueueName == "" {
		return nil, errors.New("parameter rabbitMQMessageQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQMessageQueueName}", url.PathEscape(rabbitMQMessageQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RabbitMQMessageQueuesClient) getHandleResponse(resp *http.Response) (RabbitMQMessageQueuesClientGetResponse, error) {
	result := RabbitMQMessageQueuesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQMessageQueueResource); err != nil {
		return RabbitMQMessageQueuesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByRootScopePager - Lists information about all rabbitMQMessageQueue resources in the given root scope
// Generated from API version 2022-03-15-privatepreview
// options - RabbitMQMessageQueuesClientListByRootScopeOptions contains the optional parameters for the RabbitMQMessageQueuesClient.ListByRootScope
// method.
func (client *RabbitMQMessageQueuesClient) NewListByRootScopePager(options *RabbitMQMessageQueuesClientListByRootScopeOptions) (*runtime.Pager[RabbitMQMessageQueuesClientListByRootScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[RabbitMQMessageQueuesClientListByRootScopeResponse]{
		More: func(page RabbitMQMessageQueuesClientListByRootScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RabbitMQMessageQueuesClientListByRootScopeResponse) (RabbitMQMessageQueuesClientListByRootScopeResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByRootScopeCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return RabbitMQMessageQueuesClientListByRootScopeResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return RabbitMQMessageQueuesClientListByRootScopeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return RabbitMQMessageQueuesClientListByRootScopeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByRootScopeHandleResponse(resp)
		},
	})
}

// listByRootScopeCreateRequest creates the ListByRootScope request.
func (client *RabbitMQMessageQueuesClient) listByRootScopeCreateRequest(ctx context.Context, options *RabbitMQMessageQueuesClientListByRootScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByRootScopeHandleResponse handles the ListByRootScope response.
func (client *RabbitMQMessageQueuesClient) listByRootScopeHandleResponse(resp *http.Response) (RabbitMQMessageQueuesClientListByRootScopeResponse, error) {
	result := RabbitMQMessageQueuesClientListByRootScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQMessageQueueList); err != nil {
		return RabbitMQMessageQueuesClientListByRootScopeResponse{}, err
	}
	return result, nil
}

// ListSecrets - Lists secrets values for the specified RabbitMQMessageQueue resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQMessageQueueName - The name of the RabbitMQMessageQueue link resource
// options - RabbitMQMessageQueuesClientListSecretsOptions contains the optional parameters for the RabbitMQMessageQueuesClient.ListSecrets
// method.
func (client *RabbitMQMessageQueuesClient) ListSecrets(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientListSecretsOptions) (RabbitMQMessageQueuesClientListSecretsResponse, error) {
	req, err := client.listSecretsCreateRequest(ctx, rabbitMQMessageQueueName, options)
	if err != nil {
		return RabbitMQMessageQueuesClientListSecretsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMQMessageQueuesClientListSecretsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RabbitMQMessageQueuesClientListSecretsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listSecretsHandleResponse(resp)
}

// listSecretsCreateRequest creates the ListSecrets request.
func (client *RabbitMQMessageQueuesClient) listSecretsCreateRequest(ctx context.Context, rabbitMQMessageQueueName string, options *RabbitMQMessageQueuesClientListSecretsOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Link/rabbitMQMessageQueues/{rabbitMQMessageQueueName}/listSecrets"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQMessageQueueName == "" {
		return nil, errors.New("parameter rabbitMQMessageQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQMessageQueueName}", url.PathEscape(rabbitMQMessageQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSecretsHandleResponse handles the ListSecrets response.
func (client *RabbitMQMessageQueuesClient) listSecretsHandleResponse(resp *http.Response) (RabbitMQMessageQueuesClientListSecretsResponse, error) {
	result := RabbitMQMessageQueuesClientListSecretsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQSecrets); err != nil {
		return RabbitMQMessageQueuesClientListSecretsResponse{}, err
	}
	return result, nil
}

