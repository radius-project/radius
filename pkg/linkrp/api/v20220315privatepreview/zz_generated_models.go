//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import "time"

// BasicDaprResourceProperties - Basic properties of a Dapr component object.
type BasicDaprResourceProperties struct {
	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`
}

// BasicResourceProperties - Basic properties of a Radius resource.
type BasicResourceProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// DaprInvokeHTTPRouteList - Object that includes an array of DaprInvokeHttpRoute and a possible link for next set
type DaprInvokeHTTPRouteList struct {
	// The link used to fetch the next page of DaprInvokeHttpRoute list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprInvokeHttpRoute resources
	Value []*DaprInvokeHTTPRouteResource `json:"value,omitempty"`
}

// DaprInvokeHTTPRouteProperties - DaprInvokeHttpRoute link properties
type DaprInvokeHTTPRouteProperties struct {
	// REQUIRED; The Dapr appId used for the route
	AppID *string `json:"appId,omitempty"`

	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the daprInvokeHttpRoute link
	Recipe *Recipe `json:"recipe,omitempty"`

	// READ-ONLY; Provisioning state of the daprInvokeHttpRoute link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// DaprInvokeHTTPRouteResource - DaprInvokeHttpRoute link
type DaprInvokeHTTPRouteResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; DaprInvokeHttpRoute link properties
	Properties *DaprInvokeHTTPRouteProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DaprInvokeHTTPRoutesClientCreateOrUpdateOptions contains the optional parameters for the DaprInvokeHTTPRoutesClient.CreateOrUpdate
// method.
type DaprInvokeHTTPRoutesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesClientDeleteOptions contains the optional parameters for the DaprInvokeHTTPRoutesClient.Delete method.
type DaprInvokeHTTPRoutesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesClientGetOptions contains the optional parameters for the DaprInvokeHTTPRoutesClient.Get method.
type DaprInvokeHTTPRoutesClientGetOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesClientListByRootScopeOptions contains the optional parameters for the DaprInvokeHTTPRoutesClient.ListByRootScope
// method.
type DaprInvokeHTTPRoutesClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokerList - Object that includes an array of DaprPubSubBroker and a possible link for next set
type DaprPubSubBrokerList struct {
	// The link used to fetch the next page of DaprPubSubBroker list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprPubSubBroker resources
	Value []*DaprPubSubBrokerResource `json:"value,omitempty"`
}

// DaprPubSubBrokerPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDaprPubSubBrokerProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DaprPubSubBrokerProperties, *RecipeDaprPubSubProperties, *ResourceDaprPubSubProperties, *ValuesDaprPubSubProperties
type DaprPubSubBrokerPropertiesClassification interface {
	// GetDaprPubSubBrokerProperties returns the DaprPubSubBrokerProperties content of the underlying type.
	GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties
}

// DaprPubSubBrokerProperties - DaprPubSubBroker link properties
type DaprPubSubBrokerProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprPubSubBrokerPropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Topic name of the Azure ServiceBus resource
	Topic *string `json:"topic,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprPubSubBroker link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprPubSubBrokerProperties implements the DaprPubSubBrokerPropertiesClassification interface for type DaprPubSubBrokerProperties.
func (d *DaprPubSubBrokerProperties) GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties { return d }

// DaprPubSubBrokerResource - DaprPubSubBroker link
type DaprPubSubBrokerResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; DaprPubSubBroker link properties
	Properties DaprPubSubBrokerPropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DaprPubSubBrokersClientCreateOrUpdateOptions contains the optional parameters for the DaprPubSubBrokersClient.CreateOrUpdate
// method.
type DaprPubSubBrokersClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersClientDeleteOptions contains the optional parameters for the DaprPubSubBrokersClient.Delete method.
type DaprPubSubBrokersClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersClientGetOptions contains the optional parameters for the DaprPubSubBrokersClient.Get method.
type DaprPubSubBrokersClientGetOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersClientListByRootScopeOptions contains the optional parameters for the DaprPubSubBrokersClient.ListByRootScope
// method.
type DaprPubSubBrokersClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoreList - Object that includes an array of DaprSecretStore and a possible link for next set
type DaprSecretStoreList struct {
	// The link used to fetch the next page of DaprSecretStore list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprSecretStore resources
	Value []*DaprSecretStoreResource `json:"value,omitempty"`
}

// DaprSecretStorePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDaprSecretStoreProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DaprSecretStoreProperties, *RecipeDaprSecretStoreProperties, *ValuesDaprSecretStoreProperties
type DaprSecretStorePropertiesClassification interface {
	// GetDaprSecretStoreProperties returns the DaprSecretStoreProperties content of the underlying type.
	GetDaprSecretStoreProperties() *DaprSecretStoreProperties
}

// DaprSecretStoreProperties - DaprSecretStore link properties
type DaprSecretStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *DaprSecretStorePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the dapr secret store link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprSecretStoreProperties implements the DaprSecretStorePropertiesClassification interface for type DaprSecretStoreProperties.
func (d *DaprSecretStoreProperties) GetDaprSecretStoreProperties() *DaprSecretStoreProperties { return d }

// DaprSecretStoreResource - DaprSecretStore link
type DaprSecretStoreResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; DaprSecretStore link properties
	Properties DaprSecretStorePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DaprSecretStoresClientCreateOrUpdateOptions contains the optional parameters for the DaprSecretStoresClient.CreateOrUpdate
// method.
type DaprSecretStoresClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresClientDeleteOptions contains the optional parameters for the DaprSecretStoresClient.Delete method.
type DaprSecretStoresClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresClientGetOptions contains the optional parameters for the DaprSecretStoresClient.Get method.
type DaprSecretStoresClientGetOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresClientListByRootScopeOptions contains the optional parameters for the DaprSecretStoresClient.ListByRootScope
// method.
type DaprSecretStoresClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoreList - Object that includes an array of DaprStateStore and a possible link for next set
type DaprStateStoreList struct {
	// The link used to fetch the next page of DaprStateStore list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprStateStore resources
	Value []*DaprStateStoreResource `json:"value,omitempty"`
}

// DaprStateStorePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDaprStateStoreProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DaprStateStoreProperties, *RecipeDaprStateStoreProperties, *ResourceDaprStateStoreResourceProperties, *ValuesDaprStateStoreResourceProperties
type DaprStateStorePropertiesClassification interface {
	// GetDaprStateStoreProperties returns the DaprStateStoreProperties content of the underlying type.
	GetDaprStateStoreProperties() *DaprStateStoreProperties
}

// DaprStateStoreProperties - DaprStateStore link properties
type DaprStateStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprStateStorePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprStateStore link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprStateStoreProperties implements the DaprStateStorePropertiesClassification interface for type DaprStateStoreProperties.
func (d *DaprStateStoreProperties) GetDaprStateStoreProperties() *DaprStateStoreProperties { return d }

// DaprStateStoreResource - DaprStateStore link
type DaprStateStoreResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; DaprStateStore link properties
	Properties DaprStateStorePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DaprStateStoresClientCreateOrUpdateOptions contains the optional parameters for the DaprStateStoresClient.CreateOrUpdate
// method.
type DaprStateStoresClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresClientDeleteOptions contains the optional parameters for the DaprStateStoresClient.Delete method.
type DaprStateStoresClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresClientGetOptions contains the optional parameters for the DaprStateStoresClient.Get method.
type DaprStateStoresClientGetOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresClientListByRootScopeOptions contains the optional parameters for the DaprStateStoresClient.ListByRootScope
// method.
type DaprStateStoresClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail `json:"error,omitempty"`
}

// ExtenderList - Object that includes an array of Extender and a possible link for next set
type ExtenderList struct {
	// The link used to fetch the next page of Extender list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Extender resources
	Value []*ExtenderResponseResource `json:"value,omitempty"`
}

// ExtenderProperties - Extender link properties
type ExtenderProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The secret values for the given Extender resource
	Secrets map[string]interface{} `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the extender link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// ExtenderResource - Extender link
type ExtenderResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Extender link properties
	Properties *ExtenderProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExtenderResponseProperties - Extender link properties
type ExtenderResponseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the extender link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// ExtenderResponseResource - Extender link
type ExtenderResponseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Extender link properties
	Properties *ExtenderResponseProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExtendersClientCreateOrUpdateOptions contains the optional parameters for the ExtendersClient.CreateOrUpdate method.
type ExtendersClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExtendersClientDeleteOptions contains the optional parameters for the ExtendersClient.Delete method.
type ExtendersClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExtendersClientGetOptions contains the optional parameters for the ExtendersClient.Get method.
type ExtendersClientGetOptions struct {
	// placeholder for future optional parameters
}

// ExtendersClientListByRootScopeOptions contains the optional parameters for the ExtendersClient.ListByRootScope method.
type ExtendersClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// ExtendersClientListSecretsOptions contains the optional parameters for the ExtendersClient.ListSecrets method.
type ExtendersClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabaseList - Object that includes an array of Mongo database and a possible link for next set
type MongoDatabaseList struct {
	// The link used to fetch the next page of Mongo database list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Mongo database resources
	Value []*MongoDatabaseResource `json:"value,omitempty"`
}

// MongoDatabasePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetMongoDatabaseProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *MongoDatabaseProperties, *RecipeMongoDatabaseProperties, *ResourceMongoDatabaseProperties, *ValuesMongoDatabaseProperties
type MongoDatabasePropertiesClassification interface {
	// GetMongoDatabaseProperties returns the MongoDatabaseProperties content of the underlying type.
	GetMongoDatabaseProperties() *MongoDatabaseProperties
}

// MongoDatabaseProperties - Mongo database link properties
type MongoDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Mongo database link. Options are to build automatically via 'recipe' or 'resource', or build
// manually via 'values'. Selection determines which set of fields to additionally require.
	Mode *MongoDatabasePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Secrets values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the mongo database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetMongoDatabaseProperties implements the MongoDatabasePropertiesClassification interface for type MongoDatabaseProperties.
func (m *MongoDatabaseProperties) GetMongoDatabaseProperties() *MongoDatabaseProperties { return m }

// MongoDatabaseResource - MongoDatabase link
type MongoDatabaseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Mongo database link properties
	Properties MongoDatabasePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MongoDatabaseSecrets - The secret values for the given Mongo database resource
type MongoDatabaseSecrets struct {
	// Connection string used to connect to the target Mongo database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Mongo database
	Password *string `json:"password,omitempty"`

	// Username to use when connecting to the target Mongo database
	Username *string `json:"username,omitempty"`
}

// MongoDatabasesClientCreateOrUpdateOptions contains the optional parameters for the MongoDatabasesClient.CreateOrUpdate
// method.
type MongoDatabasesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientDeleteOptions contains the optional parameters for the MongoDatabasesClient.Delete method.
type MongoDatabasesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientGetOptions contains the optional parameters for the MongoDatabasesClient.Get method.
type MongoDatabasesClientGetOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientListByRootScopeOptions contains the optional parameters for the MongoDatabasesClient.ListByRootScope
// method.
type MongoDatabasesClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientListSecretsOptions contains the optional parameters for the MongoDatabasesClient.ListSecrets method.
type MongoDatabasesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueueList - Object that includes an array of RabbitMQMessageQueue and a possible link for next set
type RabbitMQMessageQueueList struct {
	// The link used to fetch the next page of RabbitMQMessageQueue list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of RabbitMQMessageQueue resources
	Value []*RabbitMQMessageQueueResource `json:"value,omitempty"`
}

// RabbitMQMessageQueuePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetRabbitMQMessageQueueProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *RabbitMQMessageQueueProperties, *RecipeRabbitMQMessageQueueProperties, *ValuesRabbitMQMessageQueueProperties
type RabbitMQMessageQueuePropertiesClassification interface {
	// GetRabbitMQMessageQueueProperties returns the RabbitMQMessageQueueProperties content of the underlying type.
	GetRabbitMQMessageQueueProperties() *RabbitMQMessageQueueProperties
}

// RabbitMQMessageQueueProperties - RabbitMQMessageQueue link response properties
type RabbitMQMessageQueueProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *RabbitMQMessageQueuePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Secrets provided by resources,
	Secrets *RabbitMQSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the rabbitMQ message queue link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetRabbitMQMessageQueueProperties implements the RabbitMQMessageQueuePropertiesClassification interface for type RabbitMQMessageQueueProperties.
func (r *RabbitMQMessageQueueProperties) GetRabbitMQMessageQueueProperties() *RabbitMQMessageQueueProperties { return r }

// RabbitMQMessageQueueResource - RabbitMQMessageQueue link
type RabbitMQMessageQueueResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; RabbitMQMessageQueue link response properties
	Properties RabbitMQMessageQueuePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RabbitMQMessageQueuesClientCreateOrUpdateOptions contains the optional parameters for the RabbitMQMessageQueuesClient.CreateOrUpdate
// method.
type RabbitMQMessageQueuesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesClientDeleteOptions contains the optional parameters for the RabbitMQMessageQueuesClient.Delete method.
type RabbitMQMessageQueuesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesClientGetOptions contains the optional parameters for the RabbitMQMessageQueuesClient.Get method.
type RabbitMQMessageQueuesClientGetOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesClientListByRootScopeOptions contains the optional parameters for the RabbitMQMessageQueuesClient.ListByRootScope
// method.
type RabbitMQMessageQueuesClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesClientListSecretsOptions contains the optional parameters for the RabbitMQMessageQueuesClient.ListSecrets
// method.
type RabbitMQMessageQueuesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQSecrets - The secret values for the given RabbitMQMessageQueue resource
type RabbitMQSecrets struct {
	// The connection string used to connect to this RabbitMQ instance
	ConnectionString *string `json:"connectionString,omitempty"`
}

// Recipe - The recipe used to automatically deploy underlying infrastructure for a link
type Recipe struct {
	// REQUIRED; The name of the recipe within the environment to use
	Name *string `json:"name,omitempty"`

	// Key/value parameters to pass into the recipe at deployment
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

type RecipeDaprPubSubProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprPubSubBrokerPropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the daprPubSub link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Metadata for the pub sub resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// PubSub resource
	Resource *string `json:"resource,omitempty"`

	// Topic name of the Azure ServiceBus resource
	Topic *string `json:"topic,omitempty"`

	// Dapr PubSub type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// Dapr component version
	Version *string `json:"version,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprPubSubBroker link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprPubSubBrokerProperties implements the DaprPubSubBrokerPropertiesClassification interface for type RecipeDaprPubSubProperties.
func (r *RecipeDaprPubSubProperties) GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties {
	return &DaprPubSubBrokerProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Topic: r.Topic,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
		ComponentName: r.ComponentName,
	}
}

type RecipeDaprSecretStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *DaprSecretStorePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the daprSecretStore link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Metadata for the Secret Store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Dapr Secret Store type. These strings match the types defined in Dapr Component format: https://docs.dapr.io/reference/components-reference/supported-secret-stores/
	Type *string `json:"type,omitempty"`

	// Dapr component version
	Version *string `json:"version,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the dapr secret store link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprSecretStoreProperties implements the DaprSecretStorePropertiesClassification interface for type RecipeDaprSecretStoreProperties.
func (r *RecipeDaprSecretStoreProperties) GetDaprSecretStoreProperties() *DaprSecretStoreProperties {
	return &DaprSecretStoreProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
		ComponentName: r.ComponentName,
	}
}

type RecipeDaprStateStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprStateStorePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the daprStateStore link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Metadata for the state store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// The resource id of the Azure SQL Database or Azure Table Storage the daprStateStore resource is connected to.
	Resource *string `json:"resource,omitempty"`

	// Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// Dapr component version
	Version *string `json:"version,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprStateStore link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprStateStoreProperties implements the DaprStateStorePropertiesClassification interface for type RecipeDaprStateStoreProperties.
func (r *RecipeDaprStateStoreProperties) GetDaprStateStoreProperties() *DaprStateStoreProperties {
	return &DaprStateStoreProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
		ComponentName: r.ComponentName,
	}
}

type RecipeMongoDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Mongo database link. Options are to build automatically via 'recipe' or 'resource', or build
// manually via 'values'. Selection determines which set of fields to additionally require.
	Mode *MongoDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the mongodatabase link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// Secrets values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Database name of the target Mongo database
	Database *string `json:"database,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the mongo database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetMongoDatabaseProperties implements the MongoDatabasePropertiesClassification interface for type RecipeMongoDatabaseProperties.
func (r *RecipeMongoDatabaseProperties) GetMongoDatabaseProperties() *MongoDatabaseProperties {
	return &MongoDatabaseProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Secrets: r.Secrets,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

type RecipeRabbitMQMessageQueueProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *RabbitMQMessageQueuePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the rabbitmq link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The name of the queue
	Queue *string `json:"queue,omitempty"`

	// Secrets provided by resources,
	Secrets *RabbitMQSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the rabbitMQ message queue link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetRabbitMQMessageQueueProperties implements the RabbitMQMessageQueuePropertiesClassification interface for type RecipeRabbitMQMessageQueueProperties.
func (r *RecipeRabbitMQMessageQueueProperties) GetRabbitMQMessageQueueProperties() *RabbitMQMessageQueueProperties {
	return &RabbitMQMessageQueueProperties{
		ProvisioningState: r.ProvisioningState,
		Secrets: r.Secrets,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

type RecipeRedisCacheProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Redis cache Link. Options are to build automatically via 'recipe' or 'resource', or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *RedisCachePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the Redis cache link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The host name of the target Redis cache
	Host *string `json:"host,omitempty"`

	// The port value of the target Redis cache
	Port *int32 `json:"port,omitempty"`

	// The secret values for the given Redis cache resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the Redis cache link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The username for Redis cache
	Username *string `json:"username,omitempty" azure:"ro"`
}

// GetRedisCacheProperties implements the RedisCachePropertiesClassification interface for type RecipeRedisCacheProperties.
func (r *RecipeRedisCacheProperties) GetRedisCacheProperties() *RedisCacheProperties {
	return &RedisCacheProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Secrets: r.Secrets,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

type RecipeSQLDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or 'resource', or build manually via 'values'.
// Selection determines which set of fields to additionally require.
	Mode *SQLDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The recipe used to automatically deploy underlying infrastructure for the SQL database link
	Recipe *Recipe `json:"recipe,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The name of the SQL database.
	Database *string `json:"database,omitempty"`

	// The fully qualified domain name of the SQL database.
	Server *string `json:"server,omitempty"`

	// READ-ONLY; Provisioning state of the SQL database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetSQLDatabaseProperties implements the SQLDatabasePropertiesClassification interface for type RecipeSQLDatabaseProperties.
func (r *RecipeSQLDatabaseProperties) GetSQLDatabaseProperties() *SQLDatabaseProperties {
	return &SQLDatabaseProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

// RedisCacheList - Object that includes an array of Redis cache and a possible link for next set
type RedisCacheList struct {
	// The link used to fetch the next page of Redis cache list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of RedisCache resources
	Value []*RedisCacheResource `json:"value,omitempty"`
}

// RedisCachePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetRedisCacheProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *RecipeRedisCacheProperties, *RedisCacheProperties, *ResourceRedisCacheProperties, *ValuesRedisCacheProperties
type RedisCachePropertiesClassification interface {
	// GetRedisCacheProperties returns the RedisCacheProperties content of the underlying type.
	GetRedisCacheProperties() *RedisCacheProperties
}

// RedisCacheProperties - Redis cache link properties
type RedisCacheProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Redis cache Link. Options are to build automatically via 'recipe' or 'resource', or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *RedisCachePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The secret values for the given Redis cache resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the Redis cache link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetRedisCacheProperties implements the RedisCachePropertiesClassification interface for type RedisCacheProperties.
func (r *RedisCacheProperties) GetRedisCacheProperties() *RedisCacheProperties { return r }

// RedisCacheResource - Redis cache link
type RedisCacheResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Redis cache link properties
	Properties RedisCachePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RedisCacheSecrets - The secret values for the given Redis cache resource
type RedisCacheSecrets struct {
	// The connection string used to connect to the Redis cache
	ConnectionString *string `json:"connectionString,omitempty"`

	// The password for this Redis cache instance
	Password *string `json:"password,omitempty"`
}

// RedisCachesClientCreateOrUpdateOptions contains the optional parameters for the RedisCachesClient.CreateOrUpdate method.
type RedisCachesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientDeleteOptions contains the optional parameters for the RedisCachesClient.Delete method.
type RedisCachesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientGetOptions contains the optional parameters for the RedisCachesClient.Get method.
type RedisCachesClientGetOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientListByRootScopeOptions contains the optional parameters for the RedisCachesClient.ListByRootScope method.
type RedisCachesClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientListSecretsOptions contains the optional parameters for the RedisCachesClient.ListSecrets method.
type RedisCachesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

type ResourceDaprPubSubProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The DaprPubSubProperties kind
	Kind *ResourceDaprPubSubPropertiesKind `json:"kind,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprPubSubBrokerPropertiesMode `json:"mode,omitempty"`

	// REQUIRED; PubSub resource
	Resource *string `json:"resource,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Metadata for the pub sub resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Topic name of the Azure ServiceBus resource
	Topic *string `json:"topic,omitempty"`

	// Dapr PubSub type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// Dapr component version
	Version *string `json:"version,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprPubSubBroker link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprPubSubBrokerProperties implements the DaprPubSubBrokerPropertiesClassification interface for type ResourceDaprPubSubProperties.
func (r *ResourceDaprPubSubProperties) GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties {
	return &DaprPubSubBrokerProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Topic: r.Topic,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
		ComponentName: r.ComponentName,
	}
}

type ResourceDaprStateStoreResourceProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The Dapr StateStore kind
	Kind *ResourceDaprStateStoreResourcePropertiesKind `json:"kind,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprStateStorePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The resource id of the Azure SQL Database or Azure Table Storage the daprStateStore resource is connected to.
	Resource *string `json:"resource,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Metadata for the state store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// Dapr component version
	Version *string `json:"version,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprStateStore link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprStateStoreProperties implements the DaprStateStorePropertiesClassification interface for type ResourceDaprStateStoreResourceProperties.
func (r *ResourceDaprStateStoreResourceProperties) GetDaprStateStoreProperties() *DaprStateStoreProperties {
	return &DaprStateStoreProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
		ComponentName: r.ComponentName,
	}
}

type ResourceMongoDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Mongo database link. Options are to build automatically via 'recipe' or 'resource', or build
// manually via 'values'. Selection determines which set of fields to additionally require.
	Mode *MongoDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Fully qualified resource ID of a supported resource with Mongo API to use for this link
	Resource *string `json:"resource,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// Secrets values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Database name of the target Mongo database
	Database *string `json:"database,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the mongo database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetMongoDatabaseProperties implements the MongoDatabasePropertiesClassification interface for type ResourceMongoDatabaseProperties.
func (r *ResourceMongoDatabaseProperties) GetMongoDatabaseProperties() *MongoDatabaseProperties {
	return &MongoDatabaseProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Secrets: r.Secrets,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

type ResourceRedisCacheProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the Redis cache Link. Options are to build automatically via 'recipe' or 'resource', or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *RedisCachePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Fully qualified resource ID of a supported resource with Redis API to use for this link
	Resource *string `json:"resource,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The host name of the target Redis cache
	Host *string `json:"host,omitempty"`

	// The port value of the target Redis cache
	Port *int32 `json:"port,omitempty"`

	// The secret values for the given Redis cache resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the Redis cache link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The username for Redis cache
	Username *string `json:"username,omitempty" azure:"ro"`
}

// GetRedisCacheProperties implements the RedisCachePropertiesClassification interface for type ResourceRedisCacheProperties.
func (r *ResourceRedisCacheProperties) GetRedisCacheProperties() *RedisCacheProperties {
	return &RedisCacheProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Secrets: r.Secrets,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

type ResourceSQLDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or 'resource', or build manually via 'values'.
// Selection determines which set of fields to additionally require.
	Mode *SQLDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Fully qualified resource ID of a supported resource with SQL API to use for this link
	Resource *string `json:"resource,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The name of the SQL database.
	Database *string `json:"database,omitempty"`

	// The fully qualified domain name of the SQL database.
	Server *string `json:"server,omitempty"`

	// READ-ONLY; Provisioning state of the SQL database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetSQLDatabaseProperties implements the SQLDatabasePropertiesClassification interface for type ResourceSQLDatabaseProperties.
func (r *ResourceSQLDatabaseProperties) GetSQLDatabaseProperties() *SQLDatabaseProperties {
	return &SQLDatabaseProperties{
		ProvisioningState: r.ProvisioningState,
		Mode: r.Mode,
		Status: r.Status,
		Environment: r.Environment,
		Application: r.Application,
	}
}

// ResourceStatus - Status of a resource.
type ResourceStatus struct {
	OutputResources []map[string]interface{} `json:"outputResources,omitempty"`
}

// SQLDatabaseList - Object that includes an array of SQLDatabase and a possible link for next set
type SQLDatabaseList struct {
	// The link used to fetch the next page of SQLDatabase list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of SQLDatabase resources
	Value []*SQLDatabaseResource `json:"value,omitempty"`
}

// SQLDatabasePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetSQLDatabaseProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *RecipeSQLDatabaseProperties, *ResourceSQLDatabaseProperties, *SQLDatabaseProperties, *ValuesSQLDatabaseProperties
type SQLDatabasePropertiesClassification interface {
	// GetSQLDatabaseProperties returns the SQLDatabaseProperties content of the underlying type.
	GetSQLDatabaseProperties() *SQLDatabaseProperties
}

// SQLDatabaseProperties - SQLDatabase link properties
type SQLDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or 'resource', or build manually via 'values'.
// Selection determines which set of fields to additionally require.
	Mode *SQLDatabasePropertiesMode `json:"mode,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the SQL database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetSQLDatabaseProperties implements the SQLDatabasePropertiesClassification interface for type SQLDatabaseProperties.
func (s *SQLDatabaseProperties) GetSQLDatabaseProperties() *SQLDatabaseProperties { return s }

// SQLDatabaseResource - SQLDatabse link
type SQLDatabaseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; SQLDatabase link properties
	Properties SQLDatabasePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SQLDatabasesClientCreateOrUpdateOptions contains the optional parameters for the SQLDatabasesClient.CreateOrUpdate method.
type SQLDatabasesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesClientDeleteOptions contains the optional parameters for the SQLDatabasesClient.Delete method.
type SQLDatabasesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesClientGetOptions contains the optional parameters for the SQLDatabasesClient.Get method.
type SQLDatabasesClientGetOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesClientListByRootScopeOptions contains the optional parameters for the SQLDatabasesClient.ListByRootScope method.
type SQLDatabasesClientListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

type ValuesDaprPubSubProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The DaprPubSubProperties kind
	Kind *ValuesDaprPubSubPropertiesKind `json:"kind,omitempty"`

	// REQUIRED; Metadata for the pub sub resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprPubSubBrokerPropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Dapr PubSub type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// PubSub resource
	Resource *string `json:"resource,omitempty"`

	// Topic name of the Azure ServiceBus resource
	Topic *string `json:"topic,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprPubSubBroker link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprPubSubBrokerProperties implements the DaprPubSubBrokerPropertiesClassification interface for type ValuesDaprPubSubProperties.
func (v *ValuesDaprPubSubProperties) GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties {
	return &DaprPubSubBrokerProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Topic: v.Topic,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
		ComponentName: v.ComponentName,
	}
}

type ValuesDaprSecretStoreProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; Radius kind for Dapr Secret Store
	Kind *ValuesDaprSecretStorePropertiesKind `json:"kind,omitempty"`

	// REQUIRED; Metadata for the Secret Store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *DaprSecretStorePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Dapr Secret Store type. These strings match the types defined in Dapr Component format: https://docs.dapr.io/reference/components-reference/supported-secret-stores/
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the dapr secret store link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprSecretStoreProperties implements the DaprSecretStorePropertiesClassification interface for type ValuesDaprSecretStoreProperties.
func (v *ValuesDaprSecretStoreProperties) GetDaprSecretStoreProperties() *DaprSecretStoreProperties {
	return &DaprSecretStoreProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
		ComponentName: v.ComponentName,
	}
}

type ValuesDaprStateStoreResourceProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The Dapr StateStore kind
	Kind *ValuesDaprStateStoreResourcePropertiesKind `json:"kind,omitempty"`

	// REQUIRED; Metadata for the state store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe', build via 'resource' or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *DaprStateStorePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The resource id of the Azure SQL Database or Azure Table Storage the daprStateStore resource is connected to.
	Resource *string `json:"resource,omitempty"`

	// READ-ONLY; The name of the Dapr component object. Use this value in your code when interacting with the Dapr client to
// use the Dapr component.
	ComponentName *string `json:"componentName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the daprStateStore link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetDaprStateStoreProperties implements the DaprStateStorePropertiesClassification interface for type ValuesDaprStateStoreResourceProperties.
func (v *ValuesDaprStateStoreResourceProperties) GetDaprStateStoreProperties() *DaprStateStoreProperties {
	return &DaprStateStoreProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
		ComponentName: v.ComponentName,
	}
}

type ValuesMongoDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// REQUIRED; How to build the Mongo database link. Options are to build automatically via 'recipe' or 'resource', or build
// manually via 'values'. Selection determines which set of fields to additionally require.
	Mode *MongoDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Secrets values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Database name of the target Mongo database
	Database *string `json:"database,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the mongo database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetMongoDatabaseProperties implements the MongoDatabasePropertiesClassification interface for type ValuesMongoDatabaseProperties.
func (v *ValuesMongoDatabaseProperties) GetMongoDatabaseProperties() *MongoDatabaseProperties {
	return &MongoDatabaseProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Secrets: v.Secrets,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
	}
}

type ValuesRabbitMQMessageQueueProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or build manually via 'values'. Selection
// determines which set of fields to additionally require.
	Mode *RabbitMQMessageQueuePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The name of the queue
	Queue *string `json:"queue,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// Secrets provided by resources,
	Secrets *RabbitMQSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the rabbitMQ message queue link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetRabbitMQMessageQueueProperties implements the RabbitMQMessageQueuePropertiesClassification interface for type ValuesRabbitMQMessageQueueProperties.
func (v *ValuesRabbitMQMessageQueueProperties) GetRabbitMQMessageQueueProperties() *RabbitMQMessageQueueProperties {
	return &RabbitMQMessageQueueProperties{
		ProvisioningState: v.ProvisioningState,
		Secrets: v.Secrets,
		Mode: v.Mode,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
	}
}

type ValuesRedisCacheProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The host name of the target Redis cache
	Host *string `json:"host,omitempty"`

	// REQUIRED; How to build the Redis cache Link. Options are to build automatically via 'recipe' or 'resource', or build manually
// via 'values'. Selection determines which set of fields to additionally require.
	Mode *RedisCachePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The port value of the target Redis cache
	Port *int32 `json:"port,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// The secret values for the given Redis cache resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// READ-ONLY; Provisioning state of the Redis cache link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The username for Redis cache
	Username *string `json:"username,omitempty" azure:"ro"`
}

// GetRedisCacheProperties implements the RedisCachePropertiesClassification interface for type ValuesRedisCacheProperties.
func (v *ValuesRedisCacheProperties) GetRedisCacheProperties() *RedisCacheProperties {
	return &RedisCacheProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Secrets: v.Secrets,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
	}
}

type ValuesSQLDatabaseProperties struct {
	// REQUIRED; The name of the SQL database.
	Database *string `json:"database,omitempty"`

	// REQUIRED; Fully qualified resource ID for the environment that the link is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; How to build the link. Options are to build automatically via 'recipe' or 'resource', or build manually via 'values'.
// Selection determines which set of fields to additionally require.
	Mode *SQLDatabasePropertiesMode `json:"mode,omitempty"`

	// REQUIRED; The fully qualified domain name of the SQL database.
	Server *string `json:"server,omitempty"`

	// Fully qualified resource ID for the application that the link is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the SQL database link at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// GetSQLDatabaseProperties implements the SQLDatabasePropertiesClassification interface for type ValuesSQLDatabaseProperties.
func (v *ValuesSQLDatabaseProperties) GetSQLDatabaseProperties() *SQLDatabaseProperties {
	return &SQLDatabaseProperties{
		ProvisioningState: v.ProvisioningState,
		Mode: v.Mode,
		Status: v.Status,
		Environment: v.Environment,
		Application: v.Application,
	}
}

