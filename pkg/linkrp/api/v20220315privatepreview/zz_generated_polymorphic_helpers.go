//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import "encoding/json"

func unmarshalDaprPubSubBrokerPropertiesClassification(rawMsg json.RawMessage) (DaprPubSubBrokerPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DaprPubSubBrokerPropertiesClassification
	switch m["mode"] {
	case string(DaprPubSubBrokerPropertiesModeRecipe):
		b = &RecipeDaprPubSubProperties{}
	case string(DaprPubSubBrokerPropertiesModeResource):
		b = &ResourceDaprPubSubProperties{}
	case string(DaprPubSubBrokerPropertiesModeValues):
		b = &ValuesDaprPubSubProperties{}
	default:
		b = &DaprPubSubBrokerProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalDaprSecretStorePropertiesClassification(rawMsg json.RawMessage) (DaprSecretStorePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DaprSecretStorePropertiesClassification
	switch m["mode"] {
	case string(DaprSecretStorePropertiesModeRecipe):
		b = &RecipeDaprSecretStoreProperties{}
	case string(DaprSecretStorePropertiesModeValues):
		b = &ValuesDaprSecretStoreProperties{}
	default:
		b = &DaprSecretStoreProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalDaprStateStorePropertiesClassification(rawMsg json.RawMessage) (DaprStateStorePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DaprStateStorePropertiesClassification
	switch m["mode"] {
	case string(DaprStateStorePropertiesModeRecipe):
		b = &RecipeDaprStateStoreProperties{}
	case string(DaprStateStorePropertiesModeResource):
		b = &ResourceDaprStateStoreResourceProperties{}
	case string(DaprStateStorePropertiesModeValues):
		b = &ValuesDaprStateStoreResourceProperties{}
	default:
		b = &DaprStateStoreProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalMongoDatabasePropertiesClassification(rawMsg json.RawMessage) (MongoDatabasePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b MongoDatabasePropertiesClassification
	switch m["mode"] {
	case string(MongoDatabasePropertiesModeRecipe):
		b = &RecipeMongoDatabaseProperties{}
	case string(MongoDatabasePropertiesModeResource):
		b = &ResourceMongoDatabaseProperties{}
	case string(MongoDatabasePropertiesModeValues):
		b = &ValuesMongoDatabaseProperties{}
	default:
		b = &MongoDatabaseProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalRabbitMQMessageQueuePropertiesClassification(rawMsg json.RawMessage) (RabbitMQMessageQueuePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RabbitMQMessageQueuePropertiesClassification
	switch m["mode"] {
	case string(RabbitMQMessageQueuePropertiesModeRecipe):
		b = &RecipeRabbitMQMessageQueueProperties{}
	case string(RabbitMQMessageQueuePropertiesModeValues):
		b = &ValuesRabbitMQMessageQueueProperties{}
	default:
		b = &RabbitMQMessageQueueProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalSQLDatabasePropertiesClassification(rawMsg json.RawMessage) (SQLDatabasePropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SQLDatabasePropertiesClassification
	switch m["mode"] {
	case string(SQLDatabasePropertiesModeRecipe):
		b = &RecipeSQLDatabaseProperties{}
	case string(SQLDatabasePropertiesModeResource):
		b = &ResourceSQLDatabaseProperties{}
	case string(SQLDatabasePropertiesModeValues):
		b = &ValuesSQLDatabaseProperties{}
	default:
		b = &SQLDatabaseProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

