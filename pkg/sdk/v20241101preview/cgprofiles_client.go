//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20241101preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type CGProfilesClient struct {
	subscriptionID string
	pl runtime.Pipeline
}

// NewCGProfilesClient creates a new instance of CGProfilesClient with the specified values.
// subscriptionID - The ID of the target subscription. The value must be an UUID.
// pl - the pipeline used for sending requests and handling responses.
func NewCGProfilesClient(subscriptionID string, pl runtime.Pipeline) *CGProfilesClient {
	client := &CGProfilesClient{
		subscriptionID: subscriptionID,
		pl: pl,
	}
	return client
}

// NewListByResourceGroupPager - Gets a list of all container group profiles under a resource group.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - CGProfilesClientListByResourceGroupOptions contains the optional parameters for the CGProfilesClient.ListByResourceGroup
// method.
func (client *CGProfilesClient) NewListByResourceGroupPager(resourceGroupName string, options *CGProfilesClientListByResourceGroupOptions) (*runtime.Pager[CGProfilesClientListByResourceGroupResponse]) {
	return runtime.NewPager(runtime.PagingHandler[CGProfilesClientListByResourceGroupResponse]{
		More: func(page CGProfilesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CGProfilesClientListByResourceGroupResponse) (CGProfilesClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CGProfilesClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return CGProfilesClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CGProfilesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CGProfilesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *CGProfilesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CGProfilesClient) listByResourceGroupHandleResponse(resp *http.Response) (CGProfilesClientListByResourceGroupResponse, error) {
	result := CGProfilesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfileListResult); err != nil {
		return CGProfilesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets a list of all container group profiles under a subscription.
// Generated from API version 2024-11-01-preview
// options - CGProfilesClientListBySubscriptionOptions contains the optional parameters for the CGProfilesClient.ListBySubscription
// method.
func (client *CGProfilesClient) NewListBySubscriptionPager(options *CGProfilesClientListBySubscriptionOptions) (*runtime.Pager[CGProfilesClientListBySubscriptionResponse]) {
	return runtime.NewPager(runtime.PagingHandler[CGProfilesClientListBySubscriptionResponse]{
		More: func(page CGProfilesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CGProfilesClientListBySubscriptionResponse) (CGProfilesClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CGProfilesClientListBySubscriptionResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return CGProfilesClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CGProfilesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CGProfilesClient) listBySubscriptionCreateRequest(ctx context.Context, options *CGProfilesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroupProfiles"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CGProfilesClient) listBySubscriptionHandleResponse(resp *http.Response) (CGProfilesClientListBySubscriptionResponse, error) {
	result := CGProfilesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfileListResult); err != nil {
		return CGProfilesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

