//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20241101preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type NGroupsClient struct {
	subscriptionID string
	pl runtime.Pipeline
}

// NewNGroupsClient creates a new instance of NGroupsClient with the specified values.
// subscriptionID - The ID of the target subscription. The value must be an UUID.
// pl - the pipeline used for sending requests and handling responses.
func NewNGroupsClient(subscriptionID string, pl runtime.Pipeline) *NGroupsClient {
	client := &NGroupsClient{
		subscriptionID: subscriptionID,
		pl: pl,
	}
	return client
}

// BeginCreateOrUpdate - Create or update a NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// nGroup - The NGroup object.
// options - NGroupsClientBeginCreateOrUpdateOptions contains the optional parameters for the NGroupsClient.BeginCreateOrUpdate
// method.
func (client *NGroupsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginCreateOrUpdateOptions) (*runtime.Poller[NGroupsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, ngroupsName, nGroup, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[NGroupsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[NGroupsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Create or update a NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
func (client *NGroupsClient) createOrUpdate(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, ngroupsName, nGroup, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *NGroupsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, nGroup)
}

// BeginDelete - Deletes the NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// options - NGroupsClientBeginDeleteOptions contains the optional parameters for the NGroupsClient.BeginDelete method.
func (client *NGroupsClient) BeginDelete(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginDeleteOptions) (*runtime.Poller[NGroupsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, ngroupsName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[NGroupsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[NGroupsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes the NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
func (client *NGroupsClient) deleteOperation(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, ngroupsName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NGroupsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get the properties of the specified NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// options - NGroupsClientGetOptions contains the optional parameters for the NGroupsClient.Get method.
func (client *NGroupsClient) Get(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientGetOptions) (NGroupsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, ngroupsName, options)
	if err != nil {
		return NGroupsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return NGroupsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return NGroupsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *NGroupsClient) getCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NGroupsClient) getHandleResponse(resp *http.Response) (NGroupsClientGetResponse, error) {
	result := NGroupsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NGroup); err != nil {
		return NGroupsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Gets a list of all NGroups resources under a subscription.
// Generated from API version 2024-11-01-preview
// options - NGroupsClientListOptions contains the optional parameters for the NGroupsClient.List method.
func (client *NGroupsClient) NewListPager(options *NGroupsClientListOptions) (*runtime.Pager[NGroupsClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[NGroupsClientListResponse]{
		More: func(page NGroupsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NGroupsClientListResponse) (NGroupsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return NGroupsClientListResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return NGroupsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return NGroupsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *NGroupsClient) listCreateRequest(ctx context.Context, options *NGroupsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/ngroups"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *NGroupsClient) listHandleResponse(resp *http.Response) (NGroupsClientListResponse, error) {
	result := NGroupsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NGroupsListResult); err != nil {
		return NGroupsClientListResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets a list of all NGroups resources under a resource group.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - NGroupsClientListByResourceGroupOptions contains the optional parameters for the NGroupsClient.ListByResourceGroup
// method.
func (client *NGroupsClient) NewListByResourceGroupPager(resourceGroupName string, options *NGroupsClientListByResourceGroupOptions) (*runtime.Pager[NGroupsClientListByResourceGroupResponse]) {
	return runtime.NewPager(runtime.PagingHandler[NGroupsClientListByResourceGroupResponse]{
		More: func(page NGroupsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NGroupsClientListByResourceGroupResponse) (NGroupsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return NGroupsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return NGroupsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return NGroupsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *NGroupsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *NGroupsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *NGroupsClient) listByResourceGroupHandleResponse(resp *http.Response) (NGroupsClientListByResourceGroupResponse, error) {
	result := NGroupsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NGroupsListResult); err != nil {
		return NGroupsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// BeginRestart - Restarts all container groups in the specified NGroups resource in place. If container image has updates,
// new image will be downloaded.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// options - NGroupsClientBeginRestartOptions contains the optional parameters for the NGroupsClient.BeginRestart method.
func (client *NGroupsClient) BeginRestart(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginRestartOptions) (*runtime.Poller[NGroupsClientRestartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.restart(ctx, resourceGroupName, ngroupsName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[NGroupsClientRestartResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[NGroupsClientRestartResponse](options.ResumeToken, client.pl, nil)
	}
}

// Restart - Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
// image will be downloaded.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
func (client *NGroupsClient) restart(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginRestartOptions) (*http.Response, error) {
	req, err := client.restartCreateRequest(ctx, resourceGroupName, ngroupsName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// restartCreateRequest creates the Restart request.
func (client *NGroupsClient) restartCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginRestartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/restart"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginStart - Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
// will start.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// options - NGroupsClientBeginStartOptions contains the optional parameters for the NGroupsClient.BeginStart method.
func (client *NGroupsClient) BeginStart(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginStartOptions) (*runtime.Poller[NGroupsClientStartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.start(ctx, resourceGroupName, ngroupsName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[NGroupsClientStartResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[NGroupsClientStartResponse](options.ResumeToken, client.pl, nil)
	}
}

// Start - Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
// will start.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
func (client *NGroupsClient) start(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginStartOptions) (*http.Response, error) {
	req, err := client.startCreateRequest(ctx, resourceGroupName, ngroupsName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// startCreateRequest creates the Start request.
func (client *NGroupsClient) startCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientBeginStartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/start"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Stop - Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
// will stop.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// options - NGroupsClientStopOptions contains the optional parameters for the NGroupsClient.Stop method.
func (client *NGroupsClient) Stop(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientStopOptions) (NGroupsClientStopResponse, error) {
	req, err := client.stopCreateRequest(ctx, resourceGroupName, ngroupsName, options)
	if err != nil {
		return NGroupsClientStopResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return NGroupsClientStopResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return NGroupsClientStopResponse{}, runtime.NewResponseError(resp)
	}
	return NGroupsClientStopResponse{}, nil
}

// stopCreateRequest creates the Stop request.
func (client *NGroupsClient) stopCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, options *NGroupsClientStopOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/stop"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginUpdate - Update a specified NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// ngroupsName - The NGroups name.
// nGroup - The NGroup object.
// options - NGroupsClientBeginUpdateOptions contains the optional parameters for the NGroupsClient.BeginUpdate method.
func (client *NGroupsClient) BeginUpdate(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginUpdateOptions) (*runtime.Poller[NGroupsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, ngroupsName, nGroup, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[NGroupsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[NGroupsClientUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Update - Update a specified NGroups resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2024-11-01-preview
func (client *NGroupsClient) update(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, ngroupsName, nGroup, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *NGroupsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, nGroup NGroup, options *NGroupsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, nGroup)
}

