//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20241101preview

const host = "https://management.azure.com"

// AzureFileShareAccessTier - Access tier for specific share. GpV2 account can choose between TransactionOptimized (default),
// Hot, and Cool. FileStorage account can choose Premium. Learn more at:
// https://learn.microsoft.com/en-us/rest/api/storagerp/file-shares/create?tabs=HTTP#shareaccesstier
type AzureFileShareAccessTier string

const (
	AzureFileShareAccessTierCool AzureFileShareAccessTier = "Cool"
	AzureFileShareAccessTierHot AzureFileShareAccessTier = "Hot"
	AzureFileShareAccessTierPremium AzureFileShareAccessTier = "Premium"
	AzureFileShareAccessTierTransactionOptimized AzureFileShareAccessTier = "TransactionOptimized"
)

// PossibleAzureFileShareAccessTierValues returns the possible values for the AzureFileShareAccessTier const type.
func PossibleAzureFileShareAccessTierValues() []AzureFileShareAccessTier {
	return []AzureFileShareAccessTier{	
		AzureFileShareAccessTierCool,
		AzureFileShareAccessTierHot,
		AzureFileShareAccessTierPremium,
		AzureFileShareAccessTierTransactionOptimized,
	}
}

// AzureFileShareAccessType - Specifies how Container Groups can access the Azure file share i.e. all CG will share same Azure
// file share or going to have exclusive file share.
type AzureFileShareAccessType string

const (
	AzureFileShareAccessTypeShared AzureFileShareAccessType = "Shared"
	AzureFileShareAccessTypeExclusive AzureFileShareAccessType = "Exclusive"
)

// PossibleAzureFileShareAccessTypeValues returns the possible values for the AzureFileShareAccessType const type.
func PossibleAzureFileShareAccessTypeValues() []AzureFileShareAccessType {
	return []AzureFileShareAccessType{	
		AzureFileShareAccessTypeShared,
		AzureFileShareAccessTypeExclusive,
	}
}

// ContainerGroupIPAddressType - Specifies if the IP is exposed to the public internet or private VNET.
type ContainerGroupIPAddressType string

const (
	ContainerGroupIPAddressTypePrivate ContainerGroupIPAddressType = "Private"
	ContainerGroupIPAddressTypePublic ContainerGroupIPAddressType = "Public"
)

// PossibleContainerGroupIPAddressTypeValues returns the possible values for the ContainerGroupIPAddressType const type.
func PossibleContainerGroupIPAddressTypeValues() []ContainerGroupIPAddressType {
	return []ContainerGroupIPAddressType{	
		ContainerGroupIPAddressTypePrivate,
		ContainerGroupIPAddressTypePublic,
	}
}

// ContainerGroupNetworkProtocol - The protocol associated with the port.
type ContainerGroupNetworkProtocol string

const (
	ContainerGroupNetworkProtocolTCP ContainerGroupNetworkProtocol = "TCP"
	ContainerGroupNetworkProtocolUDP ContainerGroupNetworkProtocol = "UDP"
)

// PossibleContainerGroupNetworkProtocolValues returns the possible values for the ContainerGroupNetworkProtocol const type.
func PossibleContainerGroupNetworkProtocolValues() []ContainerGroupNetworkProtocol {
	return []ContainerGroupNetworkProtocol{	
		ContainerGroupNetworkProtocolTCP,
		ContainerGroupNetworkProtocolUDP,
	}
}

// ContainerGroupPriority - The priority of the container group.
type ContainerGroupPriority string

const (
	ContainerGroupPriorityRegular ContainerGroupPriority = "Regular"
	ContainerGroupPrioritySpot ContainerGroupPriority = "Spot"
)

// PossibleContainerGroupPriorityValues returns the possible values for the ContainerGroupPriority const type.
func PossibleContainerGroupPriorityValues() []ContainerGroupPriority {
	return []ContainerGroupPriority{	
		ContainerGroupPriorityRegular,
		ContainerGroupPrioritySpot,
	}
}

// ContainerGroupProvisioningState - The provisioning state of the container group. This only appears in the response.
type ContainerGroupProvisioningState string

const (
	ContainerGroupProvisioningStateAccepted ContainerGroupProvisioningState = "Accepted"
	ContainerGroupProvisioningStateCanceled ContainerGroupProvisioningState = "Canceled"
	ContainerGroupProvisioningStateCreating ContainerGroupProvisioningState = "Creating"
	ContainerGroupProvisioningStateDeleting ContainerGroupProvisioningState = "Deleting"
	ContainerGroupProvisioningStateFailed ContainerGroupProvisioningState = "Failed"
	ContainerGroupProvisioningStateNotAccessible ContainerGroupProvisioningState = "NotAccessible"
	ContainerGroupProvisioningStateNotSpecified ContainerGroupProvisioningState = "NotSpecified"
	ContainerGroupProvisioningStatePending ContainerGroupProvisioningState = "Pending"
	ContainerGroupProvisioningStatePreProvisioned ContainerGroupProvisioningState = "PreProvisioned"
	ContainerGroupProvisioningStateRepairing ContainerGroupProvisioningState = "Repairing"
	ContainerGroupProvisioningStateSucceeded ContainerGroupProvisioningState = "Succeeded"
	ContainerGroupProvisioningStateUnhealthy ContainerGroupProvisioningState = "Unhealthy"
	ContainerGroupProvisioningStateUpdating ContainerGroupProvisioningState = "Updating"
)

// PossibleContainerGroupProvisioningStateValues returns the possible values for the ContainerGroupProvisioningState const type.
func PossibleContainerGroupProvisioningStateValues() []ContainerGroupProvisioningState {
	return []ContainerGroupProvisioningState{	
		ContainerGroupProvisioningStateAccepted,
		ContainerGroupProvisioningStateCanceled,
		ContainerGroupProvisioningStateCreating,
		ContainerGroupProvisioningStateDeleting,
		ContainerGroupProvisioningStateFailed,
		ContainerGroupProvisioningStateNotAccessible,
		ContainerGroupProvisioningStateNotSpecified,
		ContainerGroupProvisioningStatePending,
		ContainerGroupProvisioningStatePreProvisioned,
		ContainerGroupProvisioningStateRepairing,
		ContainerGroupProvisioningStateSucceeded,
		ContainerGroupProvisioningStateUnhealthy,
		ContainerGroupProvisioningStateUpdating,
	}
}

// ContainerGroupRestartPolicy - Restart policy for all containers within the container group.
// * Always Always restart
// * OnFailure Restart on failure
// * Never Never restart
type ContainerGroupRestartPolicy string

const (
	ContainerGroupRestartPolicyAlways ContainerGroupRestartPolicy = "Always"
	ContainerGroupRestartPolicyNever ContainerGroupRestartPolicy = "Never"
	ContainerGroupRestartPolicyOnFailure ContainerGroupRestartPolicy = "OnFailure"
)

// PossibleContainerGroupRestartPolicyValues returns the possible values for the ContainerGroupRestartPolicy const type.
func PossibleContainerGroupRestartPolicyValues() []ContainerGroupRestartPolicy {
	return []ContainerGroupRestartPolicy{	
		ContainerGroupRestartPolicyAlways,
		ContainerGroupRestartPolicyNever,
		ContainerGroupRestartPolicyOnFailure,
	}
}

// ContainerGroupSKU - The container group SKU.
type ContainerGroupSKU string

const (
	ContainerGroupSKUConfidential ContainerGroupSKU = "Confidential"
	ContainerGroupSKUDedicated ContainerGroupSKU = "Dedicated"
	ContainerGroupSKUNotSpecified ContainerGroupSKU = "NotSpecified"
	ContainerGroupSKUStandard ContainerGroupSKU = "Standard"
)

// PossibleContainerGroupSKUValues returns the possible values for the ContainerGroupSKU const type.
func PossibleContainerGroupSKUValues() []ContainerGroupSKU {
	return []ContainerGroupSKU{	
		ContainerGroupSKUConfidential,
		ContainerGroupSKUDedicated,
		ContainerGroupSKUNotSpecified,
		ContainerGroupSKUStandard,
	}
}

// ContainerInstanceOperationsOrigin - The intended executor of the operation.
type ContainerInstanceOperationsOrigin string

const (
	ContainerInstanceOperationsOriginSystem ContainerInstanceOperationsOrigin = "System"
	ContainerInstanceOperationsOriginUser ContainerInstanceOperationsOrigin = "User"
)

// PossibleContainerInstanceOperationsOriginValues returns the possible values for the ContainerInstanceOperationsOrigin const type.
func PossibleContainerInstanceOperationsOriginValues() []ContainerInstanceOperationsOrigin {
	return []ContainerInstanceOperationsOrigin{	
		ContainerInstanceOperationsOriginSystem,
		ContainerInstanceOperationsOriginUser,
	}
}

// ContainerNetworkProtocol - The protocol associated with the port.
type ContainerNetworkProtocol string

const (
	ContainerNetworkProtocolTCP ContainerNetworkProtocol = "TCP"
	ContainerNetworkProtocolUDP ContainerNetworkProtocol = "UDP"
)

// PossibleContainerNetworkProtocolValues returns the possible values for the ContainerNetworkProtocol const type.
func PossibleContainerNetworkProtocolValues() []ContainerNetworkProtocol {
	return []ContainerNetworkProtocol{	
		ContainerNetworkProtocolTCP,
		ContainerNetworkProtocolUDP,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication CreatedByType = "Application"
	CreatedByTypeKey CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{	
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DNSNameLabelReusePolicy - The value representing the security enum. The 'Unsecure' value is the default value if not selected
// and means the object's domain name label is not secured against subdomain takeover. The
// 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the
// same tenant. The 'SubscriptionReuse' value means the object's domain name label
// can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be
// reused within the same resource group. The 'NoReuse' value means the object's
// domain name label cannot be reused within the same resource group, subscription, or tenant.
type DNSNameLabelReusePolicy string

const (
	DNSNameLabelReusePolicyNoreuse DNSNameLabelReusePolicy = "Noreuse"
	DNSNameLabelReusePolicyResourceGroupReuse DNSNameLabelReusePolicy = "ResourceGroupReuse"
	DNSNameLabelReusePolicySubscriptionReuse DNSNameLabelReusePolicy = "SubscriptionReuse"
	DNSNameLabelReusePolicyTenantReuse DNSNameLabelReusePolicy = "TenantReuse"
	DNSNameLabelReusePolicyUnsecure DNSNameLabelReusePolicy = "Unsecure"
)

// PossibleDNSNameLabelReusePolicyValues returns the possible values for the DNSNameLabelReusePolicy const type.
func PossibleDNSNameLabelReusePolicyValues() []DNSNameLabelReusePolicy {
	return []DNSNameLabelReusePolicy{	
		DNSNameLabelReusePolicyNoreuse,
		DNSNameLabelReusePolicyResourceGroupReuse,
		DNSNameLabelReusePolicySubscriptionReuse,
		DNSNameLabelReusePolicyTenantReuse,
		DNSNameLabelReusePolicyUnsecure,
	}
}

// GpuSKU - The SKU of the GPU resource.
type GpuSKU string

const (
	GpuSKUK80 GpuSKU = "K80"
	GpuSKUP100 GpuSKU = "P100"
	GpuSKUV100 GpuSKU = "V100"
)

// PossibleGpuSKUValues returns the possible values for the GpuSKU const type.
func PossibleGpuSKUValues() []GpuSKU {
	return []GpuSKU{	
		GpuSKUK80,
		GpuSKUP100,
		GpuSKUV100,
	}
}

// IdentityAccessLevel - The access level of an identity.
type IdentityAccessLevel string

const (
	IdentityAccessLevelAll IdentityAccessLevel = "All"
	IdentityAccessLevelSystem IdentityAccessLevel = "System"
	IdentityAccessLevelUser IdentityAccessLevel = "User"
)

// PossibleIdentityAccessLevelValues returns the possible values for the IdentityAccessLevel const type.
func PossibleIdentityAccessLevelValues() []IdentityAccessLevel {
	return []IdentityAccessLevel{	
		IdentityAccessLevelAll,
		IdentityAccessLevelSystem,
		IdentityAccessLevelUser,
	}
}

// LogAnalyticsLogType - The log type to be used.
type LogAnalyticsLogType string

const (
	LogAnalyticsLogTypeContainerInsights LogAnalyticsLogType = "ContainerInsights"
	LogAnalyticsLogTypeContainerInstanceLogs LogAnalyticsLogType = "ContainerInstanceLogs"
)

// PossibleLogAnalyticsLogTypeValues returns the possible values for the LogAnalyticsLogType const type.
func PossibleLogAnalyticsLogTypeValues() []LogAnalyticsLogType {
	return []LogAnalyticsLogType{	
		LogAnalyticsLogTypeContainerInsights,
		LogAnalyticsLogTypeContainerInstanceLogs,
	}
}

// NGroupProvisioningState - The provisioning state, which only appears in the response.
type NGroupProvisioningState string

const (
	NGroupProvisioningStateCanceled NGroupProvisioningState = "Canceled"
	NGroupProvisioningStateCreating NGroupProvisioningState = "Creating"
	NGroupProvisioningStateDeleting NGroupProvisioningState = "Deleting"
	NGroupProvisioningStateFailed NGroupProvisioningState = "Failed"
	NGroupProvisioningStateMigrating NGroupProvisioningState = "Migrating"
	NGroupProvisioningStateSucceeded NGroupProvisioningState = "Succeeded"
	NGroupProvisioningStateUpdating NGroupProvisioningState = "Updating"
)

// PossibleNGroupProvisioningStateValues returns the possible values for the NGroupProvisioningState const type.
func PossibleNGroupProvisioningStateValues() []NGroupProvisioningState {
	return []NGroupProvisioningState{	
		NGroupProvisioningStateCanceled,
		NGroupProvisioningStateCreating,
		NGroupProvisioningStateDeleting,
		NGroupProvisioningStateFailed,
		NGroupProvisioningStateMigrating,
		NGroupProvisioningStateSucceeded,
		NGroupProvisioningStateUpdating,
	}
}

type NGroupUpdateMode string

const (
	NGroupUpdateModeManual NGroupUpdateMode = "Manual"
	NGroupUpdateModeRolling NGroupUpdateMode = "Rolling"
)

// PossibleNGroupUpdateModeValues returns the possible values for the NGroupUpdateMode const type.
func PossibleNGroupUpdateModeValues() []NGroupUpdateMode {
	return []NGroupUpdateMode{	
		NGroupUpdateModeManual,
		NGroupUpdateModeRolling,
	}
}

// OperatingSystemTypes - The operating system type required by the containers in the container group.
type OperatingSystemTypes string

const (
	OperatingSystemTypesLinux OperatingSystemTypes = "Linux"
	OperatingSystemTypesWindows OperatingSystemTypes = "Windows"
)

// PossibleOperatingSystemTypesValues returns the possible values for the OperatingSystemTypes const type.
func PossibleOperatingSystemTypesValues() []OperatingSystemTypes {
	return []OperatingSystemTypes{	
		OperatingSystemTypesLinux,
		OperatingSystemTypesWindows,
	}
}

// ResourceIdentityType - The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes
// both an implicitly created identity and a set of user assigned identities. The type 'None' will
// remove any identities from the container group.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned ResourceIdentityType = "SystemAssigned"
	ResourceIdentityTypeUserAssigned ResourceIdentityType = "UserAssigned"
	ResourceIdentityTypeSystemAssignedUserAssigned ResourceIdentityType = "SystemAssigned, UserAssigned"
	ResourceIdentityTypeNone ResourceIdentityType = "None"
)

// PossibleResourceIdentityTypeValues returns the possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{	
		ResourceIdentityTypeSystemAssigned,
		ResourceIdentityTypeUserAssigned,
		ResourceIdentityTypeSystemAssignedUserAssigned,
		ResourceIdentityTypeNone,
	}
}

// Scheme - The scheme.
type Scheme string

const (
	SchemeHTTP Scheme = "http"
	SchemeHTTPS Scheme = "https"
)

// PossibleSchemeValues returns the possible values for the Scheme const type.
func PossibleSchemeValues() []Scheme {
	return []Scheme{	
		SchemeHTTP,
		SchemeHTTPS,
	}
}

