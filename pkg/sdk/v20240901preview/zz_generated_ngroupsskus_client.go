// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20240901preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NGroupsSKUsClient contains the methods for the NGroupsSKUs group.
// Don't use this type directly, use NewNGroupsSKUsClient() instead.
type NGroupsSKUsClient struct {
	internal *arm.Client
	subscriptionID string
}

// NewNGroupsSKUsClient creates a new instance of NGroupsSKUsClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNGroupsSKUsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NGroupsSKUsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NGroupsSKUsClient{
		subscriptionID: subscriptionID,
	internal: cl,
	}
	return client, nil
}

// NewGetPager - Get the resource sku, resource type, and sku capacity of the n groups.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - ngroupsName - The N Groups name.
//   - options - NGroupsSKUsClientGetOptions contains the optional parameters for the NGroupsSKUsClient.NewGetPager method.
func (client *NGroupsSKUsClient) NewGetPager(resourceGroupName string, ngroupsName string, options *NGroupsSKUsClientGetOptions) (*runtime.Pager[NGroupsSKUsClientGetResponse]) {
	return runtime.NewPager(runtime.PagingHandler[NGroupsSKUsClientGetResponse]{
		More: func(page NGroupsSKUsClientGetResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NGroupsSKUsClientGetResponse) (NGroupsSKUsClientGetResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.getCreateRequest(ctx, resourceGroupName, ngroupsName, options)
			}, nil)
			if err != nil {
				return NGroupsSKUsClientGetResponse{}, err
			}
			return client.getHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// getCreateRequest creates the Get request.
func (client *NGroupsSKUsClient) getCreateRequest(ctx context.Context, resourceGroupName string, ngroupsName string, _ *NGroupsSKUsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ngroupsName == "" {
		return nil, errors.New("parameter ngroupsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ngroupsName}", url.PathEscape(ngroupsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NGroupsSKUsClient) getHandleResponse(resp *http.Response) (NGroupsSKUsClientGetResponse, error) {
	result := NGroupsSKUsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NGroupsSKUsList); err != nil {
		return NGroupsSKUsClientGetResponse{}, err
	}
	return result, nil
}

