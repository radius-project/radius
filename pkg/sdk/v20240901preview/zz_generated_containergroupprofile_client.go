// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20240901preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ContainerGroupProfileClient contains the methods for the ContainerGroupProfile group.
// Don't use this type directly, use NewContainerGroupProfileClient() instead.
type ContainerGroupProfileClient struct {
	internal *arm.Client
	subscriptionID string
}

// NewContainerGroupProfileClient creates a new instance of ContainerGroupProfileClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewContainerGroupProfileClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ContainerGroupProfileClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ContainerGroupProfileClient{
		subscriptionID: subscriptionID,
	internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a CGProfile if it doesn't exist or update an existing CGProfile.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - containerGroupProfileName - ContainerGroupProfile name.
//   - containerGroupProfile - The ContainerGroupProfile object.
//   - options - ContainerGroupProfileClientCreateOrUpdateOptions contains the optional parameters for the ContainerGroupProfileClient.CreateOrUpdate
//     method.
func (client *ContainerGroupProfileClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, containerGroupProfileName string, containerGroupProfile ContainerGroupProfile, options *ContainerGroupProfileClientCreateOrUpdateOptions) (ContainerGroupProfileClientCreateOrUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "ContainerGroupProfileClient.CreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, containerGroupProfileName, containerGroupProfile, options)
	if err != nil {
		return ContainerGroupProfileClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerGroupProfileClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return ContainerGroupProfileClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ContainerGroupProfileClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, containerGroupProfileName string, containerGroupProfile ContainerGroupProfile, _ *ContainerGroupProfileClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if containerGroupProfileName == "" {
		return nil, errors.New("parameter containerGroupProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerGroupProfileName}", url.PathEscape(containerGroupProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, containerGroupProfile); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ContainerGroupProfileClient) createOrUpdateHandleResponse(resp *http.Response) (ContainerGroupProfileClientCreateOrUpdateResponse, error) {
	result := ContainerGroupProfileClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfile); err != nil {
		return ContainerGroupProfileClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a container group profile.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - containerGroupProfileName - ContainerGroupProfile name.
//   - options - ContainerGroupProfileClientDeleteOptions contains the optional parameters for the ContainerGroupProfileClient.Delete
//     method.
func (client *ContainerGroupProfileClient) Delete(ctx context.Context, resourceGroupName string, containerGroupProfileName string, options *ContainerGroupProfileClientDeleteOptions) (ContainerGroupProfileClientDeleteResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "ContainerGroupProfileClient.Delete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, containerGroupProfileName, options)
	if err != nil {
		return ContainerGroupProfileClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerGroupProfileClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return ContainerGroupProfileClientDeleteResponse{}, err
	}
	resp, err := client.deleteHandleResponse(httpResp)
	return resp, err
}

// deleteCreateRequest creates the Delete request.
func (client *ContainerGroupProfileClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, containerGroupProfileName string, _ *ContainerGroupProfileClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if containerGroupProfileName == "" {
		return nil, errors.New("parameter containerGroupProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerGroupProfileName}", url.PathEscape(containerGroupProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *ContainerGroupProfileClient) deleteHandleResponse(resp *http.Response) (ContainerGroupProfileClientDeleteResponse, error) {
	result := ContainerGroupProfileClientDeleteResponse{}
	if val := resp.Header.Get("Azure-AsyncOperation"); val != "" {
		result.AzureAsyncOperation = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	return result, nil
}

// Get - Get the properties of the specified container group profile.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - containerGroupProfileName - ContainerGroupProfile name.
//   - options - ContainerGroupProfileClientGetOptions contains the optional parameters for the ContainerGroupProfileClient.Get
//     method.
func (client *ContainerGroupProfileClient) Get(ctx context.Context, resourceGroupName string, containerGroupProfileName string, options *ContainerGroupProfileClientGetOptions) (ContainerGroupProfileClientGetResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "ContainerGroupProfileClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, containerGroupProfileName, options)
	if err != nil {
		return ContainerGroupProfileClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerGroupProfileClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ContainerGroupProfileClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ContainerGroupProfileClient) getCreateRequest(ctx context.Context, resourceGroupName string, containerGroupProfileName string, _ *ContainerGroupProfileClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if containerGroupProfileName == "" {
		return nil, errors.New("parameter containerGroupProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerGroupProfileName}", url.PathEscape(containerGroupProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ContainerGroupProfileClient) getHandleResponse(resp *http.Response) (ContainerGroupProfileClientGetResponse, error) {
	result := ContainerGroupProfileClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfile); err != nil {
		return ContainerGroupProfileClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets a list of all container group profiles under a resource group.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - options - ContainerGroupProfileClientListByResourceGroupOptions contains the optional parameters for the ContainerGroupProfileClient.NewListByResourceGroupPager
//     method.
func (client *ContainerGroupProfileClient) NewListByResourceGroupPager(resourceGroupName string, options *ContainerGroupProfileClientListByResourceGroupOptions) (*runtime.Pager[ContainerGroupProfileClientListByResourceGroupResponse]) {
	return runtime.NewPager(runtime.PagingHandler[ContainerGroupProfileClientListByResourceGroupResponse]{
		More: func(page ContainerGroupProfileClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerGroupProfileClientListByResourceGroupResponse) (ContainerGroupProfileClientListByResourceGroupResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ContainerGroupProfileClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ContainerGroupProfileClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *ContainerGroupProfileClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ContainerGroupProfileClient) listByResourceGroupHandleResponse(resp *http.Response) (ContainerGroupProfileClientListByResourceGroupResponse, error) {
	result := ContainerGroupProfileClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfileListResult); err != nil {
		return ContainerGroupProfileClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets a list of all container group profiles under a subscription.
//
// Generated from API version 2024-09-01-preview
//   - options - ContainerGroupProfileClientListBySubscriptionOptions contains the optional parameters for the ContainerGroupProfileClient.NewListBySubscriptionPager
//     method.
func (client *ContainerGroupProfileClient) NewListBySubscriptionPager(options *ContainerGroupProfileClientListBySubscriptionOptions) (*runtime.Pager[ContainerGroupProfileClientListBySubscriptionResponse]) {
	return runtime.NewPager(runtime.PagingHandler[ContainerGroupProfileClientListBySubscriptionResponse]{
		More: func(page ContainerGroupProfileClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerGroupProfileClientListBySubscriptionResponse) (ContainerGroupProfileClientListBySubscriptionResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ContainerGroupProfileClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ContainerGroupProfileClient) listBySubscriptionCreateRequest(ctx context.Context, _ *ContainerGroupProfileClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroupProfiles"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ContainerGroupProfileClient) listBySubscriptionHandleResponse(resp *http.Response) (ContainerGroupProfileClientListBySubscriptionResponse, error) {
	result := ContainerGroupProfileClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfileListResult); err != nil {
		return ContainerGroupProfileClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update a specified container group profile.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-09-01-preview
//   - resourceGroupName - The name of the resource group.
//   - containerGroupProfileName - ContainerGroupProfile name.
//   - containerGroupProfile - The ContainerGroupProfile object.
//   - options - ContainerGroupProfileClientUpdateOptions contains the optional parameters for the ContainerGroupProfileClient.Update
//     method.
func (client *ContainerGroupProfileClient) Update(ctx context.Context, resourceGroupName string, containerGroupProfileName string, containerGroupProfile ContainerGroupProfile, options *ContainerGroupProfileClientUpdateOptions) (ContainerGroupProfileClientUpdateResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "ContainerGroupProfileClient.Update", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, containerGroupProfileName, containerGroupProfile, options)
	if err != nil {
		return ContainerGroupProfileClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ContainerGroupProfileClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return ContainerGroupProfileClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *ContainerGroupProfileClient) updateCreateRequest(ctx context.Context, resourceGroupName string, containerGroupProfileName string, containerGroupProfile ContainerGroupProfile, _ *ContainerGroupProfileClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if containerGroupProfileName == "" {
		return nil, errors.New("parameter containerGroupProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerGroupProfileName}", url.PathEscape(containerGroupProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, containerGroupProfile); err != nil {
	return nil, err
}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *ContainerGroupProfileClient) updateHandleResponse(resp *http.Response) (ContainerGroupProfileClientUpdateResponse, error) {
	result := ContainerGroupProfileClientUpdateResponse{}
	if val := resp.Header.Get("x-ms-correlation-request-id"); val != "" {
		result.XMSCorrelationRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerGroupProfile); err != nil {
		return ContainerGroupProfileClientUpdateResponse{}, err
	}
	return result, nil
}

