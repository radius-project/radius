// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"fmt"
	"net/http"
	"time"
)

// ApplicationCreateOrUpdateOptions contains the optional parameters for the Application.CreateOrUpdate method.
type ApplicationCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// Parameters used to create an application.
type ApplicationCreateParameters struct {
	// Any object
	Properties interface{} `json:"properties,omitempty"`
}

// ApplicationDeleteOptions contains the optional parameters for the Application.Delete method.
type ApplicationDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGetOptions contains the optional parameters for the Application.Get method.
type ApplicationGetOptions struct {
	// placeholder for future optional parameters
}

// Application list.
type ApplicationList struct {
	// List of applications.
	Value *[]ApplicationResource `json:"value,omitempty"`
}

// ApplicationListByResourceGroupOptions contains the optional parameters for the Application.ListByResourceGroup method.
type ApplicationListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ApplicationListResponse is the response envelope for operations that return a ApplicationList type.
type ApplicationListResponse struct {
	// Application list.
	ApplicationList *ApplicationList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Application resource.
type ApplicationResource struct {
	TrackedResource
	// Properties of the application.
	Properties interface{} `json:"properties,omitempty"`
}

// ApplicationResourceResponse is the response envelope for operations that return a ApplicationResource type.
type ApplicationResourceResponse struct {
	// Application resource.
	ApplicationResource *ApplicationResource

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ComponentCreateOrUpdateOptions contains the optional parameters for the Component.CreateOrUpdate method.
type ComponentCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// Parameters used to create a component.
type ComponentCreateParameters struct {
	// Resource type of the component
	Kind *string `json:"kind,omitempty"`

	// Any object
	Properties interface{} `json:"properties,omitempty"`
}

// ComponentDeleteOptions contains the optional parameters for the Component.Delete method.
type ComponentDeleteOptions struct {
	// placeholder for future optional parameters
}

// ComponentGetOptions contains the optional parameters for the Component.Get method.
type ComponentGetOptions struct {
	// placeholder for future optional parameters
}

// Component list.
type ComponentList struct {
	// List of components.
	Value *[]ComponentResource `json:"value,omitempty"`
}

// ComponentListByApplicationOptions contains the optional parameters for the Component.ListByApplication method.
type ComponentListByApplicationOptions struct {
	// placeholder for future optional parameters
}

// ComponentListResponse is the response envelope for operations that return a ComponentList type.
type ComponentListResponse struct {
	// Component list.
	ComponentList *ComponentList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Component resource.
type ComponentResource struct {
	TrackedResource
	// Resource type of the component
	Kind *string `json:"kind,omitempty"`

	// Properties of the component.
	Properties interface{} `json:"properties,omitempty"`
}

// ComponentResourceResponse is the response envelope for operations that return a ComponentResource type.
type ComponentResourceResponse struct {
	// Component resource.
	ComponentResource *ComponentResource

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeploymentBeginCreateOrUpdateOptions contains the optional parameters for the Deployment.BeginCreateOrUpdate method.
type DeploymentBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentBeginDeleteOptions contains the optional parameters for the Deployment.BeginDelete method.
type DeploymentBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// Parameters used to create a deployment.
type DeploymentCreateParameters struct {
	// Properties of a deployment.
	Properties *DeploymentProperties `json:"properties,omitempty"`
}

// DeploymentGetOptions contains the optional parameters for the Deployment.Get method.
type DeploymentGetOptions struct {
	// placeholder for future optional parameters
}

// Deployment list.
type DeploymentList struct {
	// List of deployments.
	Value *[]DeploymentResource `json:"value,omitempty"`
}

// DeploymentListByApplicationOptions contains the optional parameters for the Deployment.ListByApplication method.
type DeploymentListByApplicationOptions struct {
	// placeholder for future optional parameters
}

// DeploymentListResponse is the response envelope for operations that return a DeploymentList type.
type DeploymentListResponse struct {
	// Deployment list.
	DeploymentList *DeploymentList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of a deployment.
type DeploymentProperties struct {
	// List of components in the deployment.
	Components *[]DeploymentPropertiesComponentsItem `json:"components,omitempty"`
}

type DeploymentPropertiesComponentsItem struct {
	// Name of the component
	ComponentName *string `json:"componentName,omitempty"`
}

// Deployment resource.
type DeploymentResource struct {
	TrackedResource
	// Properties of the deployment.
	Properties *DeploymentProperties `json:"properties,omitempty"`
}

// DeploymentResourcePollerResponse is the response envelope for operations that asynchronously return a DeploymentResource type.
type DeploymentResourcePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DeploymentResourceResponse, error)

	// Poller contains an initialized poller.
	Poller DeploymentResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeploymentResourceResponse is the response envelope for operations that return a DeploymentResource type.
type DeploymentResourceResponse struct {
	// Deployment resource.
	DeploymentResource *DeploymentResource

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details *[]ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
// format.).
type ErrorResponse struct {
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
func (e ErrorResponse) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += "InnerError: \n"
		if e.InnerError.Code != nil {
			msg += fmt.Sprintf("\tCode: %v\n", *e.InnerError.Code)
		}
		if e.InnerError.Message != nil {
			msg += fmt.Sprintf("\tMessage: %v\n", *e.InnerError.Message)
		}
		if e.InnerError.Target != nil {
			msg += fmt.Sprintf("\tTarget: %v\n", *e.InnerError.Target)
		}
		if e.InnerError.Details != nil {
			msg += fmt.Sprintf("\tDetails: %v\n", *e.InnerError.Details)
		}
		if e.InnerError.AdditionalInfo != nil {
			msg += fmt.Sprintf("\tAdditionalInfo: %v\n", *e.InnerError.AdditionalInfo)
		}
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags *map[string]string `json:"tags,omitempty"`
}

