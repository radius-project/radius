// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// DeploymentResourcePoller provides polling facilities until the operation completes
      type DeploymentResourcePoller interface {
        azcore.Poller

        // FinalResponse performs a final GET to the service and returns the final response
        // for the polling operation. If there is an error performing the final GET then an error is returned.
        // If the final GET succeeded then the final DeploymentResourceResponse will be returned.
        FinalResponse(ctx context.Context) (DeploymentResourceResponse, error)
      }

      type deploymentResourcePoller struct {
        // the client for making the request
        pipeline azcore.Pipeline
        pt armcore.Poller
      }

      // Done returns true if there was an error or polling has reached a terminal state
      func (p *deploymentResourcePoller) Done() bool {
        return p.pt.Done()
      }

      // Poll will send poll the service endpoint and return an http.Response or error received from the service
      func (p *deploymentResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
        return p.pt.Poll(ctx, p.pipeline)
      }

      func (p *deploymentResourcePoller) FinalResponse(ctx context.Context) (DeploymentResourceResponse, error) {
      respType := DeploymentResourceResponse{DeploymentResource: &DeploymentResource{}}
		resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.DeploymentResource)
		if err != nil {
			return DeploymentResourceResponse{}, err
    }
    respType.RawResponse = resp
		return respType, nil
	  }
      

      // ResumeToken generates the string token that can be used with the ResumeDeploymentResourcePoller method
      // on the client to create a new poller from the data held in the current poller type
      func (p *deploymentResourcePoller) ResumeToken() (string, error) {
        return p.pt.ResumeToken()
      }

      func (p *deploymentResourcePoller) pollUntilDone(ctx context.Context, frequency time.Duration) (DeploymentResourceResponse, error) {
      respType := DeploymentResourceResponse{DeploymentResource: &DeploymentResource{}}
		resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.DeploymentResource)
		if err != nil {
			return DeploymentResourceResponse{}, err
    }
    respType.RawResponse = resp
    return respType, nil
      }
  
  // HTTPPoller provides polling facilities until the operation completes
      type HTTPPoller interface {
        azcore.Poller

        // FinalResponse performs a final GET to the service and returns the final response
        // for the polling operation. If there is an error performing the final GET then an error is returned.
        // If the final GET succeeded then the final HTTPResponse will be returned.
        FinalResponse(ctx context.Context) (*http.Response, error)
      }

      type httpPoller struct {
        // the client for making the request
        pipeline azcore.Pipeline
        pt armcore.Poller
      }

      // Done returns true if there was an error or polling has reached a terminal state
      func (p *httpPoller) Done() bool {
        return p.pt.Done()
      }

      // Poll will send poll the service endpoint and return an http.Response or error received from the service
      func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
        return p.pt.Poll(ctx, p.pipeline)
      }

      func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
        return p.pt.FinalResponse(ctx, p.pipeline, nil)
      }

      // ResumeToken generates the string token that can be used with the ResumeHTTPPoller method
      // on the client to create a new poller from the data held in the current poller type
      func (p *httpPoller) ResumeToken() (string, error) {
        return p.pt.ResumeToken()
      }

      func (p *httpPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (*http.Response, error) {
      return p.pt.PollUntilDone(ctx, frequency, p.pipeline, nil)
      }
  
  