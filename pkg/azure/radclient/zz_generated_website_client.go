//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WebsiteClient contains the methods for the Website group.
// Don't use this type directly, use NewWebsiteClient() instead.
type WebsiteClient struct {
	ep string
	pl runtime.Pipeline
	subscriptionID string
}

// NewWebsiteClient creates a new instance of WebsiteClient with the specified values.
func NewWebsiteClient(con *arm.Connection, subscriptionID string) *WebsiteClient {
	return &WebsiteClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or updates a Website resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, parameters WebsiteResource, options *WebsiteBeginCreateOrUpdateOptions) (WebsiteCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, applicationName, websiteName, parameters, options)
	if err != nil {
		return WebsiteCreateOrUpdatePollerResponse{}, err
	}
	result := WebsiteCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("WebsiteClient.CreateOrUpdate", "location", resp, 	client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return WebsiteCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &WebsiteCreateOrUpdatePoller {
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates a Website resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) createOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, parameters WebsiteResource, options *WebsiteBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, applicationName, websiteName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	 return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *WebsiteClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, parameters WebsiteResource, options *WebsiteBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/Website/{websiteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if websiteName == "" {
		return nil, errors.New("parameter websiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{websiteName}", url.PathEscape(websiteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *WebsiteClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Deletes a Website resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) BeginDelete(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, options *WebsiteBeginDeleteOptions) (WebsiteDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, applicationName, websiteName, options)
	if err != nil {
		return WebsiteDeletePollerResponse{}, err
	}
	result := WebsiteDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("WebsiteClient.Delete", "location", resp, 	client.pl, client.deleteHandleError)
	if err != nil {
		return WebsiteDeletePollerResponse{}, err
	}
	result.Poller = &WebsiteDeletePoller {
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes a Website resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) deleteOperation(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, options *WebsiteBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, applicationName, websiteName, options)
	if err != nil {
		return nil, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WebsiteClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, options *WebsiteBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/Website/{websiteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if websiteName == "" {
		return nil, errors.New("parameter websiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{websiteName}", url.PathEscape(websiteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *WebsiteClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets a Website resource by name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) Get(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, options *WebsiteGetOptions) (WebsiteGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, applicationName, websiteName, options)
	if err != nil {
		return WebsiteGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return WebsiteGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return WebsiteGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *WebsiteClient) getCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, websiteName string, options *WebsiteGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/Website/{websiteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if websiteName == "" {
		return nil, errors.New("parameter websiteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{websiteName}", url.PathEscape(websiteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WebsiteClient) getHandleResponse(resp *http.Response) (WebsiteGetResponse, error) {
	result := WebsiteGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebsiteResource); err != nil {
		return WebsiteGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *WebsiteClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List the Website resources deployed in the application.
// If the operation fails it returns the *ErrorResponse error type.
func (client *WebsiteClient) List(ctx context.Context, resourceGroupName string, applicationName string, options *WebsiteListOptions) (WebsiteListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, applicationName, options)
	if err != nil {
		return WebsiteListResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return WebsiteListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return WebsiteListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *WebsiteClient) listCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, options *WebsiteListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/Website"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *WebsiteClient) listHandleResponse(resp *http.Response) (WebsiteListResponse, error) {
	result := WebsiteListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.WebsiteList); err != nil {
		return WebsiteListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *WebsiteClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

