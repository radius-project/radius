// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// DeploymentResourcePoller provides polling facilities until the operation reaches a terminal state.
type DeploymentResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DeploymentResourceResponse will be returned.
	FinalResponse(ctx context.Context) (DeploymentResourceResponse, error)
}

type deploymentResourcePoller struct {
	pt *armcore.LROPoller
}

func (p *deploymentResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *deploymentResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *deploymentResourcePoller) FinalResponse(ctx context.Context) (DeploymentResourceResponse, error) {
	respType := DeploymentResourceResponse{DeploymentResource: &DeploymentResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.DeploymentResource)
	if err != nil {
		return DeploymentResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *deploymentResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *deploymentResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DeploymentResourceResponse, error) {
	respType := DeploymentResourceResponse{DeploymentResource: &DeploymentResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.DeploymentResource)
	if err != nil {
		return DeploymentResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pt *armcore.LROPoller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, freq time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, freq, nil)
}

