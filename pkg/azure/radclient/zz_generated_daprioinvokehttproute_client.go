//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DaprIoInvokeHTTPRouteClient contains the methods for the DaprIoInvokeHTTPRoute group.
// Don't use this type directly, use NewDaprIoInvokeHTTPRouteClient() instead.
type DaprIoInvokeHTTPRouteClient struct {
	ep string
	pl runtime.Pipeline
	subscriptionID string
}

// NewDaprIoInvokeHTTPRouteClient creates a new instance of DaprIoInvokeHTTPRouteClient with the specified values.
func NewDaprIoInvokeHTTPRouteClient(con *arm.Connection, subscriptionID string) *DaprIoInvokeHTTPRouteClient {
	return &DaprIoInvokeHTTPRouteClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or updates a dapr.io.InvokeHttpRoute resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, parameters DaprInvokeHTTPRouteResource, options *DaprIoInvokeHTTPRouteBeginCreateOrUpdateOptions) (DaprIoInvokeHTTPRouteCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, applicationName, daprInvokeHTTPRouteName, parameters, options)
	if err != nil {
		return DaprIoInvokeHTTPRouteCreateOrUpdatePollerResponse{}, err
	}
	result := DaprIoInvokeHTTPRouteCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DaprIoInvokeHTTPRouteClient.CreateOrUpdate", "location", resp, 	client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return DaprIoInvokeHTTPRouteCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &DaprIoInvokeHTTPRouteCreateOrUpdatePoller {
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates a dapr.io.InvokeHttpRoute resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) createOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, parameters DaprInvokeHTTPRouteResource, options *DaprIoInvokeHTTPRouteBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, applicationName, daprInvokeHTTPRouteName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	 return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DaprIoInvokeHTTPRouteClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, parameters DaprInvokeHTTPRouteResource, options *DaprIoInvokeHTTPRouteBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/dapr.io.InvokeHttpRoute/{daprInvokeHttpRouteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *DaprIoInvokeHTTPRouteClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Deletes a dapr.io.InvokeHttpRoute resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) BeginDelete(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, options *DaprIoInvokeHTTPRouteBeginDeleteOptions) (DaprIoInvokeHTTPRouteDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, applicationName, daprInvokeHTTPRouteName, options)
	if err != nil {
		return DaprIoInvokeHTTPRouteDeletePollerResponse{}, err
	}
	result := DaprIoInvokeHTTPRouteDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DaprIoInvokeHTTPRouteClient.Delete", "location", resp, 	client.pl, client.deleteHandleError)
	if err != nil {
		return DaprIoInvokeHTTPRouteDeletePollerResponse{}, err
	}
	result.Poller = &DaprIoInvokeHTTPRouteDeletePoller {
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes a dapr.io.InvokeHttpRoute resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) deleteOperation(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, options *DaprIoInvokeHTTPRouteBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, applicationName, daprInvokeHTTPRouteName, options)
	if err != nil {
		return nil, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DaprIoInvokeHTTPRouteClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, options *DaprIoInvokeHTTPRouteBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/dapr.io.InvokeHttpRoute/{daprInvokeHttpRouteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DaprIoInvokeHTTPRouteClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets a dapr.io.InvokeHttpRoute resource by name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) Get(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, options *DaprIoInvokeHTTPRouteGetOptions) (DaprIoInvokeHTTPRouteGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, applicationName, daprInvokeHTTPRouteName, options)
	if err != nil {
		return DaprIoInvokeHTTPRouteGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprIoInvokeHTTPRouteGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprIoInvokeHTTPRouteGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DaprIoInvokeHTTPRouteClient) getCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, daprInvokeHTTPRouteName string, options *DaprIoInvokeHTTPRouteGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/dapr.io.InvokeHttpRoute/{daprInvokeHttpRouteName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DaprIoInvokeHTTPRouteClient) getHandleResponse(resp *http.Response) (DaprIoInvokeHTTPRouteGetResponse, error) {
	result := DaprIoInvokeHTTPRouteGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprInvokeHTTPRouteResource); err != nil {
		return DaprIoInvokeHTTPRouteGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *DaprIoInvokeHTTPRouteClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List the dapr.io.InvokeHttpRoute resources deployed in the application.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprIoInvokeHTTPRouteClient) List(ctx context.Context, resourceGroupName string, applicationName string, options *DaprIoInvokeHTTPRouteListOptions) (DaprIoInvokeHTTPRouteListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, applicationName, options)
	if err != nil {
		return DaprIoInvokeHTTPRouteListResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprIoInvokeHTTPRouteListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprIoInvokeHTTPRouteListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *DaprIoInvokeHTTPRouteClient) listCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, options *DaprIoInvokeHTTPRouteListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/dapr.io.InvokeHttpRoute"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DaprIoInvokeHTTPRouteClient) listHandleResponse(resp *http.Response) (DaprIoInvokeHTTPRouteListResponse, error) {
	result := DaprIoInvokeHTTPRouteListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprInvokeHTTPRouteList); err != nil {
		return DaprIoInvokeHTTPRouteListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *DaprIoInvokeHTTPRouteClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

