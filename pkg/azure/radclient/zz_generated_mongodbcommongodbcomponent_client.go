// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// MongodbComMongoDBComponentClient contains the methods for the MongodbComMongoDBComponent group.
// Don't use this type directly, use NewMongodbComMongoDBComponentClient() instead.
type MongodbComMongoDBComponentClient struct {
	con *armcore.Connection
	subscriptionID string
}

// NewMongodbComMongoDBComponentClient creates a new instance of MongodbComMongoDBComponentClient with the specified values.
func NewMongodbComMongoDBComponentClient(con *armcore.Connection, subscriptionID string) *MongodbComMongoDBComponentClient {
	return &MongodbComMongoDBComponentClient{con: con, subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Creates or updates a mongodb.com.MongoDBComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, parameters MongoDBComponentResource, options *MongodbComMongoDBComponentBeginCreateOrUpdateOptions) (MongoDBComponentResourcePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, applicationName, mongoDBComponentName, parameters, options)
	if err != nil {
		return MongoDBComponentResourcePollerResponse{}, err
	}
	result := MongoDBComponentResourcePollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewLROPoller("MongodbComMongoDBComponentClient.CreateOrUpdate", "location", resp, client.con.Pipeline(), client.createOrUpdateHandleError)
	if err != nil {
		return MongoDBComponentResourcePollerResponse{}, err
	}
	poller := &mongoDBComponentResourcePoller{
		pt: pt,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (MongoDBComponentResourceResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdate creates a new MongoDBComponentResourcePoller from the specified resume token.
// token - The value must come from a previous call to MongoDBComponentResourcePoller.ResumeToken().
func (client *MongodbComMongoDBComponentClient) ResumeCreateOrUpdate(ctx context.Context, token string) (MongoDBComponentResourcePollerResponse, error) {
	pt, err := armcore.NewLROPollerFromResumeToken("MongodbComMongoDBComponentClient.CreateOrUpdate", token, client.con.Pipeline(), client.createOrUpdateHandleError)
	if err != nil {
		return MongoDBComponentResourcePollerResponse{}, err
	}
	poller := &mongoDBComponentResourcePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return MongoDBComponentResourcePollerResponse{}, err
	}
	result := MongoDBComponentResourcePollerResponse{
		RawResponse: resp,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (MongoDBComponentResourceResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates a mongodb.com.MongoDBComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) createOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, parameters MongoDBComponentResource, options *MongodbComMongoDBComponentBeginCreateOrUpdateOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, applicationName, mongoDBComponentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	 return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MongodbComMongoDBComponentClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, parameters MongoDBComponentResource, options *MongodbComMongoDBComponentBeginCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/mongodb.com.MongoDBComponent/{mongoDBComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if mongoDBComponentName == "" {
		return nil, errors.New("parameter mongoDBComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mongoDBComponentName}", url.PathEscape(mongoDBComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *MongodbComMongoDBComponentClient) createOrUpdateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// BeginDelete - Deletes a mongodb.com.MongoDBComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) BeginDelete(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, options *MongodbComMongoDBComponentBeginDeleteOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, applicationName, mongoDBComponentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewLROPoller("MongodbComMongoDBComponentClient.Delete", "location", resp, client.con.Pipeline(), client.deleteHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt: pt,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDelete creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client *MongodbComMongoDBComponentClient) ResumeDelete(ctx context.Context, token string) (HTTPPollerResponse, error) {
	pt, err := armcore.NewLROPollerFromResumeToken("MongodbComMongoDBComponentClient.Delete", token, client.con.Pipeline(), client.deleteHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// Delete - Deletes a mongodb.com.MongoDBComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) deleteOperation(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, options *MongodbComMongoDBComponentBeginDeleteOptions) (*azcore.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, applicationName, mongoDBComponentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MongodbComMongoDBComponentClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, options *MongodbComMongoDBComponentBeginDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/mongodb.com.MongoDBComponent/{mongoDBComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if mongoDBComponentName == "" {
		return nil, errors.New("parameter mongoDBComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mongoDBComponentName}", url.PathEscape(mongoDBComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *MongodbComMongoDBComponentClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Gets a mongodb.com.MongoDBComponent resource by name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) Get(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, options *MongodbComMongoDBComponentGetOptions) (MongoDBComponentResourceResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, applicationName, mongoDBComponentName, options)
	if err != nil {
		return MongoDBComponentResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return MongoDBComponentResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return MongoDBComponentResourceResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MongodbComMongoDBComponentClient) getCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, mongoDBComponentName string, options *MongodbComMongoDBComponentGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/mongodb.com.MongoDBComponent/{mongoDBComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if mongoDBComponentName == "" {
		return nil, errors.New("parameter mongoDBComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{mongoDBComponentName}", url.PathEscape(mongoDBComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MongodbComMongoDBComponentClient) getHandleResponse(resp *azcore.Response) (MongoDBComponentResourceResponse, error) {
	var val *MongoDBComponentResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return MongoDBComponentResourceResponse{}, err
	}
return MongoDBComponentResourceResponse{RawResponse: resp.Response, MongoDBComponentResource: val}, nil
}

// getHandleError handles the Get error response.
func (client *MongodbComMongoDBComponentClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - List the mongodb.com.MongoDBComponent resources deployed in the application.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MongodbComMongoDBComponentClient) List(ctx context.Context, resourceGroupName string, applicationName string, options *MongodbComMongoDBComponentListOptions) (MongoDBComponentListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, applicationName, options)
	if err != nil {
		return MongoDBComponentListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return MongoDBComponentListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return MongoDBComponentListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *MongodbComMongoDBComponentClient) listCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, options *MongodbComMongoDBComponentListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/mongodb.com.MongoDBComponent"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MongodbComMongoDBComponentClient) listHandleResponse(resp *azcore.Response) (MongoDBComponentListResponse, error) {
	var val *MongoDBComponentList
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return MongoDBComponentListResponse{}, err
	}
return MongoDBComponentListResponse{RawResponse: resp.Response, MongoDBComponentList: val}, nil
}

// listHandleError handles the List error response.
func (client *MongodbComMongoDBComponentClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

