// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclient

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// ApplicationCreateOrUpdateOptions contains the optional parameters for the Application.CreateOrUpdate method.
type ApplicationCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationCreateParameters - Parameters used to create an application.
type ApplicationCreateParameters struct {
	// REQUIRED; Any object
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// ApplicationDeleteOptions contains the optional parameters for the Application.Delete method.
type ApplicationDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGetOptions contains the optional parameters for the Application.Get method.
type ApplicationGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationList - Application list.
type ApplicationList struct {
	// REQUIRED; List of applications.
	Value []*ApplicationResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationList.
func (a ApplicationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ApplicationListByResourceGroupOptions contains the optional parameters for the Application.ListByResourceGroup method.
type ApplicationListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ApplicationProperties - Properties of an application.
type ApplicationProperties struct {
	// Status of the application
	Status *ApplicationStatus `json:"status,omitempty"`
}

// ApplicationResource - Application resource.
type ApplicationResource struct {
	TrackedResource
	// Properties of the application.
	Properties *ApplicationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationResource.
func (a ApplicationResource) MarshalJSON() ([]byte, error) {
	objectMap := a.TrackedResource.marshalInternal()
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// ApplicationStatus - Status of an application.
type ApplicationStatus struct {
	// Health errors for the application
	HealthErrorDetails *string `json:"healthErrorDetails,omitempty"`

	// Health state of the application
	HealthState *string `json:"healthState,omitempty"`

	// Provisioning errors for the application
	ProvisioningErrorDetails *string `json:"provisioningErrorDetails,omitempty"`

	// Provisioning state of the application
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// ComponentCreateOrUpdateOptions contains the optional parameters for the Component.CreateOrUpdate method.
type ComponentCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ComponentCreateParameters - Parameters used to create a component.
type ComponentCreateParameters struct {
	// REQUIRED; Resource type of the component
	Kind *string `json:"kind,omitempty"`

	// REQUIRED; Properties of a component.
	Properties *ComponentProperties `json:"properties,omitempty"`
}

// ComponentDeleteOptions contains the optional parameters for the Component.Delete method.
type ComponentDeleteOptions struct {
	// placeholder for future optional parameters
}

// ComponentDependency - A binding used by an Radius Component
type ComponentDependency struct {
	Binding *string `json:"binding,omitempty"`

	// Dictionary of
	Env map[string]*string `json:"env,omitempty"`

	// Binding values that are stored in and read from a given secret store
	Secrets *ComponentDependencySecrets `json:"secrets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentDependency.
func (c ComponentDependency) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "binding", c.Binding)
	populate(objectMap, "env", c.Env)
	populate(objectMap, "secrets", c.Secrets)
	return json.Marshal(objectMap)
}

// ComponentDependencySecrets - Binding values that are stored in and read from a given secret store
type ComponentDependencySecrets struct {
	// Dictionary of
	Keys map[string]*string `json:"keys,omitempty"`
	Store *string `json:"store,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentDependencySecrets.
func (c ComponentDependencySecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "keys", c.Keys)
	populate(objectMap, "store", c.Store)
	return json.Marshal(objectMap)
}

// ComponentGetOptions contains the optional parameters for the Component.Get method.
type ComponentGetOptions struct {
	// placeholder for future optional parameters
}

// ComponentList - Component list.
type ComponentList struct {
	// REQUIRED; List of components.
	Value []*ComponentResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentList.
func (c ComponentList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ComponentListByApplicationOptions contains the optional parameters for the Component.ListByApplication method.
type ComponentListByApplicationOptions struct {
	// placeholder for future optional parameters
}

// ComponentProperties - Properties of a component.
type ComponentProperties struct {
	// Bindings spec of the component
	Bindings map[string]interface{} `json:"bindings,omitempty"`

	// Config of the component
	Config map[string]interface{} `json:"config,omitempty"`

	// Revision of the component
	Revision *string `json:"revision,omitempty"`

	// Run spec of the component
	Run map[string]interface{} `json:"run,omitempty"`

	// Status of the component
	Status *ComponentStatus `json:"status,omitempty"`

	// Traits spec of the component
	Traits []ComponentTraitClassification `json:"traits,omitempty"`

	// Uses spec of the component
	Uses []*ComponentDependency `json:"uses,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentProperties.
func (c ComponentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bindings", c.Bindings)
	populate(objectMap, "config", c.Config)
	populate(objectMap, "revision", c.Revision)
	populate(objectMap, "run", c.Run)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "traits", c.Traits)
	populate(objectMap, "uses", c.Uses)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ComponentProperties.
func (c *ComponentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "bindings":
				err = unpopulate(val, &c.Bindings)
				delete(rawMsg, key)
		case "config":
				err = unpopulate(val, &c.Config)
				delete(rawMsg, key)
		case "revision":
				err = unpopulate(val, &c.Revision)
				delete(rawMsg, key)
		case "run":
				err = unpopulate(val, &c.Run)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, &c.Status)
				delete(rawMsg, key)
		case "traits":
				c.Traits, err = unmarshalComponentTraitClassificationArray(val)
				delete(rawMsg, key)
		case "uses":
				err = unpopulate(val, &c.Uses)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ComponentResource - Component resource.
type ComponentResource struct {
	TrackedResource
	// REQUIRED; Resource type of the component
	Kind *string `json:"kind,omitempty"`

	// REQUIRED; Properties of the component.
	Properties *ComponentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentResource.
func (c ComponentResource) MarshalJSON() ([]byte, error) {
	objectMap := c.TrackedResource.marshalInternal()
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ComponentStatus - Status of a component.
type ComponentStatus struct {
	// Health state of the component
	HealthState *string `json:"healthState,omitempty"`
	OutputResources []map[string]interface{} `json:"outputResources,omitempty"`

	// Provisioning state of the component
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ComponentStatus.
func (c ComponentStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "healthState", c.HealthState)
	populate(objectMap, "outputResources", c.OutputResources)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	return json.Marshal(objectMap)
}

// ComponentTraitClassification provides polymorphic access to related types.
// Call the interface's GetComponentTrait() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ComponentTrait, *DaprTrait, *InboundRouteTrait, *ManualScalingTrait
type ComponentTraitClassification interface {
	// GetComponentTrait returns the ComponentTrait content of the underlying type.
	GetComponentTrait() *ComponentTrait
}

// ComponentTrait - Trait of a component.
type ComponentTrait struct {
	// REQUIRED; Trait kind.
	Kind *string `json:"kind,omitempty"`
}

// GetComponentTrait implements the ComponentTraitClassification interface for type ComponentTrait.
func (c *ComponentTrait) GetComponentTrait() *ComponentTrait { return c }

// UnmarshalJSON implements the json.Unmarshaller interface for type ComponentTrait.
func (c *ComponentTrait) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c ComponentTrait) marshalInternal(discValue string) map[string]interface{} {
	objectMap := make(map[string]interface{})
	c.Kind = &discValue
	objectMap["kind"] = c.Kind
	return objectMap
}

func (c *ComponentTrait) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
				err = unpopulate(val, &c.Kind)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DaprTrait - Dapr ComponentTrait
type DaprTrait struct {
	ComponentTrait
	// Dapr appId.
	AppID *string `json:"appId,omitempty"`

	// Dapr appPort.
	AppPort *int32 `json:"appPort,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprTrait.
func (d DaprTrait) MarshalJSON() ([]byte, error) {
	objectMap := d.ComponentTrait.marshalInternal("dapr.io/Sidecar@v1alpha1")
	populate(objectMap, "appId", d.AppID)
	populate(objectMap, "appPort", d.AppPort)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprTrait.
func (d *DaprTrait) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appId":
				err = unpopulate(val, &d.AppID)
				delete(rawMsg, key)
		case "appPort":
				err = unpopulate(val, &d.AppPort)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return d.ComponentTrait.unmarshalInternal(rawMsg)
}

// DeploymentBeginCreateOrUpdateOptions contains the optional parameters for the Deployment.BeginCreateOrUpdate method.
type DeploymentBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentBeginDeleteOptions contains the optional parameters for the Deployment.BeginDelete method.
type DeploymentBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DeploymentComponent - An entry of a component in a deployment
type DeploymentComponent struct {
	// REQUIRED
	ComponentName *string `json:"componentName,omitempty"`
	Revision *string `json:"revision,omitempty"`
}

// DeploymentCreateParameters - Parameters used to create a deployment.
type DeploymentCreateParameters struct {
	// REQUIRED; Properties of a deployment.
	Properties *DeploymentProperties `json:"properties,omitempty"`
}

// DeploymentGetOptions contains the optional parameters for the Deployment.Get method.
type DeploymentGetOptions struct {
	// placeholder for future optional parameters
}

// DeploymentList - Deployment list.
type DeploymentList struct {
	// REQUIRED; List of deployments.
	Value []*DeploymentResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentList.
func (d DeploymentList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeploymentListByApplicationOptions contains the optional parameters for the Deployment.ListByApplication method.
type DeploymentListByApplicationOptions struct {
	// placeholder for future optional parameters
}

// DeploymentProperties - Properties of a deployment.
type DeploymentProperties struct {
	// REQUIRED; List of components in the deployment.
	Components []*DeploymentComponent `json:"components,omitempty"`

	// READ-ONLY; The provisioning state of the Deployment
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentProperties.
func (d DeploymentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "components", d.Components)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	return json.Marshal(objectMap)
}

// DeploymentResource - Deployment resource.
type DeploymentResource struct {
	TrackedResource
	// REQUIRED; Properties of the deployment.
	Properties *DeploymentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResource.
func (d DeploymentResource) MarshalJSON() ([]byte, error) {
	objectMap := d.TrackedResource.marshalInternal()
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// InboundRouteTrait - InboundRoute ComponentTrait
type InboundRouteTrait struct {
	ComponentTrait
	// Binding name.
	Binding *string `json:"binding,omitempty"`

	// Host name.
	HostName *string `json:"hostName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InboundRouteTrait.
func (i InboundRouteTrait) MarshalJSON() ([]byte, error) {
	objectMap := i.ComponentTrait.marshalInternal("radius.dev/InboundRoute@v1alpha1")
	populate(objectMap, "binding", i.Binding)
	populate(objectMap, "hostName", i.HostName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InboundRouteTrait.
func (i *InboundRouteTrait) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "binding":
				err = unpopulate(val, &i.Binding)
				delete(rawMsg, key)
		case "hostName":
				err = unpopulate(val, &i.HostName)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return i.ComponentTrait.unmarshalInternal(rawMsg)
}

// ManualScalingTrait - ManualScaling ComponentTrait
type ManualScalingTrait struct {
	ComponentTrait
	// Replica count.
	Replicas *int32 `json:"replicas,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ManualScalingTrait.
func (m ManualScalingTrait) MarshalJSON() ([]byte, error) {
	objectMap := m.ComponentTrait.marshalInternal("radius.dev/ManualScaling@v1alpha1")
	populate(objectMap, "replicas", m.Replicas)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManualScalingTrait.
func (m *ManualScalingTrait) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "replicas":
				err = unpopulate(val, &m.Replicas)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return m.ComponentTrait.unmarshalInternal(rawMsg)
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return objectMap
}

// ScopeList - Scope list.
type ScopeList struct {
	// REQUIRED; List of scopes.
	Value []*ScopeResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScopeList.
func (s ScopeList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ScopeResource - Scope resource.
type ScopeResource struct {
	TrackedResource
	// Properties of the scope.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScopeResource.
func (s ScopeResource) MarshalJSON() ([]byte, error) {
	objectMap := s.TrackedResource.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := t.marshalInternal()
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal() map[string]interface{} {
	objectMap := t.Resource.marshalInternal()
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
	return objectMap
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

