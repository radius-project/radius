// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclientv3

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// ContainerComponentClient contains the methods for the ContainerComponent group.
// Don't use this type directly, use NewContainerComponentClient() instead.
type ContainerComponentClient struct {
	con *armcore.Connection
	subscriptionID string
}

// NewContainerComponentClient creates a new instance of ContainerComponentClient with the specified values.
func NewContainerComponentClient(con *armcore.Connection, subscriptionID string) *ContainerComponentClient {
	return &ContainerComponentClient{con: con, subscriptionID: subscriptionID}
}

// CreateOrUpdate - Creates or updates a ContainerComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ContainerComponentClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, parameters ContainerComponentResource, options *ContainerComponentCreateOrUpdateOptions) (ContainerComponentResourceResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, applicationName, containerComponentName, parameters, options)
	if err != nil {
		return ContainerComponentResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ContainerComponentResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return ContainerComponentResourceResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ContainerComponentClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, parameters ContainerComponentResource, options *ContainerComponentCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/ContainerComponent/{containerComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if containerComponentName == "" {
		return nil, errors.New("parameter containerComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerComponentName}", url.PathEscape(containerComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ContainerComponentClient) createOrUpdateHandleResponse(resp *azcore.Response) (ContainerComponentResourceResponse, error) {
	var val *ContainerComponentResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ContainerComponentResourceResponse{}, err
	}
return ContainerComponentResourceResponse{RawResponse: resp.Response, ContainerComponentResource: val}, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *ContainerComponentClient) createOrUpdateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Delete - Deletes a ContainerComponent resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ContainerComponentClient) Delete(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, options *ContainerComponentDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, applicationName, containerComponentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ContainerComponentClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, options *ContainerComponentDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/ContainerComponent/{containerComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if containerComponentName == "" {
		return nil, errors.New("parameter containerComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerComponentName}", url.PathEscape(containerComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ContainerComponentClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Gets a ContainerComponent resource by name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ContainerComponentClient) Get(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, options *ContainerComponentGetOptions) (ContainerComponentResourceResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, applicationName, containerComponentName, options)
	if err != nil {
		return ContainerComponentResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ContainerComponentResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerComponentResourceResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ContainerComponentClient) getCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, containerComponentName string, options *ContainerComponentGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/ContainerComponent/{containerComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if containerComponentName == "" {
		return nil, errors.New("parameter containerComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerComponentName}", url.PathEscape(containerComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ContainerComponentClient) getHandleResponse(resp *azcore.Response) (ContainerComponentResourceResponse, error) {
	var val *ContainerComponentResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ContainerComponentResourceResponse{}, err
	}
return ContainerComponentResourceResponse{RawResponse: resp.Response, ContainerComponentResource: val}, nil
}

// getHandleError handles the Get error response.
func (client *ContainerComponentClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - List the ContainerComponent resources deployed in the application.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ContainerComponentClient) List(ctx context.Context, resourceGroupName string, applicationName string, options *ContainerComponentListOptions) (ContainerComponentListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, applicationName, options)
	if err != nil {
		return ContainerComponentListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return ContainerComponentListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerComponentListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *ContainerComponentClient) listCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, options *ContainerComponentListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/ContainerComponent"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ContainerComponentClient) listHandleResponse(resp *azcore.Response) (ContainerComponentListResponse, error) {
	var val *ContainerComponentList
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return ContainerComponentListResponse{}, err
	}
return ContainerComponentListResponse{RawResponse: resp.Response, ContainerComponentList: val}, nil
}

// listHandleError handles the List error response.
func (client *ContainerComponentClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

