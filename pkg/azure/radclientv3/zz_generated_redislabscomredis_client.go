// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package radclientv3

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// RedislabsComRedisClient contains the methods for the RedislabsComRedis group.
// Don't use this type directly, use NewRedislabsComRedisClient() instead.
type RedislabsComRedisClient struct {
	con *armcore.Connection
	subscriptionID string
}

// NewRedislabsComRedisClient creates a new instance of RedislabsComRedisClient with the specified values.
func NewRedislabsComRedisClient(con *armcore.Connection, subscriptionID string) *RedislabsComRedisClient {
	return &RedislabsComRedisClient{con: con, subscriptionID: subscriptionID}
}

// CreateOrUpdate - Creates or updates a redislabs.com.Redis resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *RedislabsComRedisClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, parameters RedisComponentResource, options *RedislabsComRedisCreateOrUpdateOptions) (RedisComponentResourceResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, applicationName, redisComponentName, parameters, options)
	if err != nil {
		return RedisComponentResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RedisComponentResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return RedisComponentResourceResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RedislabsComRedisClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, parameters RedisComponentResource, options *RedislabsComRedisCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/redislabs.com.Redis/{redisComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if redisComponentName == "" {
		return nil, errors.New("parameter redisComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisComponentName}", url.PathEscape(redisComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *RedislabsComRedisClient) createOrUpdateHandleResponse(resp *azcore.Response) (RedisComponentResourceResponse, error) {
	var val *RedisComponentResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RedisComponentResourceResponse{}, err
	}
return RedisComponentResourceResponse{RawResponse: resp.Response, RedisComponentResource: val}, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *RedislabsComRedisClient) createOrUpdateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Delete - Deletes a redislabs.com.Redis resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *RedislabsComRedisClient) Delete(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, options *RedislabsComRedisDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, applicationName, redisComponentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteCreateRequest creates the Delete request.
func (client *RedislabsComRedisClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, options *RedislabsComRedisDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/redislabs.com.Redis/{redisComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if redisComponentName == "" {
		return nil, errors.New("parameter redisComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisComponentName}", url.PathEscape(redisComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *RedislabsComRedisClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Gets a redislabs.com.Redis resource by name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *RedislabsComRedisClient) Get(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, options *RedislabsComRedisGetOptions) (RedisComponentResourceResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, applicationName, redisComponentName, options)
	if err != nil {
		return RedisComponentResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RedisComponentResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return RedisComponentResourceResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *RedislabsComRedisClient) getCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, redisComponentName string, options *RedislabsComRedisGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/redislabs.com.Redis/{redisComponentName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	if redisComponentName == "" {
		return nil, errors.New("parameter redisComponentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{redisComponentName}", url.PathEscape(redisComponentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RedislabsComRedisClient) getHandleResponse(resp *azcore.Response) (RedisComponentResourceResponse, error) {
	var val *RedisComponentResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RedisComponentResourceResponse{}, err
	}
return RedisComponentResourceResponse{RawResponse: resp.Response, RedisComponentResource: val}, nil
}

// getHandleError handles the Get error response.
func (client *RedislabsComRedisClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - List the redislabs.com.Redis resources deployed in the application.
// If the operation fails it returns the *ErrorResponse error type.
func (client *RedislabsComRedisClient) List(ctx context.Context, resourceGroupName string, applicationName string, options *RedislabsComRedisListOptions) (RedisComponentListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, applicationName, options)
	if err != nil {
		return RedisComponentListResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RedisComponentListResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return RedisComponentListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *RedislabsComRedisClient) listCreateRequest(ctx context.Context, resourceGroupName string, applicationName string, options *RedislabsComRedisListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/radiusv3/Application/{applicationName}/redislabs.com.Redis"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if applicationName == "" {
		return nil, errors.New("parameter applicationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{applicationName}", url.PathEscape(applicationName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-09-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *RedislabsComRedisClient) listHandleResponse(resp *azcore.Response) (RedisComponentListResponse, error) {
	var val *RedisComponentList
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RedisComponentListResponse{}, err
	}
return RedisComponentListResponse{RawResponse: resp.Response, RedisComponentList: val}, nil
}

// listHandleError handles the List error response.
func (client *RedislabsComRedisClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

