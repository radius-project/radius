// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/controller/reconciler (interfaces: ArchiveFetcher)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_archivefetcher.go -package=reconciler -self_package github.com/radius-project/radius/pkg/controller/reconciler github.com/radius-project/radius/pkg/controller/reconciler ArchiveFetcher
//

// Package reconciler is a generated GoMock package.
package reconciler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArchiveFetcher is a mock of ArchiveFetcher interface.
type MockArchiveFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveFetcherMockRecorder
}

// MockArchiveFetcherMockRecorder is the mock recorder for MockArchiveFetcher.
type MockArchiveFetcherMockRecorder struct {
	mock *MockArchiveFetcher
}

// NewMockArchiveFetcher creates a new mock instance.
func NewMockArchiveFetcher(ctrl *gomock.Controller) *MockArchiveFetcher {
	mock := &MockArchiveFetcher{ctrl: ctrl}
	mock.recorder = &MockArchiveFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveFetcher) EXPECT() *MockArchiveFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockArchiveFetcher) Fetch(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch.
func (mr *MockArchiveFetcherMockRecorder) Fetch(arg0, arg1, arg2 any) *MockArchiveFetcherFetchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockArchiveFetcher)(nil).Fetch), arg0, arg1, arg2)
	return &MockArchiveFetcherFetchCall{Call: call}
}

// MockArchiveFetcherFetchCall wrap *gomock.Call
type MockArchiveFetcherFetchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArchiveFetcherFetchCall) Return(arg0 error) *MockArchiveFetcherFetchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArchiveFetcherFetchCall) Do(f func(string, string, string) error) *MockArchiveFetcherFetchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArchiveFetcherFetchCall) DoAndReturn(f func(string, string, string) error) *MockArchiveFetcherFetchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
