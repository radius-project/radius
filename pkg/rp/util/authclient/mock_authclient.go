// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/rp/util/authclient (interfaces: AuthClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_authclient.go -package=authclient -self_package github.com/radius-project/radius/pkg/rp/util/authclient github.com/radius-project/radius/pkg/rp/util/authclient AuthClient
//

// Package authclient is a generated GoMock package.
package authclient

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	remote "oras.land/oras-go/v2/registry/remote"
)

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// GetAuthClient mocks base method.
func (m *MockAuthClient) GetAuthClient(arg0 context.Context, arg1 string) (remote.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthClient", arg0, arg1)
	ret0, _ := ret[0].(remote.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthClient indicates an expected call of GetAuthClient.
func (mr *MockAuthClientMockRecorder) GetAuthClient(arg0, arg1 any) *MockAuthClientGetAuthClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthClient", reflect.TypeOf((*MockAuthClient)(nil).GetAuthClient), arg0, arg1)
	return &MockAuthClientGetAuthClientCall{Call: call}
}

// MockAuthClientGetAuthClientCall wrap *gomock.Call
type MockAuthClientGetAuthClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthClientGetAuthClientCall) Return(arg0 remote.Client, arg1 error) *MockAuthClientGetAuthClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthClientGetAuthClientCall) Do(f func(context.Context, string) (remote.Client, error)) *MockAuthClientGetAuthClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthClientGetAuthClientCall) DoAndReturn(f func(context.Context, string) (remote.Client, error)) *MockAuthClientGetAuthClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
