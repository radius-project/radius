//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// RabbitMqQueuesClient contains the methods for the RabbitMqQueues group.
// Don't use this type directly, use NewRabbitMqQueuesClient() instead.
type RabbitMqQueuesClient struct {
	host string
	rootScope string
	pl runtime.Pipeline
}

// NewRabbitMqQueuesClient creates a new instance of RabbitMqQueuesClient with the specified values.
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewRabbitMqQueuesClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*RabbitMqQueuesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RabbitMqQueuesClient{
		rootScope: rootScope,
		host: ep,
pl: pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a RabbitMQQueueResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQQueueName - The name of the RabbitMQQueue portable resource
// resource - Resource create parameters.
// options - RabbitMqQueuesClientCreateOrUpdateOptions contains the optional parameters for the RabbitMqQueuesClient.CreateOrUpdate
// method.
func (client *RabbitMqQueuesClient) CreateOrUpdate(ctx context.Context, rabbitMQQueueName string, resource RabbitMQQueueResource, options *RabbitMqQueuesClientCreateOrUpdateOptions) (RabbitMqQueuesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, rabbitMQQueueName, resource, options)
	if err != nil {
		return RabbitMqQueuesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMqQueuesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return RabbitMqQueuesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *RabbitMqQueuesClient) createOrUpdateCreateRequest(ctx context.Context, rabbitMQQueueName string, resource RabbitMQQueueResource, options *RabbitMqQueuesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Messaging/rabbitMQQueues/{rabbitMQQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQQueueName == "" {
		return nil, errors.New("parameter rabbitMQQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQQueueName}", url.PathEscape(rabbitMQQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *RabbitMqQueuesClient) createOrUpdateHandleResponse(resp *http.Response) (RabbitMqQueuesClientCreateOrUpdateResponse, error) {
	result := RabbitMqQueuesClientCreateOrUpdateResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return RabbitMqQueuesClientCreateOrUpdateResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQQueueResource); err != nil {
		return RabbitMqQueuesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an existing RabbitMQQueueResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQQueueName - The name of the RabbitMQQueue portable resource
// options - RabbitMqQueuesClientDeleteOptions contains the optional parameters for the RabbitMqQueuesClient.Delete method.
func (client *RabbitMqQueuesClient) Delete(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientDeleteOptions) (RabbitMqQueuesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, rabbitMQQueueName, options)
	if err != nil {
		return RabbitMqQueuesClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMqQueuesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return RabbitMqQueuesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *RabbitMqQueuesClient) deleteCreateRequest(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Messaging/rabbitMQQueues/{rabbitMQQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQQueueName == "" {
		return nil, errors.New("parameter rabbitMQQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQQueueName}", url.PathEscape(rabbitMQQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *RabbitMqQueuesClient) deleteHandleResponse(resp *http.Response) (RabbitMqQueuesClientDeleteResponse, error) {
	result := RabbitMqQueuesClientDeleteResponse{}
	if val := resp.Header.Get("Retry-After"); val != "" {
		retryAfter32, err := strconv.ParseInt(val, 10, 32)
		retryAfter := int32(retryAfter32)
		if err != nil {
			return RabbitMqQueuesClientDeleteResponse{}, err
		}
		result.RetryAfter = &retryAfter
	}
	return result, nil
}

// Get - Retrieves information about a RabbitMQQueueResource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQQueueName - The name of the RabbitMQQueue portable resource
// options - RabbitMqQueuesClientGetOptions contains the optional parameters for the RabbitMqQueuesClient.Get method.
func (client *RabbitMqQueuesClient) Get(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientGetOptions) (RabbitMqQueuesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, rabbitMQQueueName, options)
	if err != nil {
		return RabbitMqQueuesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMqQueuesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RabbitMqQueuesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *RabbitMqQueuesClient) getCreateRequest(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Messaging/rabbitMQQueues/{rabbitMQQueueName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQQueueName == "" {
		return nil, errors.New("parameter rabbitMQQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQQueueName}", url.PathEscape(rabbitMQQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RabbitMqQueuesClient) getHandleResponse(resp *http.Response) (RabbitMqQueuesClientGetResponse, error) {
	result := RabbitMqQueuesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQQueueResource); err != nil {
		return RabbitMqQueuesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByRootScopePager - Lists information about all RabbitMQQueueResources in the given root scope
// Generated from API version 2022-03-15-privatepreview
// options - RabbitMqQueuesClientListByRootScopeOptions contains the optional parameters for the RabbitMqQueuesClient.ListByRootScope
// method.
func (client *RabbitMqQueuesClient) NewListByRootScopePager(options *RabbitMqQueuesClientListByRootScopeOptions) (*runtime.Pager[RabbitMqQueuesClientListByRootScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[RabbitMqQueuesClientListByRootScopeResponse]{
		More: func(page RabbitMqQueuesClientListByRootScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *RabbitMqQueuesClientListByRootScopeResponse) (RabbitMqQueuesClientListByRootScopeResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByRootScopeCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return RabbitMqQueuesClientListByRootScopeResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return RabbitMqQueuesClientListByRootScopeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return RabbitMqQueuesClientListByRootScopeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByRootScopeHandleResponse(resp)
		},
	})
}

// listByRootScopeCreateRequest creates the ListByRootScope request.
func (client *RabbitMqQueuesClient) listByRootScopeCreateRequest(ctx context.Context, options *RabbitMqQueuesClientListByRootScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Messaging/rabbitMQQueues"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByRootScopeHandleResponse handles the ListByRootScope response.
func (client *RabbitMqQueuesClient) listByRootScopeHandleResponse(resp *http.Response) (RabbitMqQueuesClientListByRootScopeResponse, error) {
	result := RabbitMqQueuesClientListByRootScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQQueueResourceListResult); err != nil {
		return RabbitMqQueuesClientListByRootScopeResponse{}, err
	}
	return result, nil
}

// ListSecrets - Lists secrets values for the specified RabbitMQQueue resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// rabbitMQQueueName - The name of the RabbitMQQueue portable resource
// options - RabbitMqQueuesClientListSecretsOptions contains the optional parameters for the RabbitMqQueuesClient.ListSecrets
// method.
func (client *RabbitMqQueuesClient) ListSecrets(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientListSecretsOptions) (RabbitMqQueuesClientListSecretsResponse, error) {
	req, err := client.listSecretsCreateRequest(ctx, rabbitMQQueueName, options)
	if err != nil {
		return RabbitMqQueuesClientListSecretsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RabbitMqQueuesClientListSecretsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RabbitMqQueuesClientListSecretsResponse{}, runtime.NewResponseError(resp)
	}
	return client.listSecretsHandleResponse(resp)
}

// listSecretsCreateRequest creates the ListSecrets request.
func (client *RabbitMqQueuesClient) listSecretsCreateRequest(ctx context.Context, rabbitMQQueueName string, options *RabbitMqQueuesClientListSecretsOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Messaging/rabbitMQQueues/{rabbitMQQueueName}/listSecrets"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if rabbitMQQueueName == "" {
		return nil, errors.New("parameter rabbitMQQueueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rabbitMQQueueName}", url.PathEscape(rabbitMQQueueName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listSecretsHandleResponse handles the ListSecrets response.
func (client *RabbitMqQueuesClient) listSecretsHandleResponse(resp *http.Response) (RabbitMqQueuesClientListSecretsResponse, error) {
	result := RabbitMqQueuesClientListSecretsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RabbitMQListSecretsResult); err != nil {
		return RabbitMqQueuesClientListSecretsResponse{}, err
	}
	return result, nil
}

