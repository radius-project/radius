// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package objectformats

import (
	"strings"

	"github.com/project-radius/radius/pkg/cli/output"
)

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object which will be used to format the output of a table. The table will
//	have two columns, one for the application name and one for the resource count.
//
// </AiDoc: End of OpenAI comments>
func GetApplicationStatusTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "APPLICATION",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "RESOURCES",
				JSONPath: "{ .ResourceCount }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a table format for displaying information about application gateways. It is defining the
//	columns of the table, including the heading for each column and the JSON path for the data that will be displayed in
//	each column.
//
// </AiDoc: End of OpenAI comments>
func GetApplicationGatewaysTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "GATEWAY",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "ENDPOINT",
				JSONPath: "{ .Endpoint }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object that will be used to format the output of a table. It is defining
//	two columns, one for the resource name and one for the resource type.
//
// </AiDoc: End of OpenAI comments>
func GetResourceTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "RESOURCE",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "TYPE",
				JSONPath: "{ .Type }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object that will be used to format the output of a table. It is specifying
//	the columns that will be included in the table, which are the ID and Name of the resource group.
//
// </AiDoc: End of OpenAI comments>
func GetResourceGroupTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "ID",
				JSONPath: "{ .id }",
			},
			{
				Heading:  "Name",
				JSONPath: "{ .name }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object that will be used to format the output of a table. The table will
//	have one column, with the heading "NAME" and the data for the column will be taken from the "Name" field of the object.
//
// </AiDoc: End of OpenAI comments>
func GetGenericEnvironmentTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "NAME",
				JSONPath: "{ .Name }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object that will be used to format the output of a table. The table will
//	have one column, with the heading "errors:", and the data in the column will be taken from the "Errors" field of the
//	object.
//
// </AiDoc: End of OpenAI comments>
func GetGenericEnvErrorTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "errors:",
				JSONPath: "{ .Errors }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is creating a formatter options object which contains the columns and headings for a table format. The
//	columns are "WORKSPACE", "KIND", "KUBECONTEXT", and "ENVIRONMENT". The headings for each column are set to the
//	corresponding JSONPath values.
//
// </AiDoc: End of OpenAI comments>
func GetWorkspaceTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "WORKSPACE",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "KIND",
				JSONPath: "{ .Connection.kind }",
			},
			{
				Heading:  "KUBECONTEXT",
				JSONPath: "{ .Connection.context }",
			},
			{
				Heading:  "ENVIRONMENT",
				JSONPath: "{ .Environment }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The previous function is creating a formatter for a table that will display the name and status of a cloud provider. It
//	defines the columns of the table and the JSONPaths for the data that will be displayed in each column.
//
// </AiDoc: End of OpenAI comments>
func CloudProviderTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "NAME",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "Status",
				JSONPath: "{ .Enabled }",
			},
		},
	}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	The function is taking in a credential type as a parameter and returning a FormatterOptions object. Depending on the
//	credential type, the FormatterOptions object will contain different columns. If the credential type is "azure", the
//	FormatterOptions object will contain columns for Name, Status, ClientID, and TenantID. If the credential type is "aws",
//	the FormatterOptions object will contain columns for Name, Status, and AccessKeyID.
//
// </AiDoc: End of OpenAI comments>
func GetCloudProviderTableFormat(credentialType string) output.FormatterOptions {
	if strings.EqualFold(credentialType, "azure") {
		return output.FormatterOptions{
			Columns: []output.Column{
				{
					Heading:  "NAME",
					JSONPath: "{ .Name }",
				},
				{
					Heading:  "Status",
					JSONPath: "{ .Enabled }",
				},
				{
					Heading:  "ClientID",
					JSONPath: "{ .AzureCredentials.ClientID }",
				},
				{
					Heading:  "TenantID",
					JSONPath: "{ .AzureCredentials.TenantID }",
				},
			},
		}
	} else if strings.EqualFold(credentialType, "aws") {
		return output.FormatterOptions{
			Columns: []output.Column{
				{
					Heading:  "NAME",
					JSONPath: "{ .Name }",
				},
				{
					Heading:  "Status",
					JSONPath: "{ .Enabled }",
				},
				{
					Heading:  "AccessKeyID",
					JSONPath: "{ .AWSCredentials.AccessKeyID }",
				},
			},
		}
	}
	return output.FormatterOptions{}
}

// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//
//	This function is creating a formatter options object that will be used to format the output of a table. It is defining
//	the columns of the table, including the heading of each column and the JSON path for each column.
//
// </AiDoc: End of OpenAI comments>
func GetEnvironmentRecipesTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "NAME",
				JSONPath: "{ .Name }",
			},
			{
				Heading:  "TYPE",
				JSONPath: "{ .LinkType }",
			},
			{
				Heading:  "TEMPLATE",
				JSONPath: "{ .TemplatePath }",
			},
		},
	}
}

type OutputEnvObject struct {
	EnvName     string
	ComputeKind string
	Recipes     int
	Providers   int
}

// GetUpdateEnvironmentTableFormat returns the fields to output from env object after upation.
func GetUpdateEnvironmentTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "NAME",
				JSONPath: "{ .EnvName }",
			},
			{
				Heading:  "COMPUTE",
				JSONPath: "{ .ComputeKind }",
			},
			{
				Heading:  "RECIPES",
				JSONPath: "{ .Recipes }",
			},
			{
				Heading:  "PROVIDERS",
				JSONPath: "{ .Providers }",
			},
		},
	}
}

func GetRecipeParamsTableFormat() output.FormatterOptions {
	return output.FormatterOptions{
		Columns: []output.Column{
			{
				Heading:  "RECIPE NAME",
				JSONPath: "{ .RecipeName }",
			},
			{
				Heading:  "TYPE",
				JSONPath: "{ .LinkType }",
			},
			{
				Heading:  "TEMPLATE",
				JSONPath: "{ .TemplatePath }",
			},
			{
				Heading:  "PARAMETER NAME",
				JSONPath: "{ .ParameterName }",
			},
			{
				Heading:  "PARAMETER DETAIL NAME",
				JSONPath: "{ .ParameterDetailName }",
			},
			{
				Heading:  "PARAMETER DETAIL VALUE",
				JSONPath: "{ .ParameterDetailValue }",
			},
		},
	}
}
