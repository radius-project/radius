//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package generated

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GenericResourcesClient contains the methods for the GenericResources group.
// Don't use this type directly, use NewGenericResourcesClient() instead.
type GenericResourcesClient struct {
	ep string
	pl runtime.Pipeline
	rootScope string
	resourceType string
}

// NewGenericResourcesClient creates a new instance of GenericResourcesClient with the specified values.
func NewGenericResourcesClient(con *arm.Connection, rootScope string, resourceType string) *GenericResourcesClient {
	return &GenericResourcesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), rootScope: rootScope, resourceType: resourceType}
}

// CreateOrUpdate - Creates or updates a Generic resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *GenericResourcesClient) CreateOrUpdate(ctx context.Context, resourceName string, genericResourceParameters GenericResource, options *GenericResourcesCreateOrUpdateOptions) (GenericResourcesCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceName, genericResourceParameters, options)
	if err != nil {
		return GenericResourcesCreateOrUpdateResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return GenericResourcesCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return GenericResourcesCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *GenericResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceName string, genericResourceParameters GenericResource, options *GenericResourcesCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if client.resourceType == "" {
		return nil, errors.New("parameter client.resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(client.resourceType))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, genericResourceParameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *GenericResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (GenericResourcesCreateOrUpdateResponse, error) {
	result := GenericResourcesCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResource); err != nil {
		return GenericResourcesCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *GenericResourcesClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes an existing Generic resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *GenericResourcesClient) Delete(ctx context.Context, resourceName string, options *GenericResourcesDeleteOptions) (GenericResourcesDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceName, options)
	if err != nil {
		return GenericResourcesDeleteResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return GenericResourcesDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return GenericResourcesDeleteResponse{}, client.deleteHandleError(resp)
	}
	return GenericResourcesDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *GenericResourcesClient) deleteCreateRequest(ctx context.Context, resourceName string, options *GenericResourcesDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if client.resourceType == "" {
		return nil, errors.New("parameter client.resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(client.resourceType))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *GenericResourcesClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Retrieves information about a generic resource with the name given of the type given within the root scope
// If the operation fails it returns the *ErrorResponse error type.
func (client *GenericResourcesClient) Get(ctx context.Context, resourceName string, options *GenericResourcesGetOptions) (GenericResourcesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceName, options)
	if err != nil {
		return GenericResourcesGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return GenericResourcesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GenericResourcesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *GenericResourcesClient) getCreateRequest(ctx context.Context, resourceName string, options *GenericResourcesGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if client.resourceType == "" {
		return nil, errors.New("parameter client.resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(client.resourceType))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GenericResourcesClient) getHandleResponse(resp *http.Response) (GenericResourcesGetResponse, error) {
	result := GenericResourcesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResource); err != nil {
		return GenericResourcesGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *GenericResourcesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByRootScope - Lists information about all resources of the given resource type in the given root scope
// If the operation fails it returns the *ErrorResponse error type.
func (client *GenericResourcesClient) ListByRootScope(options *GenericResourcesListByRootScopeOptions) (*GenericResourcesListByRootScopePager) {
	return &GenericResourcesListByRootScopePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByRootScopeCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp GenericResourcesListByRootScopeResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.GenericResourcesList.NextLink)
		},
	}
}

// listByRootScopeCreateRequest creates the ListByRootScope request.
func (client *GenericResourcesClient) listByRootScopeCreateRequest(ctx context.Context, options *GenericResourcesListByRootScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if client.resourceType == "" {
		return nil, errors.New("parameter client.resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(client.resourceType))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByRootScopeHandleResponse handles the ListByRootScope response.
func (client *GenericResourcesClient) listByRootScopeHandleResponse(resp *http.Response) (GenericResourcesListByRootScopeResponse, error) {
	result := GenericResourcesListByRootScopeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResourcesList); err != nil {
		return GenericResourcesListByRootScopeResponse{}, err
	}
	return result, nil
}

// listByRootScopeHandleError handles the ListByRootScope error response.
func (client *GenericResourcesClient) listByRootScopeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

