//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GenericResourcesClient contains the methods for the GenericResources group.
// Don't use this type directly, use NewGenericResourcesClient() instead.
type GenericResourcesClient struct {
	host string
	rootScope string
	resourceType string
	pl runtime.Pipeline
}

// NewGenericResourcesClient creates a new instance of GenericResourcesClient with the specified values.
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroups/{resourcegroupID}
// resourceType - The azure resource type. For example RedisCache, RabbitMQ and other
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new GenericResourcesClient by taking in a rootScope, resourceType, credential, and options as 
//	parameters. It then creates a new Pipeline using the provided credential and options, and creates a new 
//	GenericResourcesClient with the provided rootScope, resourceType, host, and Pipeline.
//
// </AiDoc: End of OpenAI comments>
func NewGenericResourcesClient(rootScope string, resourceType string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GenericResourcesClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &GenericResourcesClient{
		rootScope: rootScope,
		resourceType: resourceType,
		host: ep,
pl: pl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a Generic resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// resourceName - The name of the generic resource
// genericResourceParameters - generic resource create parameters
// options - GenericResourcesClientCreateOrUpdateOptions contains the optional parameters for the GenericResourcesClient.CreateOrUpdate
// method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates or updates a generic resource with the given parameters. It sends a request to the server, checks 
//	the response status code, and handles the response accordingly.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) CreateOrUpdate(ctx context.Context, resourceName string, genericResourceParameters GenericResource, options *GenericResourcesClientCreateOrUpdateOptions) (GenericResourcesClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceName, genericResourceParameters, options)
	if err != nil {
		return GenericResourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GenericResourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return GenericResourcesClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a request to create or update a generic resource with the given name and parameters. It sets the 
//	URL path, sets the query parameters, sets the header, and marshals the parameters into the request.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) createOrUpdateCreateRequest(ctx context.Context, resourceName string, genericResourceParameters GenericResource, options *GenericResourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", client.resourceType)
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, genericResourceParameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is taking an http response and attempting to unmarshal it into a GenericResource object. If successful, it
//	 will return the GenericResource object in a GenericResourcesClientCreateOrUpdateResponse object. If unsuccessful, it 
//	will return an error.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) createOrUpdateHandleResponse(resp *http.Response) (GenericResourcesClientCreateOrUpdateResponse, error) {
	result := GenericResourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResource); err != nil {
		return GenericResourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Deletes an existing Generic resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// resourceName - The name of the generic resource
// options - GenericResourcesClientBeginDeleteOptions contains the optional parameters for the GenericResourcesClient.BeginDelete
// method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to begin the process of deleting a resource. It checks if the options parameter is nil or if the 
//	resume token is empty, and if so, it calls the deleteOperation function and creates a new poller with the response from 
//	the deleteOperation function. If the resume token is not empty, it creates a new poller from the resume token.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) BeginDelete(ctx context.Context, resourceName string, options *GenericResourcesClientBeginDeleteOptions) (*runtime.Poller[GenericResourcesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[GenericResourcesClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[GenericResourcesClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes an existing Generic resource
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is making a delete request to a resource with the given name and options. It then checks the response 
//	status code and returns the response and an error if the status code is not OK, Accepted, or No Content.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) deleteOperation(ctx context.Context, resourceName string, options *GenericResourcesClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	 return resp, nil
}

// deleteCreateRequest creates the Delete request.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a request to delete a resource with the given name. It sets the URL path, the query parameters, 
//	the request method, and the header.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) deleteCreateRequest(ctx context.Context, resourceName string, options *GenericResourcesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", client.resourceType)
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Retrieves information about a generic resource with the name given of the type given within the root scope
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// resourceName - The name of the generic resource
// options - GenericResourcesClientGetOptions contains the optional parameters for the GenericResourcesClient.Get method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is making a request to a server to get a resource with the given name and options. It then checks the 
//	response status code and if it is successful, it handles the response.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) Get(ctx context.Context, resourceName string, options *GenericResourcesClientGetOptions) (GenericResourcesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceName, options)
	if err != nil {
		return GenericResourcesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GenericResourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GenericResourcesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a request to get a resource with the given name from the given resource type. It sets the URL 
//	path, the query parameters, the request method, and the header.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) getCreateRequest(ctx context.Context, resourceName string, options *GenericResourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}/{resourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", client.resourceType)
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is taking an http response and attempting to unmarshal it into a GenericResource object. If successful, it
//	 will return the GenericResource object in a GenericResourcesClientGetResponse object. If unsuccessful, it will return 
//	an error.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) getHandleResponse(resp *http.Response) (GenericResourcesClientGetResponse, error) {
	result := GenericResourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResource); err != nil {
		return GenericResourcesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByRootScopePager - Lists information about all resources of the given resource type in the given root scope
// Generated from API version 2022-03-15-privatepreview
// options - GenericResourcesClientListByRootScopeOptions contains the optional parameters for the GenericResourcesClient.ListByRootScope
// method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new pager which can be used to page through a list of 
//	GenericResourcesClientListByRootScopeResponse objects. It takes an options parameter which is used to create a request 
//	for the first page of results. It then defines a function which can be used to determine if there are more pages of 
//	results and a function which can be used to fetch the next page of results.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) NewListByRootScopePager(options *GenericResourcesClientListByRootScopeOptions) (*runtime.Pager[GenericResourcesClientListByRootScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[GenericResourcesClientListByRootScopeResponse]{
		More: func(page GenericResourcesClientListByRootScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GenericResourcesClientListByRootScopeResponse) (GenericResourcesClientListByRootScopeResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByRootScopeCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return GenericResourcesClientListByRootScopeResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return GenericResourcesClientListByRootScopeResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return GenericResourcesClientListByRootScopeResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByRootScopeHandleResponse(resp)
		},
	})
}

// listByRootScopeCreateRequest creates the ListByRootScope request.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a request to list resources of a given type in a given root scope. It sets the API version and the
//	 accept header to application/json.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) listByRootScopeCreateRequest(ctx context.Context, options *GenericResourcesClientListByRootScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/{resourceType}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", client.resourceType)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByRootScopeHandleResponse handles the ListByRootScope response.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is taking an http response and attempting to unmarshal it into a 
//	GenericResourcesClientListByRootScopeResponse object. If successful, it will return the object, otherwise it will return
//	 an error.
//
// </AiDoc: End of OpenAI comments>
func (client *GenericResourcesClient) listByRootScopeHandleResponse(resp *http.Response) (GenericResourcesClientListByRootScopeResponse, error) {
	result := GenericResourcesClientListByRootScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GenericResourcesList); err != nil {
		return GenericResourcesClientListByRootScopeResponse{}, err
	}
	return result, nil
}

