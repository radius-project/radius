// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package text

import (
	"fmt"

	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type (
	errMsg error
)

var (
	QuitTextStyle = lipgloss.NewStyle().Margin(1, 0, 2, 4)
)

// Model is text model for bubble tea.
type Model struct {
	textInput    textinput.Model
	promptMsg    string
	valueEntered bool
	Quitting     bool
	err          error
}

// NewTextModel returns a new text model with prompt message.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new Model object with a textinput, a prompt message, a boolean value indicating whether a value 
//	has been entered, and an error. The textinput is set with a placeholder and a width of 20.
//
// </AiDoc: End of OpenAI comments>
func NewTextModel(promptMsg string, placeHolder string) Model {
	ti := textinput.New()
	ti.Placeholder = placeHolder
	ti.Focus()
	ti.Width = 20

	return Model{
		textInput:    ti,
		promptMsg:    promptMsg,
		valueEntered: false,
		err:          nil,
	}
}

// Init returns initial tea command for text input.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is initializing a Model object and returning a command from the textinput package.
//
// </AiDoc: End of OpenAI comments>
func (m Model) Init() tea.Cmd {
	return textinput.Blink
}

// Update updates model with input form user.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is handling different types of messages. Depending on the type of message, it will update the model and 
//	return a command. If the message is a KeyMsg, it will check the type of key and take the appropriate action. If the 
//	message is an errMsg, it will update the model with the error. Finally, it will update the textInput and return the 
//	command.
//
// </AiDoc: End of OpenAI comments>
func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.Type {
		case tea.KeyEnter:
			m.valueEntered = true
			return m, tea.Quit
		case tea.KeyCtrlC, tea.KeyEsc:
			m.Quitting = true
			return m, tea.Quit
		}

	// We handle errors just like any other message
	case errMsg:
		m.err = msg
		return m, nil
	}
	m.textInput, cmd = m.textInput.Update(msg)
	return m, cmd
}

// View renders a view with user selected value.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is displaying a prompt message, a text input, and a message to quit. Depending on whether a value has been
//	 entered into the text input, it will either display the prompt message and the text input, or the prompt message and 
//	the placeholder for the text input.
//
// </AiDoc: End of OpenAI comments>
func (m Model) View() string {
	if m.valueEntered {
		if m.textInput.Value() == "" {
			return QuitTextStyle.Render(fmt.Sprintf("%s: %s", m.promptMsg, m.textInput.Placeholder))
		} else {
			return QuitTextStyle.Render(fmt.Sprintf("%s: %s", m.promptMsg, m.textInput.Value()))
		}

	}
	return fmt.Sprintf("%s\n\n%s\n\n%s", m.promptMsg, m.textInput.View(), "(esc to quit)")
}

// GetValue returns the input from the user.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the value of a text input field from a model.
//
// </AiDoc: End of OpenAI comments>
func (m Model) GetValue() string {
	return m.textInput.Value()
}
