// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/prompt (interfaces: Interface)

// Package prompt is a generated GoMock package.
package prompt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new mock interface object using the given controller. It also creates a recorder for the mock 
//	interface and returns the mock interface.
//
// </AiDoc: End of OpenAI comments>
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function returns a MockInterfaceMockRecorder object, which is used to record expectations for the MockInterface 
//	object.
//
// </AiDoc: End of OpenAI comments>
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetListInput mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is a mock interface for a function that takes two arguments, an array of strings and a string, and returns
//	 a string and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockInterface) GetListInput(arg0 []string, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListInput", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListInput indicates an expected call of GetListInput.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is recording a call to the GetListInput method of the MockInterface interface, with the given arguments 
//	arg0 and arg1.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockInterfaceMockRecorder) GetListInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListInput", reflect.TypeOf((*MockInterface)(nil).GetListInput), arg0, arg1)
}

// GetTextInput mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is a mock interface for a GetTextInput function. It takes two strings as arguments and returns a string 
//	and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockInterface) GetTextInput(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextInput", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextInput indicates an expected call of GetTextInput.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a record of a call to the GetTextInput function of the MockInterface interface, with two 
//	parameters.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockInterfaceMockRecorder) GetTextInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextInput", reflect.TypeOf((*MockInterface)(nil).GetTextInput), arg0, arg1)
}
