// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package prompt

import (
	"errors"
	"fmt"
	"regexp"
	"strings"

	"github.com/charmbracelet/bubbles/list"
	tea "github.com/charmbracelet/bubbletea"
	cli_list "github.com/project-radius/radius/pkg/cli/prompt/list"
	"github.com/project-radius/radius/pkg/cli/prompt/text"
)

type BinaryAnswer int

const (
	unknown              = -1
	Yes     BinaryAnswer = iota
	No

	InvalidResourceNameMessage = "name must be made up of alphanumeric characters and hyphens, and must begin with an alphabetic character and end with an alphanumeric character"
	ErrExitConsoleMessage      = "exiting command"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is taking in a variable number of functions as parameters and returning a single function. This 
//	returned function takes in a string as a parameter and then runs each of the functions passed in as parameters on the 
//	string. If any of the functions return false, the returned function will also return false. If all of the functions 
//	return true, the returned function will also return true.
//
// </AiDoc: End of OpenAI comments>
func MatchAll(validators ...func(string) (bool, string, error)) func(string) (bool, string, error) {
	return func(input string) (bool, string, error) {
		for _, validator := range validators {
			result, message, err := validator(input)
			if err != nil {
				return false, "", err
			} else if !result {
				return false, message, nil
			}
		}

		return true, "", nil
	}
}

// EmptyValidator is a validation func that always returns true.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The EmptyValidator function is a function that takes in a string as an argument and returns a boolean value of true, an 
//	empty string, and no error. This function is essentially a validator that always returns true, indicating that the 
//	string is valid.
//
// </AiDoc: End of OpenAI comments>
func EmptyValidator(string) (bool, string, error) {
	return true, "", nil
}

// Largely matches https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	
 
//	The function is checking if the input string is a valid resource name. It checks if the string starts with a letter, 
//	contains only letters, numbers, and hyphens, and ends with a letter or number. If the input string meets these criteria,
//	 the function returns true, otherwise it returns false.
//
// </AiDoc: End of OpenAI comments>
func ResourceName(input string) (bool, string, error) {
	r := regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$")
	return r.MatchString(input), InvalidResourceNameMessage, nil
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The function is checking if the input string is a valid UUIDv4. It does this by using a regular expression to check if 
//	the string matches the format of a UUIDv4.
//
// </AiDoc: End of OpenAI comments>
func UUIDv4Validator(uuid string) (bool, string, error) {
	r := regexp.MustCompile("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$")
	return r.MatchString(uuid), "input is not a valid uuid", nil
}

// Confirm prompts the user to confirm the answer to a yes/no question.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The function is prompting the user for a yes or no answer to a question. If the user does not enter anything, the 
//	function will return the default answer that was provided. If the user enters "y" or "n", the function will return a 
//	boolean value based on the answer. If the user enters something other than "y" or "n", the function will prompt the user
//	 again.
//
// </AiDoc: End of OpenAI comments>
func ConfirmWithDefault(prompt string, defaultAns BinaryAnswer) (bool, error) {
	confirmed := false
	for {
		fmt.Print(prompt)
		fmt.Print(" ")

		input := ""
		count, err := fmt.Scanln(&input)
		if count == 0 && defaultAns != unknown {
			return defaultAns == Yes, nil
		} else if err != nil {
			return false, errors.New("nothing entered")
		}

		if strings.EqualFold("y", input) {
			confirmed = true
			break
		} else if strings.EqualFold("n", input) {
			confirmed = false
			break
		}
	}

	return confirmed, nil
}

// Confirm prompts the user to confirm the answer to a yes/no question.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function prompts the user with a given string and returns a boolean value and an error. It does this by calling the
//	 ConfirmWithDefault function, passing in the prompt string and a value of "unknown".
//
// </AiDoc: End of OpenAI comments>
func Confirm(prompt string) (bool, error) {
	return ConfirmWithDefault(prompt, unknown)
}

// Text prompts the user to enter some freeform text.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes in a prompt string and a validator function as parameters and returns a string and an error. It 
//	calls the TextWithDefault function, passing in the prompt string and a nil value for the default value.
//
// </AiDoc: End of OpenAI comments>
func Text(prompt string, validator func(string) (bool, string, error)) (string, error) {
	return TextWithDefault(prompt, nil, validator)
}

// TextWithDefault prompts the user to enter some freeform text while offering a default value to set when the user doesn't enter any input (sends '\n')
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The function is prompting the user for input and validating it. If the user does not enter anything, the function will 
//	use a default value if one is provided. If the user does enter something, the function will validate the input using a 
//	validator function. If the input is valid, the function will return the input. If the input is not valid, the function 
//	will print an error message and prompt the user for input again.
//
// </AiDoc: End of OpenAI comments>
func TextWithDefault(prompt string, defaultValue *string, validator func(string) (bool, string, error)) (string, error) {
	input := ""
	for {
		fmt.Print(prompt)
		fmt.Print(" ")

		count, err := fmt.Scanln(&input)
		if count == 0 && defaultValue != nil {
			return *defaultValue, nil
		} else if err != nil {
			return "", errors.New("nothing entered")
		}

		valid, message, err := validator(input)
		if err != nil {
			return "", err
		} else if valid {
			break
		}

		if message != "" {
			fmt.Println(message)
		}
	}
	return input, nil
}

// Select prompts the user to choose from the possible options while offering a default value when the user doesn't enter any input (sends '\n')
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is prompting the user to make a selection from a list of choices. It prints out the prompt and the list of
//	 choices, then asks the user to enter a number to make their choice. If a default choice is provided, it will be 
//	pre-selected. The function will then check if the user has entered a valid number and if so, it will return the 
//	selection.
//
// </AiDoc: End of OpenAI comments>
func SelectWithDefault(prompt string, defaultChoice *string, choices []string) (int, error) {
	fmt.Println(prompt)
	fmt.Println("")
	var defaultSelection int
	for i, c := range choices {
		if defaultChoice != nil && c == *defaultChoice {
			defaultSelection = i
		}
		fmt.Printf("\t%3d: %v\n", i, c)
	}

	selected := 0
	for {
		fmt.Printf("Enter a # to make your choice [%d]: ", defaultSelection)

		count, err := fmt.Scanln(&selected)
		if count == 0 && defaultChoice != nil {
			return defaultSelection, nil
		} else if err != nil {
			return 0, errors.New("nothing selected")
		}

		if selected >= 0 && selected < len(choices) {
			break
		}

		fmt.Printf("%d is not a valid choice\n", selected)
	}

	return selected, nil
}

//go:generate mockgen -destination=./mock_prompter.go -package=prompt -self_package github.com/project-radius/radius/pkg/cli/prompt github.com/project-radius/radius/pkg/cli/prompt Interface

// Interface contains operation to get user inputs for cli
type Interface interface {
	// GetTextInput prompts user for a text input
	GetTextInput(promptMsg string, defaultPlaceHolder string) (string, error)

	// GetListInput prompts user to select from a list
	GetListInput(items []string, promptMsg string) (string, error)
}

// Impl implements BubbleTeaPrompter
type Impl struct{}

// GetTextInput prompts user for a text input
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is prompting the user for a text input, with a given prompt message and a default placeholder. It then 
//	runs the program and checks if the user is quitting. If not, it returns the value of the text input.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetTextInput(promptMsg string, defaultPlaceHolder string) (string, error) {
	// TODO: implement text model
	tm := text.NewTextModel(promptMsg, defaultPlaceHolder)

	model, err := tea.NewProgram(tm).Run()
	if err != nil {
		return "", err
	}
	tm, ok := model.(text.Model)
	if !ok {
		return "", &ErrUnsupportedModel{}
	}
	if tm.Quitting {
		return "", &ErrExitConsole{}
	}

	return tm.GetValue(), nil
}

// GetListInput prompts user to select from a list
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes in a list of strings and a prompt message as inputs and returns a string and an error. It creates a 
//	list model using the list of strings and prompt message, then runs the program and checks if the user has quit the 
//	console. If the user has not quit, it returns the user's choice as a string.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetListInput(items []string, promptMsg string) (string, error) {
	lm := cli_list.NewListModel(items, promptMsg)

	lm.List.Styles = list.Styles{}
	model, err := tea.NewProgram(lm).Run()
	if err != nil {
		return "", err
	}

	lm, ok := model.(cli_list.ListModel)
	if !ok {
		return "", &ErrUnsupportedModel{}
	}
	if lm.Quitting {
		return "", &ErrExitConsole{}
	}

	return lm.Choice, nil
}

var _ error = (*ErrExitConsole)(nil)

// ErrExitConsole represents interrupt commands being entered.
type ErrExitConsole struct {
}

// Error returns the error message.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a new type of error called ErrExitConsole and defining an Error() method for it. The Error() 
//	method returns a string with the message "exit console".
//
// </AiDoc: End of OpenAI comments>
func (e *ErrExitConsole) Error() string {
	return ErrExitConsoleMessage
}

// Is checks for the error type is ErrExitConsole.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is checking if the given error is of type ErrExitConsole. It returns a boolean value indicating whether 
//	the given error is of type ErrExitConsole or not.
//
// </AiDoc: End of OpenAI comments>
func (e *ErrExitConsole) Is(target error) bool {
	_, ok := target.(*ErrExitConsole)
	return ok
}

// YesOrNoPrompt Creates a Yes or No prompt where user has to select either a Yes or No as input
// defaultString decides the first(default) value on the list.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is prompting the user for a yes or no answer. It takes in a prompt message, a default string, and a 
//	prompter interface as parameters. It then creates a list of values based on the default string. It then uses the 
//	prompter interface to get a list input from the user based on the list of values. Finally, it returns a boolean based on
//	 whether the user input was "Yes" or not.
//
// </AiDoc: End of OpenAI comments>
func YesOrNoPrompt(promptMsg string, defaultString string, prompter Interface) (bool, error) {
	var valueList []string
	if strings.EqualFold("Yes", defaultString) {
		valueList = []string{"Yes", "No"}
	} else {
		valueList = []string{"No", "Yes"}
	}
	input, err := prompter.GetListInput(valueList, promptMsg)
	if err != nil {
		return false, err
	}
	return strings.EqualFold("Yes", input), nil
}
