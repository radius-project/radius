// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/delete (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_delete.go -package=delete -self_package github.com/radius-project/radius/pkg/cli/delete github.com/radius-project/radius/pkg/cli/delete Interface
//

// Package delete is a generated GoMock package.
package delete

import (
	context "context"
	reflect "reflect"

	clients "github.com/radius-project/radius/pkg/cli/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteApplicationWithProgress mocks base method.
func (m *MockInterface) DeleteApplicationWithProgress(arg0 context.Context, arg1 clients.ApplicationsManagementClient, arg2 clients.DeleteOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationWithProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithProgress indicates an expected call of DeleteApplicationWithProgress.
func (mr *MockInterfaceMockRecorder) DeleteApplicationWithProgress(arg0, arg1, arg2 any) *MockInterfaceDeleteApplicationWithProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithProgress", reflect.TypeOf((*MockInterface)(nil).DeleteApplicationWithProgress), arg0, arg1, arg2)
	return &MockInterfaceDeleteApplicationWithProgressCall{Call: call}
}

// MockInterfaceDeleteApplicationWithProgressCall wrap *gomock.Call
type MockInterfaceDeleteApplicationWithProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteApplicationWithProgressCall) Return(arg0 bool, arg1 error) *MockInterfaceDeleteApplicationWithProgressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteApplicationWithProgressCall) Do(f func(context.Context, clients.ApplicationsManagementClient, clients.DeleteOptions) (bool, error)) *MockInterfaceDeleteApplicationWithProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteApplicationWithProgressCall) DoAndReturn(f func(context.Context, clients.ApplicationsManagementClient, clients.DeleteOptions) (bool, error)) *MockInterfaceDeleteApplicationWithProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
