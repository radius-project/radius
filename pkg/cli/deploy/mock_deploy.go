// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/deploy (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_deploy.go -package=deploy -self_package github.com/radius-project/radius/pkg/cli/deploy github.com/radius-project/radius/pkg/cli/deploy Interface
//

// Package deploy is a generated GoMock package.
package deploy

import (
	context "context"
	reflect "reflect"

	clients "github.com/radius-project/radius/pkg/cli/clients"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeployWithProgress mocks base method.
func (m *MockInterface) DeployWithProgress(arg0 context.Context, arg1 Options) (clients.DeploymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployWithProgress", arg0, arg1)
	ret0, _ := ret[0].(clients.DeploymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployWithProgress indicates an expected call of DeployWithProgress.
func (mr *MockInterfaceMockRecorder) DeployWithProgress(arg0, arg1 any) *MockInterfaceDeployWithProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployWithProgress", reflect.TypeOf((*MockInterface)(nil).DeployWithProgress), arg0, arg1)
	return &MockInterfaceDeployWithProgressCall{Call: call}
}

// MockInterfaceDeployWithProgressCall wrap *gomock.Call
type MockInterfaceDeployWithProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeployWithProgressCall) Return(arg0 clients.DeploymentResult, arg1 error) *MockInterfaceDeployWithProgressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeployWithProgressCall) Do(f func(context.Context, Options) (clients.DeploymentResult, error)) *MockInterfaceDeployWithProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeployWithProgressCall) DoAndReturn(f func(context.Context, Options) (clients.DeploymentResult, error)) *MockInterfaceDeployWithProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
