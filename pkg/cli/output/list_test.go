// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package output

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
)

var formatter = &ListFormatter{}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a struct with two fields, one of type string and one of type boolean. It then creates a buffer
//	 and uses the formatter package to format the struct into the buffer. Finally, it checks that the output of the buffer 
//	is equal to a predefined string.
//
// </AiDoc: End of OpenAI comments>
func Test_List_Scalar(t *testing.T) {
	obj := struct {
		Size   string
		IsCool bool
	}{
		Size:   "mega",
		IsCool: true,
	}

	buffer := &bytes.Buffer{}
	err := formatter.Format(obj, buffer, FormatterOptions{})
	require.NoError(t, err)

	want := "Size: mega\nIsCool: true\n\n"
	require.Equal(t, want, buffer.String())
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a slice of structs and then formatting the data in the slice into a string. The formatted 
//	string is then stored in a buffer.
//
// </AiDoc: End of OpenAI comments>
func Test_List_Slice(t *testing.T) {
	obj := []struct {
		Size   string
		IsCool bool
	}{
		{
			Size:   "mega",
			IsCool: true,
		},
		{
			Size:   "medium",
			IsCool: false,
		},
	}

	buffer := &bytes.Buffer{}
	err := formatter.Format(obj, buffer, FormatterOptions{})
	require.NoError(t, err)
	want := "Size: mega\nIsCool: true\n\nSize: medium\nIsCool: false\n\n"
	require.Equal(t, want, buffer.String())
}
