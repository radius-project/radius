// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package output

import (
	"fmt"
	"io"
	"reflect"
)

type ListFormatter struct{}

var _ Formatter = (*ListFormatter)(nil)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes in an object, a writer, and a set of formatter options. It then converts the object into a slice and
//	 iterates through each item in the slice. For each item, it prints out the name of the field and its value to the 
//	writer.
//
// </AiDoc: End of OpenAI comments>
func (f *ListFormatter) Format(obj any, writer io.Writer, options FormatterOptions) error {

	items, err := convertToSlice(obj)
	if err != nil {
		return err
	}

	for _, item := range items {
		v := reflect.ValueOf(item)
		typeOfObj := v.Type()
		for i := 0; i < v.NumField(); i++ {
			fmt.Fprintf(writer, "%v: %v\n", typeOfObj.Field(i).Name, v.Field(i).Interface())
		}
		fmt.Fprint(writer, "\n")
	}

	return nil
}
