// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/output (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_writer.go -package=output -self_package github.com/radius-project/radius/pkg/cli/output github.com/radius-project/radius/pkg/cli/output Interface
//

// Package output is a generated GoMock package.
package output

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BeginStep mocks base method.
func (m *MockInterface) BeginStep(arg0 string, arg1 ...any) Step {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginStep", varargs...)
	ret0, _ := ret[0].(Step)
	return ret0
}

// BeginStep indicates an expected call of BeginStep.
func (mr *MockInterfaceMockRecorder) BeginStep(arg0 any, arg1 ...any) *MockInterfaceBeginStepCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginStep", reflect.TypeOf((*MockInterface)(nil).BeginStep), varargs...)
	return &MockInterfaceBeginStepCall{Call: call}
}

// MockInterfaceBeginStepCall wrap *gomock.Call
type MockInterfaceBeginStepCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceBeginStepCall) Return(arg0 Step) *MockInterfaceBeginStepCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceBeginStepCall) Do(f func(string, ...any) Step) *MockInterfaceBeginStepCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceBeginStepCall) DoAndReturn(f func(string, ...any) Step) *MockInterfaceBeginStepCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CompleteStep mocks base method.
func (m *MockInterface) CompleteStep(arg0 Step) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CompleteStep", arg0)
}

// CompleteStep indicates an expected call of CompleteStep.
func (mr *MockInterfaceMockRecorder) CompleteStep(arg0 any) *MockInterfaceCompleteStepCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteStep", reflect.TypeOf((*MockInterface)(nil).CompleteStep), arg0)
	return &MockInterfaceCompleteStepCall{Call: call}
}

// MockInterfaceCompleteStepCall wrap *gomock.Call
type MockInterfaceCompleteStepCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCompleteStepCall) Return() *MockInterfaceCompleteStepCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCompleteStepCall) Do(f func(Step)) *MockInterfaceCompleteStepCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCompleteStepCall) DoAndReturn(f func(Step)) *MockInterfaceCompleteStepCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LogInfo mocks base method.
func (m *MockInterface) LogInfo(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogInfo", varargs...)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockInterfaceMockRecorder) LogInfo(arg0 any, arg1 ...any) *MockInterfaceLogInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockInterface)(nil).LogInfo), varargs...)
	return &MockInterfaceLogInfoCall{Call: call}
}

// MockInterfaceLogInfoCall wrap *gomock.Call
type MockInterfaceLogInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceLogInfoCall) Return() *MockInterfaceLogInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceLogInfoCall) Do(f func(string, ...any)) *MockInterfaceLogInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceLogInfoCall) DoAndReturn(f func(string, ...any)) *MockInterfaceLogInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteFormatted mocks base method.
func (m *MockInterface) WriteFormatted(arg0 string, arg1 any, arg2 FormatterOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFormatted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFormatted indicates an expected call of WriteFormatted.
func (mr *MockInterfaceMockRecorder) WriteFormatted(arg0, arg1, arg2 any) *MockInterfaceWriteFormattedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFormatted", reflect.TypeOf((*MockInterface)(nil).WriteFormatted), arg0, arg1, arg2)
	return &MockInterfaceWriteFormattedCall{Call: call}
}

// MockInterfaceWriteFormattedCall wrap *gomock.Call
type MockInterfaceWriteFormattedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceWriteFormattedCall) Return(arg0 error) *MockInterfaceWriteFormattedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceWriteFormattedCall) Do(f func(string, any, FormatterOptions) error) *MockInterfaceWriteFormattedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceWriteFormattedCall) DoAndReturn(f func(string, any, FormatterOptions) error) *MockInterfaceWriteFormattedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
