// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/kubernetes (interfaces: Interface)

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "k8s.io/client-go/tools/clientcmd/api"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetKubeContext mocks base method.
func (m *MockInterface) GetKubeContext() (*api.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeContext")
	ret0, _ := ret[0].(*api.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeContext indicates an expected call of GetKubeContext.
func (mr *MockInterfaceMockRecorder) GetKubeContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeContext", reflect.TypeOf((*MockInterface)(nil).GetKubeContext))
}
