// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/kubernetes (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_kubernetes.go -package=kubernetes -self_package github.com/radius-project/radius/pkg/cli/kubernetes github.com/radius-project/radius/pkg/cli/kubernetes Interface
//

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	api "k8s.io/client-go/tools/clientcmd/api"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteNamespace mocks base method.
func (m *MockInterface) DeleteNamespace(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockInterfaceMockRecorder) DeleteNamespace(arg0 any) *MockInterfaceDeleteNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockInterface)(nil).DeleteNamespace), arg0)
	return &MockInterfaceDeleteNamespaceCall{Call: call}
}

// MockInterfaceDeleteNamespaceCall wrap *gomock.Call
type MockInterfaceDeleteNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteNamespaceCall) Return(arg0 error) *MockInterfaceDeleteNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteNamespaceCall) Do(f func(string) error) *MockInterfaceDeleteNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteNamespaceCall) DoAndReturn(f func(string) error) *MockInterfaceDeleteNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteNamespaceWithName mocks base method.
func (m *MockInterface) DeleteNamespaceWithName(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceWithName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespaceWithName indicates an expected call of DeleteNamespaceWithName.
func (mr *MockInterfaceMockRecorder) DeleteNamespaceWithName(arg0, arg1 any) *MockInterfaceDeleteNamespaceWithNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceWithName", reflect.TypeOf((*MockInterface)(nil).DeleteNamespaceWithName), arg0, arg1)
	return &MockInterfaceDeleteNamespaceWithNameCall{Call: call}
}

// MockInterfaceDeleteNamespaceWithNameCall wrap *gomock.Call
type MockInterfaceDeleteNamespaceWithNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteNamespaceWithNameCall) Return(arg0 error) *MockInterfaceDeleteNamespaceWithNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteNamespaceWithNameCall) Do(f func(string, string) error) *MockInterfaceDeleteNamespaceWithNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteNamespaceWithNameCall) DoAndReturn(f func(string, string) error) *MockInterfaceDeleteNamespaceWithNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCRDs mocks base method.
func (m *MockInterface) DeleteCRDs(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCRDs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCRDs indicates an expected call of DeleteCRDs.
func (mr *MockInterfaceMockRecorder) DeleteCRDs(arg0, arg1 any) *MockInterfaceDeleteCRDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCRDs", reflect.TypeOf((*MockInterface)(nil).DeleteCRDs), arg0, arg1)
	return &MockInterfaceDeleteCRDsCall{Call: call}
}

// MockInterfaceDeleteCRDsCall wrap *gomock.Call
type MockInterfaceDeleteCRDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteCRDsCall) Return(arg0 error) *MockInterfaceDeleteCRDsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteCRDsCall) Do(f func(string, []string) error) *MockInterfaceDeleteCRDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteCRDsCall) DoAndReturn(f func(string, []string) error) *MockInterfaceDeleteCRDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAPIService mocks base method.
func (m *MockInterface) DeleteAPIService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIService indicates an expected call of DeleteAPIService.
func (mr *MockInterfaceMockRecorder) DeleteAPIService(arg0, arg1 any) *MockInterfaceDeleteAPIServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIService", reflect.TypeOf((*MockInterface)(nil).DeleteAPIService), arg0, arg1)
	return &MockInterfaceDeleteAPIServiceCall{Call: call}
}

// MockInterfaceDeleteAPIServiceCall wrap *gomock.Call
type MockInterfaceDeleteAPIServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteAPIServiceCall) Return(arg0 error) *MockInterfaceDeleteAPIServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteAPIServiceCall) Do(f func(string, string) error) *MockInterfaceDeleteAPIServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteAPIServiceCall) DoAndReturn(f func(string, string) error) *MockInterfaceDeleteAPIServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetKubeContext mocks base method.
func (m *MockInterface) GetKubeContext() (*api.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeContext")
	ret0, _ := ret[0].(*api.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeContext indicates an expected call of GetKubeContext.
func (mr *MockInterfaceMockRecorder) GetKubeContext() *MockInterfaceGetKubeContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeContext", reflect.TypeOf((*MockInterface)(nil).GetKubeContext))
	return &MockInterfaceGetKubeContextCall{Call: call}
}

// MockInterfaceGetKubeContextCall wrap *gomock.Call
type MockInterfaceGetKubeContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetKubeContextCall) Return(arg0 *api.Config, arg1 error) *MockInterfaceGetKubeContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetKubeContextCall) Do(f func() (*api.Config, error)) *MockInterfaceGetKubeContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetKubeContextCall) DoAndReturn(f func() (*api.Config, error)) *MockInterfaceGetKubeContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
