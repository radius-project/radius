// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/kubernetes/portforward (interfaces: Interface)

// Package portforward is a generated GoMock package.
package portforward

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new MockInterface object, which is used to mock an interface in a test. It takes a controller as
//	 an argument and sets up the mock object with the controller. It also creates a recorder which is used to record the 
//	expected behavior of the mock object.
//
// </AiDoc: End of OpenAI comments>
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function returns a MockInterfaceMockRecorder object, which is used to record expectations for the MockInterface.
//
// </AiDoc: End of OpenAI comments>
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is a mock interface that is used to run a given set of options in a given context. It returns an error if 
//	the run fails.
//
// </AiDoc: End of OpenAI comments>
func (m *MockInterface) Run(arg0 context.Context, arg1 Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a record of a call to the "Run" method of the MockInterface interface, with two arguments.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockInterfaceMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterface)(nil).Run), arg0, arg1)
}
