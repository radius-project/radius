// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package cli

import (
	"bytes"
	"testing"

	"github.com/project-radius/radius/pkg/cli/workspaces"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/require"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing that when there is no content in the yaml file, the default workspace and items are empty.
//
// </AiDoc: End of OpenAI comments>
func Test_ReadWorkspaceSection_NoContent(t *testing.T) {
	var yaml = ``

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	es, err := ReadWorkspaceSection(v)
	require.NoError(t, err)
	require.Empty(t, es.Default)
	require.Empty(t, es.Items)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is reading the workspace section of a YAML configuration file. It is checking if the default 
//	workspace is set and if there are any items in the workspace section. If there are items, it will store them in a 
//	variable.
//
// </AiDoc: End of OpenAI comments>
func Test_ReadWorkspaceSection_SomeItems(t *testing.T) {
	var yaml = `
workspaces:
  default: test
  items:
    test:
      connection:
        kind: kubernetes
      scope: /a/b/c
    test2:
      connection:
        kind: kubernetes
      scope: /a/b/c
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	es, err := ReadWorkspaceSection(v)
	require.NoError(t, err)
	require.Equal(t, "test", es.Default)
	require.Len(t, es.Items, 2)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is testing the ReadWorkspaceSection function by creating a configuration from a given yaml string 
//	and then attempting to read the workspace section from the configuration. If the read is successful, it will return an 
//	error.
//
// </AiDoc: End of OpenAI comments>
func Test_ReadWorkspaceSection_Invalid_NoConnection(t *testing.T) {
	var yaml = `
workspaces:
  items:
    test:
      scope: /a/b/c
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	_, err = ReadWorkspaceSection(v)
	require.Error(t, err)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the GetWorkspace function to ensure that it returns nil when no default workspace is specified.
//	 It does this by creating a configuration from a given yaml string, reading the workspace section from the 
//	configuration, and then calling the GetWorkspace function with an empty string. It then checks that the workspace 
//	returned is nil and that there is no error.
//
// </AiDoc: End of OpenAI comments>
func Test_GetWorkspace_Nil_NoDefault(t *testing.T) {
	var yaml = `
workspaces:
  items:
    test:
      connection:
        kind: kubernetes
      scope: /a/b/c
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	section, err := ReadWorkspaceSection(v)
	require.NoError(t, err)

	ws, err := section.GetWorkspace("")
	require.Nil(t, ws)
	require.NoError(t, err)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is testing the GetWorkspace function to ensure that it returns an error when an invalid workspace 
//	is requested. It does this by creating a configuration with a valid workspace and then attempting to retrieve an invalid
//	 workspace. If an error is returned, the test passes.
//
// </AiDoc: End of OpenAI comments>
func Test_GetWorkspace_Invalid_NotFound(t *testing.T) {
	var yaml = `
workspaces:
  default: test2
  items:
    test:
      connection:
        kind: kubernetes
      scope: /a/b/c
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	es, err := ReadWorkspaceSection(v)
	require.NoError(t, err)

	_, err = es.GetWorkspace("test2")
	require.Error(t, err)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the GetWorkspace function to ensure that it is able to correctly retrieve the default workspace
//	 from a given yaml configuration. It checks that the workspace name, source, scope, environment, and connection are all 
//	correct.
//
// </AiDoc: End of OpenAI comments>
func Test_GetWorkspace_Default_Valid(t *testing.T) {
	var yaml = `
workspaces:
  default: test
  items:
    test:
      connection:
        kind: kubernetes
        context: cool-beans
      scope: /a/b/c
      environment: /a/b/c/providers/Applications.Core/environments/ice-cold
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	es, err := ReadWorkspaceSection(v)
	require.NoError(t, err)

	ws, err := es.GetWorkspace("")
	require.NoError(t, err)

	require.Equal(t, "test", ws.Name)
	require.Equal(t, workspaces.Source(workspaces.SourceUserConfig), ws.Source)
	require.Equal(t, "/a/b/c", ws.Scope)
	require.Equal(t, "/a/b/c/providers/Applications.Core/environments/ice-cold", ws.Environment)
	require.Equal(t, map[string]any{"kind": "kubernetes", "context": "cool-beans"}, ws.Connection)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the GetWorkspace function with a valid input. It creates a configuration from a given yaml 
//	string, reads the workspace section from the configuration, and then attempts to get the workspace with the name "test".
//	 It then checks that the workspace has the expected name, source, scope, environment, and connection.
//
// </AiDoc: End of OpenAI comments>
func Test_GetWorkspace_Named_Valid(t *testing.T) {
	var yaml = `
workspaces:
  items:
    test:
      connection:
        kind: kubernetes
        context: cool-beans
      scope: /a/b/c
      environment: /a/b/c/providers/Applications.Core/environments/ice-cold
`

	v, err := makeConfig(yaml)
	require.NoError(t, err)

	es, err := ReadWorkspaceSection(v)
	require.NoError(t, err)

	ws, err := es.GetWorkspace("test")
	require.NoError(t, err)

	require.Equal(t, "test", ws.Name)
	require.Equal(t, workspaces.Source(workspaces.SourceUserConfig), ws.Source)
	require.Equal(t, "/a/b/c", ws.Scope)
	require.Equal(t, "/a/b/c/providers/Applications.Core/environments/ice-cold", ws.Environment)
	require.Equal(t, map[string]any{"kind": "kubernetes", "context": "cool-beans"}, ws.Connection)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is creating a new configuration object using the Viper library and reading in a YAML string. It 
//	then returns the configuration object and any errors that may have occurred.
//
// </AiDoc: End of OpenAI comments>
func makeConfig(yaml string) (*viper.Viper, error) {
	v := viper.New()
	v.SetConfigType("YAML")
	err := v.ReadConfig(bytes.NewBuffer([]byte(yaml)))
	if err != nil {
		return nil, err
	}

	return v, nil
}
