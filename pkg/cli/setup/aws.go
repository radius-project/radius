// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package setup

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/credentials"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/spf13/cobra"

	"github.com/project-radius/radius/pkg/cli"
	radAWS "github.com/project-radius/radius/pkg/cli/aws"
	"github.com/project-radius/radius/pkg/cli/prompt"
)

const (
	AWSProviderFlagName                = "provider-aws"
	AWSProviderAccessKeyIdFlagName     = "provider-aws-access-key-id"
	AWSProviderSecretAccessKeyFlagName = "provider-aws-secret-access-key"
	AWSProviderRegionFlagName          = "provider-aws-region"
)

var (
	errNotEmptyTemplate = "%s cannot be empty"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to register the persistent flags for the AWS provider. It sets the flag name, a default value, and
//	 a description for each flag.
//
// </AiDoc: End of OpenAI comments>
func RegisterPersistentAWSProviderArgs(cmd *cobra.Command) {
	cmd.PersistentFlags().BoolP(
		AWSProviderFlagName,
		"",
		false,
		"Add AWS provider for cloud resources",
	)
	cmd.PersistentFlags().String(
		AWSProviderAccessKeyIdFlagName,
		"",
		"Specifies an AWS access key associated with an IAM user or role",
	)
	cmd.PersistentFlags().String(
		AWSProviderSecretAccessKeyFlagName,
		"",
		"Specifies the secret key associated with the access key. This is essentially the \"password\" for the access key",
	)
	cmd.PersistentFlags().String(
		AWSProviderRegionFlagName,
		"",
		"Specifies the region to be used for resources deployed by this provider",
	)
}

// ParseAWSProviderArgs parses AWS args from user cmd line and returns an aws provider.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to parse the arguments for an AWS provider. It takes in a command, a boolean value to indicate if 
//	it should be interactive, and a prompter interface. Depending on the boolean value, it will either parse the arguments 
//	interactively or non-interactively.
//
// </AiDoc: End of OpenAI comments>
func ParseAWSProviderArgs(cmd *cobra.Command, interactive bool, prompter prompt.Interface) (*radAWS.Provider, error) {
	if interactive {
		return parseAWSProviderInteractive(cmd, prompter)
	}
	return parseAWSProviderNonInteractive(cmd)

}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is prompting the user to enter their AWS credentials, such as the region, IAM Access Key ID, and IAM 
//	Secret Access Key. It then verifies that the credentials are valid.
//
// </AiDoc: End of OpenAI comments>
func parseAWSProviderInteractive(cmd *cobra.Command, prompter prompt.Interface) (*radAWS.Provider, error) {
	ctx := cmd.Context()

	addAWSCred, err := prompt.YesOrNoPrompt("Add AWS provider for cloud resources?", "no", prompter)
	if err != nil {
		return nil, err
	}
	if !addAWSCred {
		return nil, nil
	}

	region, err := prompter.GetTextInput("Enter the region you would like to use to deploy AWS resources:", "Enter a region...")
	if err != nil {
		return nil, err
	}
	if region == "" {
		return nil, &cli.FriendlyError{Message: fmt.Sprintf(errNotEmptyTemplate, "aws region")}
	}

	keyID, err := prompter.GetTextInput("Enter the IAM Access Key ID:", "Enter IAM access KeyId...")
	if err != nil {
		return nil, err
	}
	if keyID == "" {
		return nil, &cli.FriendlyError{Message: fmt.Sprintf(errNotEmptyTemplate, "aws keyId")}
	}

	secretAccessKey, err := prompter.GetTextInput("Enter your IAM Secret Access Keys:", "Enter IAM access key...")
	if err != nil {
		return nil, err
	}
	if secretAccessKey == "" {
		return nil, &cli.FriendlyError{Message: fmt.Sprintf(errNotEmptyTemplate, "iam access key")}
	}

	return verifyAWSCredentials(ctx, keyID, secretAccessKey, region)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is parsing the flags for the AWS provider, and then verifying the credentials provided. It will return a 
//	Provider object if the credentials are valid, or an error if they are not.
//
// </AiDoc: End of OpenAI comments>
func parseAWSProviderNonInteractive(cmd *cobra.Command) (*radAWS.Provider, error) {
	ctx := cmd.Context()

	addAWSProvider, err := cmd.Flags().GetBool(AWSProviderFlagName)
	if err != nil {
		return nil, err
	}
	if !addAWSProvider {
		return nil, nil
	}

	keyID, err := cmd.Flags().GetString(AWSProviderAccessKeyIdFlagName)
	if err != nil {
		return nil, err
	}

	secretAccessKey, err := cmd.Flags().GetString(AWSProviderSecretAccessKeyFlagName)
	if err != nil {
		return nil, err
	}

	region, err := cmd.Flags().GetString(AWSProviderRegionFlagName)
	if err != nil {
		return nil, err
	}

	return verifyAWSCredentials(ctx, keyID, secretAccessKey, region)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is verifying the AWS credentials provided by the user. It creates a new static credentials provider using 
//	the provided key ID and secret access key, and then creates an STS client using the provided region. It then attempts to
//	 get the caller identity using the STS client, and if successful, returns a Provider object containing the provided 
//	credentials and the account ID. If the attempt fails, an error is returned.
//
// </AiDoc: End of OpenAI comments>
func verifyAWSCredentials(ctx context.Context, keyID string, secretAccessKey string, region string) (*radAWS.Provider, error) {
	credentialsProvider := credentials.NewStaticCredentialsProvider(keyID, secretAccessKey, "")
	stsClient := sts.New(sts.Options{
		Region:      region,
		Credentials: credentialsProvider,
	})
	result, err := stsClient.GetCallerIdentity(ctx, &sts.GetCallerIdentityInput{})
	if err != nil {
		return nil, fmt.Errorf("AWS credential verification failed: %s", err.Error())
	}

	return &radAWS.Provider{
		AccessKeyId:     keyID,
		SecretAccessKey: secretAccessKey,
		TargetRegion:    region,
		AccountId:       *result.Account,
	}, nil
}
