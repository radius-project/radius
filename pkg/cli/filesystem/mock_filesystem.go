// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/filesystem (interfaces: FileSystem)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_filesystem.go -package=filesystem -self_package github.com/radius-project/radius/pkg/cli/filesystem github.com/radius-project/radius/pkg/cli/filesystem FileSystem
//

// Package filesystem is a generated GoMock package.
package filesystem

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileSystem) Create(arg0 string) (fs.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(fs.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileSystemMockRecorder) Create(arg0 any) *MockFileSystemCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileSystem)(nil).Create), arg0)
	return &MockFileSystemCreateCall{Call: call}
}

// MockFileSystemCreateCall wrap *gomock.Call
type MockFileSystemCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemCreateCall) Return(arg0 fs.File, arg1 error) *MockFileSystemCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemCreateCall) Do(f func(string) (fs.File, error)) *MockFileSystemCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemCreateCall) DoAndReturn(f func(string) (fs.File, error)) *MockFileSystemCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exists mocks base method.
func (m *MockFileSystem) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockFileSystemMockRecorder) Exists(arg0 any) *MockFileSystemExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileSystem)(nil).Exists), arg0)
	return &MockFileSystemExistsCall{Call: call}
}

// MockFileSystemExistsCall wrap *gomock.Call
type MockFileSystemExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemExistsCall) Return(arg0 bool) *MockFileSystemExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemExistsCall) Do(f func(string) bool) *MockFileSystemExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemExistsCall) DoAndReturn(f func(string) bool) *MockFileSystemExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MkdirAll mocks base method.
func (m *MockFileSystem) MkdirAll(arg0 string, arg1 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockFileSystemMockRecorder) MkdirAll(arg0, arg1 any) *MockFileSystemMkdirAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystem)(nil).MkdirAll), arg0, arg1)
	return &MockFileSystemMkdirAllCall{Call: call}
}

// MockFileSystemMkdirAllCall wrap *gomock.Call
type MockFileSystemMkdirAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemMkdirAllCall) Return(arg0 error) *MockFileSystemMkdirAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemMkdirAllCall) Do(f func(string, fs.FileMode) error) *MockFileSystemMkdirAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemMkdirAllCall) DoAndReturn(f func(string, fs.FileMode) error) *MockFileSystemMkdirAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MkdirTemp mocks base method.
func (m *MockFileSystem) MkdirTemp(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirTemp", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MkdirTemp indicates an expected call of MkdirTemp.
func (mr *MockFileSystemMockRecorder) MkdirTemp(arg0, arg1 any) *MockFileSystemMkdirTempCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirTemp", reflect.TypeOf((*MockFileSystem)(nil).MkdirTemp), arg0, arg1)
	return &MockFileSystemMkdirTempCall{Call: call}
}

// MockFileSystemMkdirTempCall wrap *gomock.Call
type MockFileSystemMkdirTempCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemMkdirTempCall) Return(arg0 string, arg1 error) *MockFileSystemMkdirTempCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemMkdirTempCall) Do(f func(string, string) (string, error)) *MockFileSystemMkdirTempCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemMkdirTempCall) DoAndReturn(f func(string, string) (string, error)) *MockFileSystemMkdirTempCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockFileSystem) Open(arg0 string) (fs.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(fs.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileSystemMockRecorder) Open(arg0 any) *MockFileSystemOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileSystem)(nil).Open), arg0)
	return &MockFileSystemOpenCall{Call: call}
}

// MockFileSystemOpenCall wrap *gomock.Call
type MockFileSystemOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemOpenCall) Return(arg0 fs.File, arg1 error) *MockFileSystemOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemOpenCall) Do(f func(string) (fs.File, error)) *MockFileSystemOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemOpenCall) DoAndReturn(f func(string) (fs.File, error)) *MockFileSystemOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadFile mocks base method.
func (m *MockFileSystem) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemMockRecorder) ReadFile(arg0 any) *MockFileSystemReadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystem)(nil).ReadFile), arg0)
	return &MockFileSystemReadFileCall{Call: call}
}

// MockFileSystemReadFileCall wrap *gomock.Call
type MockFileSystemReadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemReadFileCall) Return(arg0 []byte, arg1 error) *MockFileSystemReadFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemReadFileCall) Do(f func(string) ([]byte, error)) *MockFileSystemReadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemReadFileCall) DoAndReturn(f func(string) ([]byte, error)) *MockFileSystemReadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAll mocks base method.
func (m *MockFileSystem) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileSystemMockRecorder) RemoveAll(arg0 any) *MockFileSystemRemoveAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystem)(nil).RemoveAll), arg0)
	return &MockFileSystemRemoveAllCall{Call: call}
}

// MockFileSystemRemoveAllCall wrap *gomock.Call
type MockFileSystemRemoveAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemRemoveAllCall) Return(arg0 error) *MockFileSystemRemoveAllCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemRemoveAllCall) Do(f func(string) error) *MockFileSystemRemoveAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemRemoveAllCall) DoAndReturn(f func(string) error) *MockFileSystemRemoveAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stat mocks base method.
func (m *MockFileSystem) Stat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileSystemMockRecorder) Stat(arg0 any) *MockFileSystemStatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileSystem)(nil).Stat), arg0)
	return &MockFileSystemStatCall{Call: call}
}

// MockFileSystemStatCall wrap *gomock.Call
type MockFileSystemStatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemStatCall) Return(arg0 fs.FileInfo, arg1 error) *MockFileSystemStatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemStatCall) Do(f func(string) (fs.FileInfo, error)) *MockFileSystemStatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemStatCall) DoAndReturn(f func(string) (fs.FileInfo, error)) *MockFileSystemStatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteFile mocks base method.
func (m *MockFileSystem) WriteFile(arg0 string, arg1 []byte, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemMockRecorder) WriteFile(arg0, arg1, arg2 any) *MockFileSystemWriteFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystem)(nil).WriteFile), arg0, arg1, arg2)
	return &MockFileSystemWriteFileCall{Call: call}
}

// MockFileSystemWriteFileCall wrap *gomock.Call
type MockFileSystemWriteFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemWriteFileCall) Return(arg0 error) *MockFileSystemWriteFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemWriteFileCall) Do(f func(string, []byte, fs.FileMode) error) *MockFileSystemWriteFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemWriteFileCall) DoAndReturn(f func(string, []byte, fs.FileMode) error) *MockFileSystemWriteFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
