// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package config

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"
)

const (
	validContent = `workspace:
  application: 'foo'`
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory, writing a valid configuration file to it, and then loading the 
//	configuration from the file. It then checks that the configuration was loaded correctly.
//
// </AiDoc: End of OpenAI comments>
func Test_load_valid(t *testing.T) {
	content := validContent

	directory := t.TempDir()
	file := filepath.Join(directory, "rad.yaml")
	err := os.WriteFile(file, []byte(content), 0644)
	require.NoError(t, err)

	config, err := load(file)
	require.NoError(t, err)

	expected := &DirectoryConfig{
		Filepath: file, // Populated by the loader
		Workspace: DirectoryWorkspaceConfig{
			Application: "foo",
		},
	}
	require.Equal(t, expected, config)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the load function by creating a temporary file with invalid content and then attempting to load
//	 it. It then checks that an error is returned and that the config is nil.
//
// </AiDoc: End of OpenAI comments>
func Test_load_invalid(t *testing.T) {
	content := `
workspace:
  application: 'foo'
  anotherField: 17`

	directory := t.TempDir()
	file := filepath.Join(directory, "rad.yaml")
	err := os.WriteFile(file, []byte(content), 0644)
	require.NoError(t, err)

	config, err := load(file)
	require.Error(t, err)
	require.Nil(t, config)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the LoadDirectoryConfig function by attempting to load a configuration from a directory that 
//	does not exist. It expects that no error will be returned and that the configuration will be nil.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_NotFound_FileSystemRoot(t *testing.T) {
	// Don't set up anything, this will walk all the way up to the filesystem root.
	directory := t.TempDir()

	config, err := LoadDirectoryConfig(directory)
	require.NoError(t, err)
	require.Nil(t, config)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory and then creating a .git directory within it. It then attempts to load a
//	 directory configuration from the temporary directory, and checks that the configuration is nil and that there is no 
//	error.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_NotFound_GitRepoRoot(t *testing.T) {
	// Set this up like we're in the root of a git repo.
	directory := t.TempDir()
	start := directory
	err := os.MkdirAll(filepath.Join(directory, ".git"), 0755)
	require.NoError(t, err)

	config, err := LoadDirectoryConfig(start)
	require.NoError(t, err)
	require.Nil(t, config)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory and then creating a subdirectory within it. It then creates a .git 
//	directory within the temporary directory and checks to see if a directory config can be loaded from the subdirectory. If
//	 a directory config cannot be loaded, it returns nil.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_NotFound_GitRepoChildDirectory(t *testing.T) {
	// Set this up like we're in a subdirectory of a git repo.
	directory := t.TempDir()
	start := filepath.Join(directory, "a", "b", "c")

	err := os.MkdirAll(filepath.Join(directory, ".git"), 0755)
	require.NoError(t, err)
	err = os.MkdirAll(start, 0755)
	require.NoError(t, err)

	config, err := LoadDirectoryConfig(start)
	require.NoError(t, err)
	require.Nil(t, config)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory, creating a .git and .rad folder in the directory, and writing a 
//	validContent file to the .rad folder. It then loads the directory configuration from the start of the directory and 
//	checks that the filepath is equal to the .rad folder.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_Found_GitRepoRoot(t *testing.T) {
	// Set this up like we're in the root of a git repo.
	directory := t.TempDir()
	start := directory

	err := os.MkdirAll(filepath.Join(directory, ".git"), 0755)
	require.NoError(t, err)
	err = os.MkdirAll(filepath.Join(start, ".rad"), 0755)
	require.NoError(t, err)
	err = os.WriteFile(filepath.Join(start, ".rad", "rad.yaml"), []byte(validContent), 0644)
	require.NoError(t, err)

	config, err := LoadDirectoryConfig(start)
	require.NoError(t, err)
	require.NotNil(t, config)
	require.Equal(t, filepath.Join(directory, ".rad", "rad.yaml"), config.Filepath)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory, creating a subdirectory of a git repo, writing a valid content file to 
//	the subdirectory, and then loading the directory configuration from the start of the subdirectory.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_Found_GitRepoChildDirectory(t *testing.T) {
	// Set this up like we're in a subdirectory of a git repo.
	directory := t.TempDir()
	start := filepath.Join(directory, "a", "b", "c")

	err := os.MkdirAll(filepath.Join(directory, ".git"), 0755)
	require.NoError(t, err)
	err = os.MkdirAll(filepath.Join(directory, "a", ".rad"), 0755)
	require.NoError(t, err)
	err = os.WriteFile(filepath.Join(directory, "a", ".rad", "rad.yaml"), []byte(validContent), 0644)
	require.NoError(t, err)

	config, err := LoadDirectoryConfig(start)
	require.NoError(t, err)
	require.NotNil(t, config)
	require.Equal(t, filepath.Join(directory, "a", ".rad", "rad.yaml"), config.Filepath)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a temporary directory and two rad.yamls in two different subdirectories. It then attempts to 
//	load the directory config from the subdirectory "c" and checks that the rad.yaml in the "b" subdirectory is the one that
//	 is used.
//
// </AiDoc: End of OpenAI comments>
func Test_LoadDirectoryConfig_Found_OverrideInRepo(t *testing.T) {
	// Set this up like we're in a subdirectory of a git repo.
	directory := t.TempDir()
	start := filepath.Join(directory, "a", "b", "c")

	// We're going to create TWO rad.yamls, we'll find the one in 'b' not in 'a'.

	err := os.MkdirAll(filepath.Join(directory, ".git"), 0755)
	require.NoError(t, err)
	err = os.MkdirAll(filepath.Join(directory, "a", "b", ".rad"), 0755)
	require.NoError(t, err)
	err = os.WriteFile(filepath.Join(directory, "a", "b", ".rad", "rad.yaml"), []byte(validContent), 0644)
	require.NoError(t, err)
	err = os.MkdirAll(filepath.Join(directory, "a", ".rad"), 0755)
	require.NoError(t, err)
	err = os.WriteFile(filepath.Join(directory, "a", ".rad", "rad.yaml"), []byte("something invalid, it won't be used"), 0644)
	require.NoError(t, err)

	config, err := LoadDirectoryConfig(start)
	require.NoError(t, err)
	require.NotNil(t, config)
	require.Equal(t, filepath.Join(directory, "a", "b", ".rad", "rad.yaml"), config.Filepath)
}
