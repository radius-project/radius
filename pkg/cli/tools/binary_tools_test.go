// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package tools

import (
	"errors"
	"fmt"
	"runtime"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/project-radius/radius/pkg/version"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is getting the download URI for a given file based on the operating system and architecture of the machine
//	 it is running on. It takes in a format string and a file name and returns the download URI for the file.
//
// </AiDoc: End of OpenAI comments>
func TestGetDownloadURI(t *testing.T) {
	got, err := GetDownloadURI("%s/%s/%s", "test-bin")
	require.NoError(t, err)

	platform, err := GetValidPlatform(runtime.GOOS, runtime.GOARCH)
	require.NoError(t, err, "GetValidPlatform() error = %v", err)
	want := fmt.Sprintf("%s/%s/test-bin", version.Channel(), platform)

	require.Equal(t, want, got, "GetDownloadURI() got = %v, want %v", got, want)
}

func TestGetValidPlatform(t *testing.T) {
	osArchTests := []struct {
		currentOS   string
		currentArch string
		out         string
		err         error
	}{
		{
			currentOS:   "darwin",
			currentArch: "amd64",
			out:         "macos-x64",
		},
		{
			currentOS:   "darwin",
			currentArch: "arm64",
			out:         "macos-arm64",
		},
		{
			currentOS:   "windows",
			currentArch: "amd64",
			out:         "windows-x64",
		},
		{
			currentOS:   "windows",
			currentArch: "arm64",
			out:         "",
			err:         errors.New("unsupported platform windows/arm64"),
		},
		{
			currentOS:   "linux",
			currentArch: "amd64",
			out:         "linux-x64",
		},
		{
			currentOS:   "linux",
			currentArch: "arm",
			out:         "linux-arm",
		},
		{
			currentOS:   "linux",
			currentArch: "arm64",
			out:         "linux-arm64",
		},
	}

	for _, tc := range osArchTests {
		t.Run(tc.currentOS+"-"+tc.currentArch, func(t *testing.T) {
			platform, err := GetValidPlatform(tc.currentOS, tc.currentArch)
			if tc.err != nil {
				require.ErrorContains(t, err, err.Error())
			} else {
				require.NoError(t, err)
			}
			require.Equal(t, tc.out, platform, "GetValidPlatform() got = %v, want %v", platform, tc.out)
		})
	}
}
