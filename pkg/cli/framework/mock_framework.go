// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/framework (interfaces: Runner)

// Package framework is a generated GoMock package.
package framework

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
//
// # Function Explanation
// 
//	MockRunner is a function that creates a MockRunner object with a MockRunnerMockRecorder, which is used to record and 
//	verify expectations for the MockRunner. It also handles any errors that may occur during the creation of the MockRunner 
//	object.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
//
// # Function Explanation
// 
//	MockRunner's EXPECT() function creates and returns a MockRunnerMockRecorder object which can be used to set expectations
//	 for the MockRunner's behavior. It also handles any errors that may occur during the creation of the 
//	MockRunnerMockRecorder.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
//
// # Function Explanation
// 
//	MockRunner.Run is a mock implementation of the Run function which is used to mock the behavior of the Run function for 
//	testing purposes. It takes in a context and returns an error if one occurs.
func (m *MockRunner) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
//
// # Function Explanation
// 
//	This function records a call to the Run method of the MockRunner interface, with the given argument, and returns a 
//	gomock.Call object for error handling.
func (mr *MockRunnerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), arg0)
}

// Validate mocks base method.
//
// # Function Explanation
// 
//	MockRunner.Validate is a function that validates the given command and arguments, and returns an error if any validation
//	 fails. It also handles any errors that occur during the validation process.
func (m *MockRunner) Validate(arg0 *cobra.Command, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
//
// # Function Explanation
// 
//	This function records a call to the Validate method of the MockRunner object, passing in two arguments. It returns an 
//	error if the arguments are invalid, otherwise it returns a gomock.Call object.
func (mr *MockRunnerMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockRunner)(nil).Validate), arg0, arg1)
}
