// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/framework (interfaces: Factory)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_factory.go -package=framework -self_package github.com/radius-project/radius/pkg/cli/framework github.com/radius-project/radius/pkg/cli/framework Factory
//

// Package framework is a generated GoMock package.
package framework

import (
	reflect "reflect"

	aws "github.com/radius-project/radius/pkg/cli/aws"
	azure "github.com/radius-project/radius/pkg/cli/azure"
	bicep "github.com/radius-project/radius/pkg/cli/bicep"
	namespace "github.com/radius-project/radius/pkg/cli/cmd/env/namespace"
	connections "github.com/radius-project/radius/pkg/cli/connections"
	deploy "github.com/radius-project/radius/pkg/cli/deploy"
	helm "github.com/radius-project/radius/pkg/cli/helm"
	kubernetes "github.com/radius-project/radius/pkg/cli/kubernetes"
	logstream "github.com/radius-project/radius/pkg/cli/kubernetes/logstream"
	portforward "github.com/radius-project/radius/pkg/cli/kubernetes/portforward"
	output "github.com/radius-project/radius/pkg/cli/output"
	prompt "github.com/radius-project/radius/pkg/cli/prompt"
	gomock "go.uber.org/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetAWSClient mocks base method.
func (m *MockFactory) GetAWSClient() aws.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSClient")
	ret0, _ := ret[0].(aws.Client)
	return ret0
}

// GetAWSClient indicates an expected call of GetAWSClient.
func (mr *MockFactoryMockRecorder) GetAWSClient() *MockFactoryGetAWSClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSClient", reflect.TypeOf((*MockFactory)(nil).GetAWSClient))
	return &MockFactoryGetAWSClientCall{Call: call}
}

// MockFactoryGetAWSClientCall wrap *gomock.Call
type MockFactoryGetAWSClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetAWSClientCall) Return(arg0 aws.Client) *MockFactoryGetAWSClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetAWSClientCall) Do(f func() aws.Client) *MockFactoryGetAWSClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetAWSClientCall) DoAndReturn(f func() aws.Client) *MockFactoryGetAWSClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAzureClient mocks base method.
func (m *MockFactory) GetAzureClient() azure.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureClient")
	ret0, _ := ret[0].(azure.Client)
	return ret0
}

// GetAzureClient indicates an expected call of GetAzureClient.
func (mr *MockFactoryMockRecorder) GetAzureClient() *MockFactoryGetAzureClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureClient", reflect.TypeOf((*MockFactory)(nil).GetAzureClient))
	return &MockFactoryGetAzureClientCall{Call: call}
}

// MockFactoryGetAzureClientCall wrap *gomock.Call
type MockFactoryGetAzureClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetAzureClientCall) Return(arg0 azure.Client) *MockFactoryGetAzureClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetAzureClientCall) Do(f func() azure.Client) *MockFactoryGetAzureClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetAzureClientCall) DoAndReturn(f func() azure.Client) *MockFactoryGetAzureClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBicep mocks base method.
func (m *MockFactory) GetBicep() bicep.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBicep")
	ret0, _ := ret[0].(bicep.Interface)
	return ret0
}

// GetBicep indicates an expected call of GetBicep.
func (mr *MockFactoryMockRecorder) GetBicep() *MockFactoryGetBicepCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBicep", reflect.TypeOf((*MockFactory)(nil).GetBicep))
	return &MockFactoryGetBicepCall{Call: call}
}

// MockFactoryGetBicepCall wrap *gomock.Call
type MockFactoryGetBicepCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetBicepCall) Return(arg0 bicep.Interface) *MockFactoryGetBicepCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetBicepCall) Do(f func() bicep.Interface) *MockFactoryGetBicepCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetBicepCall) DoAndReturn(f func() bicep.Interface) *MockFactoryGetBicepCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConfigFileInterface mocks base method.
func (m *MockFactory) GetConfigFileInterface() ConfigFileInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigFileInterface")
	ret0, _ := ret[0].(ConfigFileInterface)
	return ret0
}

// GetConfigFileInterface indicates an expected call of GetConfigFileInterface.
func (mr *MockFactoryMockRecorder) GetConfigFileInterface() *MockFactoryGetConfigFileInterfaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigFileInterface", reflect.TypeOf((*MockFactory)(nil).GetConfigFileInterface))
	return &MockFactoryGetConfigFileInterfaceCall{Call: call}
}

// MockFactoryGetConfigFileInterfaceCall wrap *gomock.Call
type MockFactoryGetConfigFileInterfaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetConfigFileInterfaceCall) Return(arg0 ConfigFileInterface) *MockFactoryGetConfigFileInterfaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetConfigFileInterfaceCall) Do(f func() ConfigFileInterface) *MockFactoryGetConfigFileInterfaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetConfigFileInterfaceCall) DoAndReturn(f func() ConfigFileInterface) *MockFactoryGetConfigFileInterfaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConfigHolder mocks base method.
func (m *MockFactory) GetConfigHolder() *ConfigHolder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigHolder")
	ret0, _ := ret[0].(*ConfigHolder)
	return ret0
}

// GetConfigHolder indicates an expected call of GetConfigHolder.
func (mr *MockFactoryMockRecorder) GetConfigHolder() *MockFactoryGetConfigHolderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigHolder", reflect.TypeOf((*MockFactory)(nil).GetConfigHolder))
	return &MockFactoryGetConfigHolderCall{Call: call}
}

// MockFactoryGetConfigHolderCall wrap *gomock.Call
type MockFactoryGetConfigHolderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetConfigHolderCall) Return(arg0 *ConfigHolder) *MockFactoryGetConfigHolderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetConfigHolderCall) Do(f func() *ConfigHolder) *MockFactoryGetConfigHolderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetConfigHolderCall) DoAndReturn(f func() *ConfigHolder) *MockFactoryGetConfigHolderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConnectionFactory mocks base method.
func (m *MockFactory) GetConnectionFactory() connections.Factory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionFactory")
	ret0, _ := ret[0].(connections.Factory)
	return ret0
}

// GetConnectionFactory indicates an expected call of GetConnectionFactory.
func (mr *MockFactoryMockRecorder) GetConnectionFactory() *MockFactoryGetConnectionFactoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionFactory", reflect.TypeOf((*MockFactory)(nil).GetConnectionFactory))
	return &MockFactoryGetConnectionFactoryCall{Call: call}
}

// MockFactoryGetConnectionFactoryCall wrap *gomock.Call
type MockFactoryGetConnectionFactoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetConnectionFactoryCall) Return(arg0 connections.Factory) *MockFactoryGetConnectionFactoryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetConnectionFactoryCall) Do(f func() connections.Factory) *MockFactoryGetConnectionFactoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetConnectionFactoryCall) DoAndReturn(f func() connections.Factory) *MockFactoryGetConnectionFactoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDeploy mocks base method.
func (m *MockFactory) GetDeploy() deploy.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploy")
	ret0, _ := ret[0].(deploy.Interface)
	return ret0
}

// GetDeploy indicates an expected call of GetDeploy.
func (mr *MockFactoryMockRecorder) GetDeploy() *MockFactoryGetDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockFactory)(nil).GetDeploy))
	return &MockFactoryGetDeployCall{Call: call}
}

// MockFactoryGetDeployCall wrap *gomock.Call
type MockFactoryGetDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetDeployCall) Return(arg0 deploy.Interface) *MockFactoryGetDeployCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetDeployCall) Do(f func() deploy.Interface) *MockFactoryGetDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetDeployCall) DoAndReturn(f func() deploy.Interface) *MockFactoryGetDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHelmInterface mocks base method.
func (m *MockFactory) GetHelmInterface() helm.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelmInterface")
	ret0, _ := ret[0].(helm.Interface)
	return ret0
}

// GetHelmInterface indicates an expected call of GetHelmInterface.
func (mr *MockFactoryMockRecorder) GetHelmInterface() *MockFactoryGetHelmInterfaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelmInterface", reflect.TypeOf((*MockFactory)(nil).GetHelmInterface))
	return &MockFactoryGetHelmInterfaceCall{Call: call}
}

// MockFactoryGetHelmInterfaceCall wrap *gomock.Call
type MockFactoryGetHelmInterfaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetHelmInterfaceCall) Return(arg0 helm.Interface) *MockFactoryGetHelmInterfaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetHelmInterfaceCall) Do(f func() helm.Interface) *MockFactoryGetHelmInterfaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetHelmInterfaceCall) DoAndReturn(f func() helm.Interface) *MockFactoryGetHelmInterfaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetKubernetesInterface mocks base method.
func (m *MockFactory) GetKubernetesInterface() kubernetes.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesInterface")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// GetKubernetesInterface indicates an expected call of GetKubernetesInterface.
func (mr *MockFactoryMockRecorder) GetKubernetesInterface() *MockFactoryGetKubernetesInterfaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesInterface", reflect.TypeOf((*MockFactory)(nil).GetKubernetesInterface))
	return &MockFactoryGetKubernetesInterfaceCall{Call: call}
}

// MockFactoryGetKubernetesInterfaceCall wrap *gomock.Call
type MockFactoryGetKubernetesInterfaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetKubernetesInterfaceCall) Return(arg0 kubernetes.Interface) *MockFactoryGetKubernetesInterfaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetKubernetesInterfaceCall) Do(f func() kubernetes.Interface) *MockFactoryGetKubernetesInterfaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetKubernetesInterfaceCall) DoAndReturn(f func() kubernetes.Interface) *MockFactoryGetKubernetesInterfaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLogstream mocks base method.
func (m *MockFactory) GetLogstream() logstream.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogstream")
	ret0, _ := ret[0].(logstream.Interface)
	return ret0
}

// GetLogstream indicates an expected call of GetLogstream.
func (mr *MockFactoryMockRecorder) GetLogstream() *MockFactoryGetLogstreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogstream", reflect.TypeOf((*MockFactory)(nil).GetLogstream))
	return &MockFactoryGetLogstreamCall{Call: call}
}

// MockFactoryGetLogstreamCall wrap *gomock.Call
type MockFactoryGetLogstreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetLogstreamCall) Return(arg0 logstream.Interface) *MockFactoryGetLogstreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetLogstreamCall) Do(f func() logstream.Interface) *MockFactoryGetLogstreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetLogstreamCall) DoAndReturn(f func() logstream.Interface) *MockFactoryGetLogstreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNamespaceInterface mocks base method.
func (m *MockFactory) GetNamespaceInterface() namespace.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceInterface")
	ret0, _ := ret[0].(namespace.Interface)
	return ret0
}

// GetNamespaceInterface indicates an expected call of GetNamespaceInterface.
func (mr *MockFactoryMockRecorder) GetNamespaceInterface() *MockFactoryGetNamespaceInterfaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceInterface", reflect.TypeOf((*MockFactory)(nil).GetNamespaceInterface))
	return &MockFactoryGetNamespaceInterfaceCall{Call: call}
}

// MockFactoryGetNamespaceInterfaceCall wrap *gomock.Call
type MockFactoryGetNamespaceInterfaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetNamespaceInterfaceCall) Return(arg0 namespace.Interface) *MockFactoryGetNamespaceInterfaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetNamespaceInterfaceCall) Do(f func() namespace.Interface) *MockFactoryGetNamespaceInterfaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetNamespaceInterfaceCall) DoAndReturn(f func() namespace.Interface) *MockFactoryGetNamespaceInterfaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOutput mocks base method.
func (m *MockFactory) GetOutput() output.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput")
	ret0, _ := ret[0].(output.Interface)
	return ret0
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockFactoryMockRecorder) GetOutput() *MockFactoryGetOutputCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockFactory)(nil).GetOutput))
	return &MockFactoryGetOutputCall{Call: call}
}

// MockFactoryGetOutputCall wrap *gomock.Call
type MockFactoryGetOutputCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetOutputCall) Return(arg0 output.Interface) *MockFactoryGetOutputCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetOutputCall) Do(f func() output.Interface) *MockFactoryGetOutputCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetOutputCall) DoAndReturn(f func() output.Interface) *MockFactoryGetOutputCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPortforward mocks base method.
func (m *MockFactory) GetPortforward() portforward.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortforward")
	ret0, _ := ret[0].(portforward.Interface)
	return ret0
}

// GetPortforward indicates an expected call of GetPortforward.
func (mr *MockFactoryMockRecorder) GetPortforward() *MockFactoryGetPortforwardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortforward", reflect.TypeOf((*MockFactory)(nil).GetPortforward))
	return &MockFactoryGetPortforwardCall{Call: call}
}

// MockFactoryGetPortforwardCall wrap *gomock.Call
type MockFactoryGetPortforwardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetPortforwardCall) Return(arg0 portforward.Interface) *MockFactoryGetPortforwardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetPortforwardCall) Do(f func() portforward.Interface) *MockFactoryGetPortforwardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetPortforwardCall) DoAndReturn(f func() portforward.Interface) *MockFactoryGetPortforwardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrompter mocks base method.
func (m *MockFactory) GetPrompter() prompt.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompter")
	ret0, _ := ret[0].(prompt.Interface)
	return ret0
}

// GetPrompter indicates an expected call of GetPrompter.
func (mr *MockFactoryMockRecorder) GetPrompter() *MockFactoryGetPrompterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompter", reflect.TypeOf((*MockFactory)(nil).GetPrompter))
	return &MockFactoryGetPrompterCall{Call: call}
}

// MockFactoryGetPrompterCall wrap *gomock.Call
type MockFactoryGetPrompterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFactoryGetPrompterCall) Return(arg0 prompt.Interface) *MockFactoryGetPrompterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFactoryGetPrompterCall) Do(f func() prompt.Interface) *MockFactoryGetPrompterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFactoryGetPrompterCall) DoAndReturn(f func() prompt.Interface) *MockFactoryGetPrompterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
