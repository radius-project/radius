// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/framework (interfaces: ConfigFileInterface)

// Package framework is a generated GoMock package.
package framework

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workspaces "github.com/project-radius/radius/pkg/cli/workspaces"
	viper "github.com/spf13/viper"
)

// MockConfigFileInterface is a mock of ConfigFileInterface interface.
type MockConfigFileInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigFileInterfaceMockRecorder
}

// MockConfigFileInterfaceMockRecorder is the mock recorder for MockConfigFileInterface.
type MockConfigFileInterfaceMockRecorder struct {
	mock *MockConfigFileInterface
}

// NewMockConfigFileInterface creates a new mock instance.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new mock object of type MockConfigFileInterface, which is used to test code that interacts with 
//	a ConfigFileInterface. It also creates a MockConfigFileInterfaceMockRecorder, which is used to record the expected 
//	behavior of the mock object.
//
// </AiDoc: End of OpenAI comments>
func NewMockConfigFileInterface(ctrl *gomock.Controller) *MockConfigFileInterface {
	mock := &MockConfigFileInterface{ctrl: ctrl}
	mock.recorder = &MockConfigFileInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is creating a mock recorder for the MockConfigFileInterface, which is used to record and verify 
//	expectations for the MockConfigFileInterface.
//
// </AiDoc: End of OpenAI comments>
func (m *MockConfigFileInterface) EXPECT() *MockConfigFileInterfaceMockRecorder {
	return m.recorder
}

// ConfigFromContext mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is retrieving a configuration file from a given context and returning it as a Viper object.
//
// </AiDoc: End of OpenAI comments>
func (m *MockConfigFileInterface) ConfigFromContext(arg0 context.Context) *viper.Viper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFromContext", arg0)
	ret0, _ := ret[0].(*viper.Viper)
	return ret0
}

// ConfigFromContext indicates an expected call of ConfigFromContext.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is a recorder for the ConfigFromContext method of the MockConfigFileInterface. It takes in an argument of 
//	type interface{} and records the call to the ConfigFromContext method with the given argument.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockConfigFileInterfaceMockRecorder) ConfigFromContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFromContext", reflect.TypeOf((*MockConfigFileInterface)(nil).ConfigFromContext), arg0)
}

// DeleteWorkspace mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is deleting a workspace from a configuration file. It takes in a context, a viper and a string as 
//	arguments and returns an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockConfigFileInterface) DeleteWorkspace(arg0 context.Context, arg1 *viper.Viper, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the DeleteWorkspace method of the MockConfigFileInterface object. It takes 
//	three parameters and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockConfigFileInterfaceMockRecorder) DeleteWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockConfigFileInterface)(nil).DeleteWorkspace), arg0, arg1, arg2)
}

// EditWorkspaces mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to edit the workspaces in a configuration file. It takes in a context, a viper, a workspace, and a
//	 list of interfaces as arguments. It then returns an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockConfigFileInterface) EditWorkspaces(arg0 context.Context, arg1 *viper.Viper, arg2 *workspaces.Workspace, arg3 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditWorkspaces", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditWorkspaces indicates an expected call of EditWorkspaces.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is recording a call to the EditWorkspaces function of the MockConfigFileInterface. It takes four arguments
//	 of type interface{} and returns a call to the function.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockConfigFileInterfaceMockRecorder) EditWorkspaces(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditWorkspaces", reflect.TypeOf((*MockConfigFileInterface)(nil).EditWorkspaces), arg0, arg1, arg2, arg3)
}

// SetDefaultWorkspace mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is setting the default workspace in a configuration file using the context, viper and a string as 
//	parameters.
//
// </AiDoc: End of OpenAI comments>
func (m *MockConfigFileInterface) SetDefaultWorkspace(arg0 context.Context, arg1 *viper.Viper, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultWorkspace indicates an expected call of SetDefaultWorkspace.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is setting the default workspace for a given configuration file interface. It takes three parameters as 
//	input and records the call with the given method type.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockConfigFileInterfaceMockRecorder) SetDefaultWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultWorkspace", reflect.TypeOf((*MockConfigFileInterface)(nil).SetDefaultWorkspace), arg0, arg1, arg2)
}
