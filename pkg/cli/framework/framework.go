// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package framework

import (
	"context"

	"github.com/project-radius/radius/pkg/cli/bicep"
	"github.com/project-radius/radius/pkg/cli/cmd/env/namespace"
	"github.com/project-radius/radius/pkg/cli/connections"
	"github.com/project-radius/radius/pkg/cli/deploy"
	"github.com/project-radius/radius/pkg/cli/helm"
	"github.com/project-radius/radius/pkg/cli/kubernetes"
	"github.com/project-radius/radius/pkg/cli/kubernetes/logstream"
	"github.com/project-radius/radius/pkg/cli/kubernetes/portforward"
	"github.com/project-radius/radius/pkg/cli/output"
	"github.com/project-radius/radius/pkg/cli/prompt"
	"github.com/project-radius/radius/pkg/cli/setup"
	"github.com/spf13/cobra"
)

// Factory interface handles resources for interfacing with corerp and configs
type Factory interface {
	GetBicep() bicep.Interface
	GetConnectionFactory() connections.Factory
	GetConfigHolder() *ConfigHolder
	GetDeploy() deploy.Interface
	GetLogstream() logstream.Interface
	GetOutput() output.Interface

	// GetPortforward fetches the portforward interface.
	GetPortforward() portforward.Interface
	GetPrompter() prompt.Interface
	GetConfigFileInterface() ConfigFileInterface
	GetKubernetesInterface() kubernetes.Interface
	GetHelmInterface() helm.Interface
	GetNamespaceInterface() namespace.Interface
	GetSetupInterface() setup.Interface
}

type Impl struct {
	Bicep               bicep.Interface
	ConnectionFactory   connections.Factory
	ConfigHolder        *ConfigHolder
	Deploy              deploy.Interface
	Logstream           logstream.Interface
	Output              output.Interface
	Portforward         portforward.Interface
	Prompter            prompt.Interface
	ConfigFileInterface ConfigFileInterface
	KubernetesInterface kubernetes.Interface
	HelmInterface       helm.Interface
	NamespaceInterface  namespace.Interface
	SetupInterface      setup.Interface
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the Bicep Interface from the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetBicep() bicep.Interface {
	return i.Bicep
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the connection factory that is stored in the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetConnectionFactory() connections.Factory {
	return i.ConnectionFactory
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function returns the ConfigHolder associated with the Impl object.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetConfigHolder() *ConfigHolder {
	return i.ConfigHolder
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the Deploy interface from the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetDeploy() deploy.Interface {
	return i.Deploy
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the logstream interface that is stored in the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetLogstream() logstream.Interface {
	return i.Logstream
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the output interface stored in the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetOutput() output.Interface {
	return i.Output
}

// GetPortforward fetches the portforward interface.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is providing a way to access the portforward interface of the Impl object. It is returning the portforward
//	 interface stored in the Impl object.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetPortforward() portforward.Interface {
	return i.Portforward
}

// GetPrompter fetches the interface to bubble tea prompt
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the prompter interface that is stored in the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetPrompter() prompt.Interface {
	return i.Prompter
}

// GetConfigFileInterface fetches the interface to interace with radius config file
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is returning the ConfigFileInterface field of the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetConfigFileInterface() ConfigFileInterface {
	return i.ConfigFileInterface
}

// GetKubernetesInterface fetches the interface to get info related to the kubernetes cluster
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the Kubernetes Interface stored in the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetKubernetesInterface() kubernetes.Interface {
	return i.KubernetesInterface
}

// GetHelmInterface fetches the interface for operations related to radius installation
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the HelmInterface field from the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetHelmInterface() helm.Interface {
	return i.HelmInterface
}

// GetNamespaceInterface fetches the interface for operations related to radius installation
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the NamespaceInterface field of the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetNamespaceInterface() namespace.Interface {
	return i.NamespaceInterface
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is returning the SetupInterface field of the Impl struct.
//
// </AiDoc: End of OpenAI comments>
func (i *Impl) GetSetupInterface() setup.Interface {
	return i.SetupInterface
}

type Runner interface {
	Validate(cmd *cobra.Command, args []string) error
	Run(ctx context.Context) error
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes a Runner as an argument and returns a function that takes a command and a list of arguments. It then
//	 validates the command and arguments, runs the command with the given context, and returns an error if one occurs.
//
// </AiDoc: End of OpenAI comments>
func RunCommand(runner Runner) func(cmd *cobra.Command, args []string) error {
	return func(cmd *cobra.Command, args []string) error {
		err := runner.Validate(cmd, args)
		if err != nil {
			return err
		}

		err = runner.Run(cmd.Context())
		if err != nil {
			return err
		}

		return nil
	}
}
