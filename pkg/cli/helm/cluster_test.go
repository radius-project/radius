// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package helm

import (
	"testing"

	"github.com/project-radius/radius/pkg/version"
	"github.com/stretchr/testify/require"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is testing if the CLIClusterOptions can be set. It creates a CLIClusterOptions object with the 
//	ChartPath, Image, and Tag fields set to specific values. It then calls the PopulateDefaultClusterOptions function with 
//	the CLIClusterOptions object as an argument. Finally, it checks if the fields of the returned ClusterOptions object are 
//	equal to the values set in the CLIClusterOptions object.
//
// </AiDoc: End of OpenAI comments>
func Test_CanSetCLIOptions(t *testing.T) {
	cliOptions := CLIClusterOptions{
		Radius: RadiusOptions{
			ChartPath: "chartpath",
			Image:     "image",
			Tag:       "tag",
		},
	}
	clusterOptions := PopulateDefaultClusterOptions(cliOptions)

	require.Equal(t, "chartpath", clusterOptions.Radius.ChartPath)
	require.Equal(t, "image", clusterOptions.Radius.Image)
	require.Equal(t, "tag", clusterOptions.Radius.Tag)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing the default tags for a cluster options object. It checks that the tag is equal to the version 
//	channel, or "latest" if the version is in the edge channel.
//
// </AiDoc: End of OpenAI comments>
func Test_DefaultTags(t *testing.T) {
	clusterOptions := NewDefaultClusterOptions()
	tag := version.Channel()
	if version.IsEdgeChannel() {
		tag = "latest"
	}

	require.Equal(t, tag, clusterOptions.Radius.Tag)
	require.Equal(t, tag, clusterOptions.Radius.AppCoreTag)
	require.Equal(t, tag, clusterOptions.Radius.UCPTag)
	require.Equal(t, tag, clusterOptions.Radius.DETag)

}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is testing that the default value for the chart version of the Radius component is set to the 
//	version of the Helm chart.
//
// </AiDoc: End of OpenAI comments>
func Test_DefaultsToHelmChartVersionValue(t *testing.T) {
	clusterOptions := PopulateDefaultClusterOptions(CLIClusterOptions{})

	// Not checking other values due to potential failures on release builds, the chart version
	// is primarily the mail regression we see.
	require.Equal(t, version.ChartVersion(), clusterOptions.Radius.ChartVersion)
}
