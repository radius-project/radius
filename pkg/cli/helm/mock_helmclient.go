// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/helm (interfaces: HelmClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_helmclient.go -package=helm -self_package github.com/radius-project/radius/pkg/cli/helm github.com/radius-project/radius/pkg/cli/helm HelmClient
//

// Package helm is a generated GoMock package.
package helm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	action "helm.sh/helm/v3/pkg/action"
	chart "helm.sh/helm/v3/pkg/chart"
	release "helm.sh/helm/v3/pkg/release"
)

// MockHelmClient is a mock of HelmClient interface.
type MockHelmClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientMockRecorder
}

// MockHelmClientMockRecorder is the mock recorder for MockHelmClient.
type MockHelmClientMockRecorder struct {
	mock *MockHelmClient
}

// NewMockHelmClient creates a new mock instance.
func NewMockHelmClient(ctrl *gomock.Controller) *MockHelmClient {
	mock := &MockHelmClient{ctrl: ctrl}
	mock.recorder = &MockHelmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmClient) EXPECT() *MockHelmClientMockRecorder {
	return m.recorder
}

// LoadChart mocks base method.
func (m *MockHelmClient) LoadChart(arg0 string) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChart", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadChart indicates an expected call of LoadChart.
func (mr *MockHelmClientMockRecorder) LoadChart(arg0 any) *MockHelmClientLoadChartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChart", reflect.TypeOf((*MockHelmClient)(nil).LoadChart), arg0)
	return &MockHelmClientLoadChartCall{Call: call}
}

// MockHelmClientLoadChartCall wrap *gomock.Call
type MockHelmClientLoadChartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientLoadChartCall) Return(arg0 *chart.Chart, arg1 error) *MockHelmClientLoadChartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientLoadChartCall) Do(f func(string) (*chart.Chart, error)) *MockHelmClientLoadChartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientLoadChartCall) DoAndReturn(f func(string) (*chart.Chart, error)) *MockHelmClientLoadChartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmHistory mocks base method.
func (m *MockHelmClient) RunHelmHistory(arg0 *action.Configuration, arg1 string) ([]*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmHistory", arg0, arg1)
	ret0, _ := ret[0].([]*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmHistory indicates an expected call of RunHelmHistory.
func (mr *MockHelmClientMockRecorder) RunHelmHistory(arg0, arg1 any) *MockHelmClientRunHelmHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmHistory", reflect.TypeOf((*MockHelmClient)(nil).RunHelmHistory), arg0, arg1)
	return &MockHelmClientRunHelmHistoryCall{Call: call}
}

// MockHelmClientRunHelmHistoryCall wrap *gomock.Call
type MockHelmClientRunHelmHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmHistoryCall) Return(arg0 []*release.Release, arg1 error) *MockHelmClientRunHelmHistoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmHistoryCall) Do(f func(*action.Configuration, string) ([]*release.Release, error)) *MockHelmClientRunHelmHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmHistoryCall) DoAndReturn(f func(*action.Configuration, string) ([]*release.Release, error)) *MockHelmClientRunHelmHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmInstall mocks base method.
func (m *MockHelmClient) RunHelmInstall(arg0 *action.Configuration, arg1 *chart.Chart, arg2, arg3 string, arg4 bool) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmInstall", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmInstall indicates an expected call of RunHelmInstall.
func (mr *MockHelmClientMockRecorder) RunHelmInstall(arg0, arg1, arg2, arg3, arg4 any) *MockHelmClientRunHelmInstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmInstall", reflect.TypeOf((*MockHelmClient)(nil).RunHelmInstall), arg0, arg1, arg2, arg3, arg4)
	return &MockHelmClientRunHelmInstallCall{Call: call}
}

// MockHelmClientRunHelmInstallCall wrap *gomock.Call
type MockHelmClientRunHelmInstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmInstallCall) Return(arg0 *release.Release, arg1 error) *MockHelmClientRunHelmInstallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmInstallCall) Do(f func(*action.Configuration, *chart.Chart, string, string, bool) (*release.Release, error)) *MockHelmClientRunHelmInstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmInstallCall) DoAndReturn(f func(*action.Configuration, *chart.Chart, string, string, bool) (*release.Release, error)) *MockHelmClientRunHelmInstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmList mocks base method.
func (m *MockHelmClient) RunHelmList(arg0 *action.Configuration, arg1 string) ([]*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmList", arg0, arg1)
	ret0, _ := ret[0].([]*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmList indicates an expected call of RunHelmList.
func (mr *MockHelmClientMockRecorder) RunHelmList(arg0, arg1 any) *MockHelmClientRunHelmListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmList", reflect.TypeOf((*MockHelmClient)(nil).RunHelmList), arg0, arg1)
	return &MockHelmClientRunHelmListCall{Call: call}
}

// MockHelmClientRunHelmListCall wrap *gomock.Call
type MockHelmClientRunHelmListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmListCall) Return(arg0 []*release.Release, arg1 error) *MockHelmClientRunHelmListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmListCall) Do(f func(*action.Configuration, string) ([]*release.Release, error)) *MockHelmClientRunHelmListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmListCall) DoAndReturn(f func(*action.Configuration, string) ([]*release.Release, error)) *MockHelmClientRunHelmListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmPull mocks base method.
func (m *MockHelmClient) RunHelmPull(arg0 []action.PullOpt, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmPull", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmPull indicates an expected call of RunHelmPull.
func (mr *MockHelmClientMockRecorder) RunHelmPull(arg0, arg1 any) *MockHelmClientRunHelmPullCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmPull", reflect.TypeOf((*MockHelmClient)(nil).RunHelmPull), arg0, arg1)
	return &MockHelmClientRunHelmPullCall{Call: call}
}

// MockHelmClientRunHelmPullCall wrap *gomock.Call
type MockHelmClientRunHelmPullCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmPullCall) Return(arg0 string, arg1 error) *MockHelmClientRunHelmPullCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmPullCall) Do(f func([]action.PullOpt, string) (string, error)) *MockHelmClientRunHelmPullCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmPullCall) DoAndReturn(f func([]action.PullOpt, string) (string, error)) *MockHelmClientRunHelmPullCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmRollback mocks base method.
func (m *MockHelmClient) RunHelmRollback(arg0 *action.Configuration, arg1 string, arg2 int, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmRollback", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunHelmRollback indicates an expected call of RunHelmRollback.
func (mr *MockHelmClientMockRecorder) RunHelmRollback(arg0, arg1, arg2, arg3 any) *MockHelmClientRunHelmRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmRollback", reflect.TypeOf((*MockHelmClient)(nil).RunHelmRollback), arg0, arg1, arg2, arg3)
	return &MockHelmClientRunHelmRollbackCall{Call: call}
}

// MockHelmClientRunHelmRollbackCall wrap *gomock.Call
type MockHelmClientRunHelmRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmRollbackCall) Return(arg0 error) *MockHelmClientRunHelmRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmRollbackCall) Do(f func(*action.Configuration, string, int, bool) error) *MockHelmClientRunHelmRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmRollbackCall) DoAndReturn(f func(*action.Configuration, string, int, bool) error) *MockHelmClientRunHelmRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmUninstall mocks base method.
func (m *MockHelmClient) RunHelmUninstall(arg0 *action.Configuration, arg1, arg2 string, arg3 bool) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmUninstall", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmUninstall indicates an expected call of RunHelmUninstall.
func (mr *MockHelmClientMockRecorder) RunHelmUninstall(arg0, arg1, arg2, arg3 any) *MockHelmClientRunHelmUninstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmUninstall", reflect.TypeOf((*MockHelmClient)(nil).RunHelmUninstall), arg0, arg1, arg2, arg3)
	return &MockHelmClientRunHelmUninstallCall{Call: call}
}

// MockHelmClientRunHelmUninstallCall wrap *gomock.Call
type MockHelmClientRunHelmUninstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmUninstallCall) Return(arg0 *release.UninstallReleaseResponse, arg1 error) *MockHelmClientRunHelmUninstallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmUninstallCall) Do(f func(*action.Configuration, string, string, bool) (*release.UninstallReleaseResponse, error)) *MockHelmClientRunHelmUninstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmUninstallCall) DoAndReturn(f func(*action.Configuration, string, string, bool) (*release.UninstallReleaseResponse, error)) *MockHelmClientRunHelmUninstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunHelmUpgrade mocks base method.
func (m *MockHelmClient) RunHelmUpgrade(arg0 *action.Configuration, arg1 *chart.Chart, arg2, arg3 string, arg4 bool) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHelmUpgrade", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHelmUpgrade indicates an expected call of RunHelmUpgrade.
func (mr *MockHelmClientMockRecorder) RunHelmUpgrade(arg0, arg1, arg2, arg3, arg4 any) *MockHelmClientRunHelmUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHelmUpgrade", reflect.TypeOf((*MockHelmClient)(nil).RunHelmUpgrade), arg0, arg1, arg2, arg3, arg4)
	return &MockHelmClientRunHelmUpgradeCall{Call: call}
}

// MockHelmClientRunHelmUpgradeCall wrap *gomock.Call
type MockHelmClientRunHelmUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmClientRunHelmUpgradeCall) Return(arg0 *release.Release, arg1 error) *MockHelmClientRunHelmUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmClientRunHelmUpgradeCall) Do(f func(*action.Configuration, *chart.Chart, string, string, bool) (*release.Release, error)) *MockHelmClientRunHelmUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmClientRunHelmUpgradeCall) DoAndReturn(f func(*action.Configuration, *chart.Chart, string, string, bool) (*release.Release, error)) *MockHelmClientRunHelmUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
