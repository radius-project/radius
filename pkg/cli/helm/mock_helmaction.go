// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/helm (interfaces: HelmAction)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_helmaction.go -package=helm -self_package github.com/radius-project/radius/pkg/cli/helm github.com/radius-project/radius/pkg/cli/helm HelmAction
//

// Package helm is a generated GoMock package.
package helm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	action "helm.sh/helm/v3/pkg/action"
	chart "helm.sh/helm/v3/pkg/chart"
)

// MockHelmAction is a mock of HelmAction interface.
type MockHelmAction struct {
	ctrl     *gomock.Controller
	recorder *MockHelmActionMockRecorder
}

// MockHelmActionMockRecorder is the mock recorder for MockHelmAction.
type MockHelmActionMockRecorder struct {
	mock *MockHelmAction
}

// NewMockHelmAction creates a new mock instance.
func NewMockHelmAction(ctrl *gomock.Controller) *MockHelmAction {
	mock := &MockHelmAction{ctrl: ctrl}
	mock.recorder = &MockHelmActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmAction) EXPECT() *MockHelmActionMockRecorder {
	return m.recorder
}

// ApplyHelmChart mocks base method.
func (m *MockHelmAction) ApplyHelmChart(arg0 *chart.Chart, arg1 *action.Configuration, arg2 ChartOptions, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyHelmChart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyHelmChart indicates an expected call of ApplyHelmChart.
func (mr *MockHelmActionMockRecorder) ApplyHelmChart(arg0, arg1, arg2, arg3 any) *MockHelmActionApplyHelmChartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyHelmChart", reflect.TypeOf((*MockHelmAction)(nil).ApplyHelmChart), arg0, arg1, arg2, arg3)
	return &MockHelmActionApplyHelmChartCall{Call: call}
}

// MockHelmActionApplyHelmChartCall wrap *gomock.Call
type MockHelmActionApplyHelmChartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmActionApplyHelmChartCall) Return(arg0 bool, arg1 error) *MockHelmActionApplyHelmChartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmActionApplyHelmChartCall) Do(f func(*chart.Chart, *action.Configuration, ChartOptions, string) (bool, error)) *MockHelmActionApplyHelmChartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmActionApplyHelmChartCall) DoAndReturn(f func(*chart.Chart, *action.Configuration, ChartOptions, string) (bool, error)) *MockHelmActionApplyHelmChartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HelmChartFromContainerRegistry mocks base method.
func (m *MockHelmAction) HelmChartFromContainerRegistry(arg0 string, arg1 *action.Configuration, arg2, arg3 string) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelmChartFromContainerRegistry", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelmChartFromContainerRegistry indicates an expected call of HelmChartFromContainerRegistry.
func (mr *MockHelmActionMockRecorder) HelmChartFromContainerRegistry(arg0, arg1, arg2, arg3 any) *MockHelmActionHelmChartFromContainerRegistryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelmChartFromContainerRegistry", reflect.TypeOf((*MockHelmAction)(nil).HelmChartFromContainerRegistry), arg0, arg1, arg2, arg3)
	return &MockHelmActionHelmChartFromContainerRegistryCall{Call: call}
}

// MockHelmActionHelmChartFromContainerRegistryCall wrap *gomock.Call
type MockHelmActionHelmChartFromContainerRegistryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmActionHelmChartFromContainerRegistryCall) Return(arg0 *chart.Chart, arg1 error) *MockHelmActionHelmChartFromContainerRegistryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmActionHelmChartFromContainerRegistryCall) Do(f func(string, *action.Configuration, string, string) (*chart.Chart, error)) *MockHelmActionHelmChartFromContainerRegistryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmActionHelmChartFromContainerRegistryCall) DoAndReturn(f func(string, *action.Configuration, string, string) (*chart.Chart, error)) *MockHelmActionHelmChartFromContainerRegistryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoadChart mocks base method.
func (m *MockHelmAction) LoadChart(arg0 string) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChart", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadChart indicates an expected call of LoadChart.
func (mr *MockHelmActionMockRecorder) LoadChart(arg0 any) *MockHelmActionLoadChartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChart", reflect.TypeOf((*MockHelmAction)(nil).LoadChart), arg0)
	return &MockHelmActionLoadChartCall{Call: call}
}

// MockHelmActionLoadChartCall wrap *gomock.Call
type MockHelmActionLoadChartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmActionLoadChartCall) Return(arg0 *chart.Chart, arg1 error) *MockHelmActionLoadChartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmActionLoadChartCall) Do(f func(string) (*chart.Chart, error)) *MockHelmActionLoadChartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmActionLoadChartCall) DoAndReturn(f func(string) (*chart.Chart, error)) *MockHelmActionLoadChartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRelease mocks base method.
func (m *MockHelmAction) QueryRelease(arg0, arg1, arg2 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryRelease indicates an expected call of QueryRelease.
func (mr *MockHelmActionMockRecorder) QueryRelease(arg0, arg1, arg2 any) *MockHelmActionQueryReleaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelease", reflect.TypeOf((*MockHelmAction)(nil).QueryRelease), arg0, arg1, arg2)
	return &MockHelmActionQueryReleaseCall{Call: call}
}

// MockHelmActionQueryReleaseCall wrap *gomock.Call
type MockHelmActionQueryReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelmActionQueryReleaseCall) Return(arg0 bool, arg1 string, arg2 error) *MockHelmActionQueryReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelmActionQueryReleaseCall) Do(f func(string, string, string) (bool, string, error)) *MockHelmActionQueryReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelmActionQueryReleaseCall) DoAndReturn(f func(string, string, string) (bool, string, error)) *MockHelmActionQueryReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
