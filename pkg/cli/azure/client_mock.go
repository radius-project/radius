// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/azure (interfaces: Client)

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	reflect "reflect"

	armresources "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	armsubscriptions "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckResourceGroupExistence mocks base method.
func (m *MockClient) CheckResourceGroupExistence(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResourceGroupExistence", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResourceGroupExistence indicates an expected call of CheckResourceGroupExistence.
func (mr *MockClientMockRecorder) CheckResourceGroupExistence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResourceGroupExistence", reflect.TypeOf((*MockClient)(nil).CheckResourceGroupExistence), arg0, arg1, arg2)
}

// CreateOrUpdateResourceGroup mocks base method.
func (m *MockClient) CreateOrUpdateResourceGroup(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResourceGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateResourceGroup indicates an expected call of CreateOrUpdateResourceGroup.
func (mr *MockClientMockRecorder) CreateOrUpdateResourceGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResourceGroup", reflect.TypeOf((*MockClient)(nil).CreateOrUpdateResourceGroup), arg0, arg1, arg2, arg3)
}

// Locations mocks base method.
func (m *MockClient) Locations(arg0 context.Context, arg1 string) ([]armsubscriptions.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locations", arg0, arg1)
	ret0, _ := ret[0].([]armsubscriptions.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locations indicates an expected call of Locations.
func (mr *MockClientMockRecorder) Locations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locations", reflect.TypeOf((*MockClient)(nil).Locations), arg0, arg1)
}

// ResourceGroups mocks base method.
func (m *MockClient) ResourceGroups(arg0 context.Context, arg1 string) ([]armresources.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroups", arg0, arg1)
	ret0, _ := ret[0].([]armresources.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceGroups indicates an expected call of ResourceGroups.
func (mr *MockClientMockRecorder) ResourceGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroups", reflect.TypeOf((*MockClient)(nil).ResourceGroups), arg0, arg1)
}

// Subscriptions mocks base method.
func (m *MockClient) Subscriptions(arg0 context.Context) (*SubscriptionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscriptions", arg0)
	ret0, _ := ret[0].(*SubscriptionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscriptions indicates an expected call of Subscriptions.
func (mr *MockClientMockRecorder) Subscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockClient)(nil).Subscriptions), arg0)
}
