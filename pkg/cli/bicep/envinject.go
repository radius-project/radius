// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package bicep

// InjectEnvironmentParam injects an argument for environment into the parameters if required.
//
// - parameters.environment exists && param not passed in -> inject environmentId
// - parameters.environment does not exist -> noop
// - input parameters already include environment -> noop.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes in a deployment template, a set of parameters, and an environment ID as inputs. It then modifies the
//	 deployment template by injecting the environment ID into the parameters map.
//
// </AiDoc: End of OpenAI comments>
func InjectEnvironmentParam(deploymentTemplate map[string]any, parameters map[string]map[string]any, environmentId string) error {
	return injectParam(deploymentTemplate, parameters, "environment", environmentId)
}

// InjectApplicationParam injects an argument for application into the parameters if required.
//
// - parameters.application exists && param not passed in -> inject environmentId
// - parameters.application does not exist -> noop
// - input parameters already include application -> noop.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	
 
//	This function is used to inject application parameters into a deployment template. It takes a deployment template, a map
//	 of parameters, and an application ID as arguments. It then injects the parameters into the deployment template based on
//	 the application ID.
//
// </AiDoc: End of OpenAI comments>
func InjectApplicationParam(deploymentTemplate map[string]any, parameters map[string]map[string]any, applicationId string) error {
	return injectParam(deploymentTemplate, parameters, "application", applicationId)
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The function is checking if a given parameter is a formal parameter of a deployment template. If it is, it sets the 
//	value of the parameter to a given value if it wasn't set at the command line by the user.
//
// </AiDoc: End of OpenAI comments>
func injectParam(deploymentTemplate map[string]any, parameters map[string]map[string]any, parameter string, value string) error {
	if deploymentTemplate["parameters"] == nil {
		return nil
	}

	innerParameters := deploymentTemplate["parameters"].(map[string]any)
	if innerParameters[parameter] == nil {
		return nil
	}

	// If we got here, it means 'parameter' is a formal parameter of the template.

	// Set the value if it wasn't set at the command line by the user.
	if _, ok := parameters[parameter]; !ok {
		parameters[parameter] = map[string]any{
			"value": value,
		}
	}

	return nil
}
