// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package bicep

import (
	"encoding/json"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"
)

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is reading a JSON file, unmarshalling it into a map, and then injecting an environment parameter into the 
//	map. The environment parameter is the path of the environment that is being used.
//
// </AiDoc: End of OpenAI comments>
func Test_InjectEnvironmentParam_InjectedIfParamAvailable(t *testing.T) {
	input, err := os.ReadFile(filepath.Join("testdata", "test-injectenvid.json"))
	require.NoError(t, err)
	template := map[string]any{}

	err = json.Unmarshal(input, &template)
	require.NoError(t, err)

	params := map[string]map[string]any{}

	err = InjectEnvironmentParam(template, params, "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my")
	require.NoError(t, err)

	require.Equal(t, "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my", params["environment"]["value"])
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is reading a JSON file, unmarshalling it into a map, and then injecting an application parameter into the 
//	map if it is available.
//
// </AiDoc: End of OpenAI comments>
func Test_InjectApplicationParam_InjectedIfParamAvailable(t *testing.T) {
	input, err := os.ReadFile(filepath.Join("testdata", "test-injectappid.json"))
	require.NoError(t, err)
	template := map[string]any{}

	err = json.Unmarshal(input, &template)
	require.NoError(t, err)

	params := map[string]map[string]any{}

	err = InjectApplicationParam(template, params, "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/applications/my")
	require.NoError(t, err)

	require.Equal(t, "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/applications/my", params["application"]["value"])
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The previous function is testing the injectParam function which is used to inject a parameter into a template. It is 
//	testing that if a parameter is available, it will be injected into the template. It does this by reading a json file, 
//	unmarshalling it into a template, and then injecting a parameter into the template. It then checks that the parameter 
//	was successfully injected into the template.
//
// </AiDoc: End of OpenAI comments>
func Test_injectParam_InjectedIfParamAvailable(t *testing.T) {
	input, err := os.ReadFile(filepath.Join("testdata", "test-injectenvid.json"))
	require.NoError(t, err)
	template := map[string]any{}

	err = json.Unmarshal(input, &template)
	require.NoError(t, err)

	params := map[string]map[string]any{}

	err = injectParam(template, params, "environment", "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my")
	require.NoError(t, err)

	require.Equal(t, "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my", params["environment"]["value"])
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing that if no parameters are available, then they will not be injected. It does this by reading a 
//	JSON file, unmarshalling it into a map, and then attempting to inject parameters into it. If no parameters are 
//	available, then the function will return without any errors.
//
// </AiDoc: End of OpenAI comments>
func Test_injectParam_NotInjectedIfNoParamAvailable(t *testing.T) {
	input, err := os.ReadFile(filepath.Join("testdata", "test-noenv.json"))
	require.NoError(t, err)
	template := map[string]any{}

	err = json.Unmarshal(input, &template)
	require.NoError(t, err)

	params := map[string]map[string]any{}

	err = injectParam(template, params, "environment", "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my")
	require.NoError(t, err)

	require.Nil(t, params["environment"])
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is testing that a parameter is not injected into a template if it is already set. It reads a JSON file, 
//	unmarshals it into a map, sets a parameter, and then injects the parameter into the template. It then checks that the 
//	parameter has not been changed.
//
// </AiDoc: End of OpenAI comments>
func Test_injectParam_NotInjectedIfParamAlreadySet(t *testing.T) {
	input, err := os.ReadFile(filepath.Join("testdata", "test-injectenvid.json"))
	require.NoError(t, err)
	template := map[string]any{}

	err = json.Unmarshal(input, &template)
	require.NoError(t, err)

	params := map[string]map[string]any{
		"environment": {
			"value": "ANOTHERENV",
		},
	}

	err = injectParam(template, params, "environment", "/planes/radius/local/resourceGroups/my-rg/providers/Application.Core/environments/my")
	require.NoError(t, err)

	require.Equal(t, "ANOTHERENV", params["environment"]["value"])
}
