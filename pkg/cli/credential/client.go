// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

package credential

import (
	"context"
	"fmt"

	"github.com/project-radius/radius/pkg/cli"
	ucp "github.com/project-radius/radius/pkg/ucp/api/v20220901privatepreview"
)

const (
	AzurePlaneType = "azure"
	AWSPlaneType   = "aws"
)

// CloudProviderStatus is the representation of a cloud provider configuration.
type CloudProviderStatus struct {

	// Name is the name/kind of the provider. For right now this only supports Azure.
	Name string

	// Enabled is the enabled/disabled status of the provider.
	Enabled bool
}

type ProviderCredentialConfiguration struct {
	CloudProviderStatus

	// AzureCredentials is used to set the credentials on Puts. It is NOT returned on Get/List.
	AzureCredentials *ucp.AzureServicePrincipalProperties

	// AWSCredentials is used to set the credentials on Puts. It is NOT returned on Get/List.
	AWSCredentials *ucp.AWSCredentialProperties
}

//go:generate mockgen -destination=./mock_client.go -package=credential -self_package github.com/project-radius/radius/pkg/cli/credential github.com/project-radius/radius/pkg/cli/credential Interface
type Interface interface {
	// CreateCredential creates ucp crendential for the supported providers.
	CreateCredential(ctx context.Context, planeType string, planeName string, name string, credential ucp.CredentialResource) error
	// GetCredential gets ucp credentials for the given name if provider is supported.
	GetCredential(ctx context.Context, planeType string, planeName string, name string) (ProviderCredentialConfiguration, error)
	// ListCredential lists ucp credentials configured at the plane scope.
	ListCredential(ctx context.Context, planeType string, planeName string) ([]CloudProviderStatus, error)
	// DeleteCredential deletes ucp credential of the given name if present.
	DeleteCredential(ctx context.Context, planeType string, planeName string, name string) error
}

var _ Interface = (*Impl)(nil)

type Impl struct {
	AzureCredentialClient ucp.AzureCredentialClient
	AWSCredentialClient   ucp.AWSCredentialClient
}

// CreateCredential creates ucp crendential for the supported providers.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a credential resource for a given cloud provider. It takes in a context, a plane type, a plane
//	 name, a name, and a credential resource as parameters. Depending on the plane type, it will either create the 
//	credential resource using the AzureCredentialClient or the AWSCredentialClient. If the plane type is not supported, it 
//	will return an error.
//
// </AiDoc: End of OpenAI comments>
func (impl *Impl) CreateCredential(ctx context.Context, planeType string, planeName string, name string, credential ucp.CredentialResource) error {
	switch planeType {
	case AzurePlaneType:
		// We care about success or failure of creation
		_, err := impl.AzureCredentialClient.CreateOrUpdate(ctx, planeType, planeName, name, credential, nil)
		return err
	case AWSPlaneType:
		// We care about success or failure of creation
		_, err := impl.AWSCredentialClient.CreateOrUpdate(ctx, planeType, planeName, name, credential, nil)
		return err
	default:
		return &ErrUnsupportedCloudProvider{}
	}
}

// GetCredential gets ucp credentials for the given name if provider is supported.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to get the credentials for a given cloud provider. It takes in the context, plane type, plane 
//	name, and name of the credential as parameters. Depending on the plane type, it will either get the credentials from the
//	 AzureCredentialClient or the AWSCredentialClient. It then creates a ProviderCredentialConfiguration object and sets the
//	 name and enabled status of the credential. If the plane type is Azure, it will get the AzureServicePrincipalProperties 
//	and set it in the ProviderCredentialConfiguration object. If the plane type is AWS, it will get the 
//	AWSCredentialProperties and set it in the ProviderCredentialConfiguration object. If the plane type is neither Azure nor
//	 AWS, it will return an error.
//
// </AiDoc: End of OpenAI comments>
func (impl *Impl) GetCredential(ctx context.Context, planeType string, planeName string, name string) (ProviderCredentialConfiguration, error) {
	providerCredentialConfiguration := ProviderCredentialConfiguration{
		CloudProviderStatus: CloudProviderStatus{
			Name:    name,
			Enabled: true,
		},
	}
	switch planeType {
	case AzurePlaneType:
		// We send only the name when getting credentials from backend which we already have access to
		resp, err := impl.AzureCredentialClient.Get(ctx, planeType, planeName, name, nil)
		if err != nil {
			return ProviderCredentialConfiguration{}, err
		}
		azureSPN, ok := resp.CredentialResource.Properties.(*ucp.AzureServicePrincipalProperties)
		if !ok {
			return ProviderCredentialConfiguration{}, &cli.FriendlyError{Message: fmt.Sprintf("Unable to Find Credentials for %s", name)}
		}
		providerCredentialConfiguration.AzureCredentials = azureSPN
		return providerCredentialConfiguration, nil
	case AWSPlaneType:
		// We send only the name when getting credentials from backend which we already have access to
		resp, err := impl.AWSCredentialClient.Get(ctx, planeType, planeName, name, nil)
		if err != nil {
			return ProviderCredentialConfiguration{}, err
		}
		awsIAM, ok := resp.CredentialResource.Properties.(*ucp.AWSCredentialProperties)
		if !ok {
			return ProviderCredentialConfiguration{}, &cli.FriendlyError{Message: fmt.Sprintf("Unable to Find Credentials for %s", name)}
		}
		providerCredentialConfiguration.AWSCredentials = awsIAM
		return providerCredentialConfiguration, err
	default:
		return ProviderCredentialConfiguration{}, &ErrUnsupportedCloudProvider{}
	}
}

// ListCredential lists ucp credentials configured at the plane scope.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function takes in a context, a plane type, and a plane name, and returns a list of CloudProviderStatus objects. 
//	Depending on the plane type, it will either use the AzureCredentialClient or the AWSCredentialClient to list the 
//	credentials associated with the plane name. It then creates a list of CloudProviderStatus objects, each containing the 
//	name of the credential and whether it is enabled or not.
//
// </AiDoc: End of OpenAI comments>
func (impl *Impl) ListCredential(ctx context.Context, planeType string, planeName string) ([]CloudProviderStatus, error) {
	var providerList []*ucp.CredentialResource
	switch planeType {
	case AzurePlaneType:
		resp, err := impl.AzureCredentialClient.List(ctx, planeType, planeName, nil)
		if err != nil {
			return nil, err
		}
		providerList = resp.CredentialResourceList.Value
	case AWSPlaneType:
		resp, err := impl.AWSCredentialClient.List(ctx, planeType, planeName, nil)
		if err != nil {
			return nil, err
		}
		providerList = resp.CredentialResourceList.Value
	default:
		return nil, &ErrUnsupportedCloudProvider{}
	}
	res := make([]CloudProviderStatus, 0)
	for _, provider := range providerList {
		res = append(res, CloudProviderStatus{
			Name:    *provider.Name,
			Enabled: true,
		})
	}
	return res, nil
}

// DeleteCredential deletes ucp credential of the given name if present.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to delete a credential from either an Azure or AWS cloud provider. It takes in a context, plane 
//	type, plane name, and name as parameters. Depending on the plane type, it will either call the AzureCredentialClient or 
//	the AWSCredentialClient to delete the credential. If the plane type is not supported, an error is returned.
//
// </AiDoc: End of OpenAI comments>
func (impl *Impl) DeleteCredential(ctx context.Context, planeType string, planeName string, name string) error {
	switch planeType {
	case AzurePlaneType:
		// We care about success or failure of delete.
		_, err := impl.AzureCredentialClient.Delete(ctx, planeType, planeName, name, nil)
		return err
	case AWSPlaneType:
		// We care about success or failure of delete.
		_, err := impl.AWSCredentialClient.Delete(ctx, planeType, planeName, name, nil)
		return err
	default:
		return &ErrUnsupportedCloudProvider{}
	}
}

// ErrUnsupportedCloudProvider represents error when the cloud provider is not supported by radius.
type ErrUnsupportedCloudProvider struct {
	Message string
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating an error message that will be returned when an unsupported cloud provider is encountered.
//
// </AiDoc: End of OpenAI comments>
func (fe *ErrUnsupportedCloudProvider) Error() string {
	return "unsupported cloud provider"
}

//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is checking if the given error is of type ErrUnsupportedCloudProvider and returning a boolean value 
//	indicating whether it is or not.
//
// </AiDoc: End of OpenAI comments>
func (fe *ErrUnsupportedCloudProvider) Is(target error) bool {
	_, ok := target.(*ErrUnsupportedCloudProvider)
	return ok
}
