// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/credential (interfaces: CredentialManagementClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_credentialmanagementclient.go -package=credential -self_package github.com/radius-project/radius/pkg/cli/credential github.com/radius-project/radius/pkg/cli/credential CredentialManagementClient
//

// Package credential is a generated GoMock package.
package credential

import (
	context "context"
	reflect "reflect"

	v20231001preview "github.com/radius-project/radius/pkg/ucp/api/v20231001preview"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentialManagementClient is a mock of CredentialManagementClient interface.
type MockCredentialManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialManagementClientMockRecorder
}

// MockCredentialManagementClientMockRecorder is the mock recorder for MockCredentialManagementClient.
type MockCredentialManagementClientMockRecorder struct {
	mock *MockCredentialManagementClient
}

// NewMockCredentialManagementClient creates a new mock instance.
func NewMockCredentialManagementClient(ctrl *gomock.Controller) *MockCredentialManagementClient {
	mock := &MockCredentialManagementClient{ctrl: ctrl}
	mock.recorder = &MockCredentialManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialManagementClient) EXPECT() *MockCredentialManagementClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCredentialManagementClient) Delete(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCredentialManagementClientMockRecorder) Delete(arg0, arg1 any) *MockCredentialManagementClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCredentialManagementClient)(nil).Delete), arg0, arg1)
	return &MockCredentialManagementClientDeleteCall{Call: call}
}

// MockCredentialManagementClientDeleteCall wrap *gomock.Call
type MockCredentialManagementClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialManagementClientDeleteCall) Return(arg0 bool, arg1 error) *MockCredentialManagementClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialManagementClientDeleteCall) Do(f func(context.Context, string) (bool, error)) *MockCredentialManagementClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialManagementClientDeleteCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockCredentialManagementClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockCredentialManagementClient) Get(arg0 context.Context, arg1 string) (ProviderCredentialConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(ProviderCredentialConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCredentialManagementClientMockRecorder) Get(arg0, arg1 any) *MockCredentialManagementClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCredentialManagementClient)(nil).Get), arg0, arg1)
	return &MockCredentialManagementClientGetCall{Call: call}
}

// MockCredentialManagementClientGetCall wrap *gomock.Call
type MockCredentialManagementClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialManagementClientGetCall) Return(arg0 ProviderCredentialConfiguration, arg1 error) *MockCredentialManagementClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialManagementClientGetCall) Do(f func(context.Context, string) (ProviderCredentialConfiguration, error)) *MockCredentialManagementClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialManagementClientGetCall) DoAndReturn(f func(context.Context, string) (ProviderCredentialConfiguration, error)) *MockCredentialManagementClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockCredentialManagementClient) List(arg0 context.Context) ([]CloudProviderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]CloudProviderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCredentialManagementClientMockRecorder) List(arg0 any) *MockCredentialManagementClientListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCredentialManagementClient)(nil).List), arg0)
	return &MockCredentialManagementClientListCall{Call: call}
}

// MockCredentialManagementClientListCall wrap *gomock.Call
type MockCredentialManagementClientListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialManagementClientListCall) Return(arg0 []CloudProviderStatus, arg1 error) *MockCredentialManagementClientListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialManagementClientListCall) Do(f func(context.Context) ([]CloudProviderStatus, error)) *MockCredentialManagementClientListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialManagementClientListCall) DoAndReturn(f func(context.Context) ([]CloudProviderStatus, error)) *MockCredentialManagementClientListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutAWS mocks base method.
func (m *MockCredentialManagementClient) PutAWS(arg0 context.Context, arg1 v20231001preview.AwsCredentialResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAWS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAWS indicates an expected call of PutAWS.
func (mr *MockCredentialManagementClientMockRecorder) PutAWS(arg0, arg1 any) *MockCredentialManagementClientPutAWSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAWS", reflect.TypeOf((*MockCredentialManagementClient)(nil).PutAWS), arg0, arg1)
	return &MockCredentialManagementClientPutAWSCall{Call: call}
}

// MockCredentialManagementClientPutAWSCall wrap *gomock.Call
type MockCredentialManagementClientPutAWSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialManagementClientPutAWSCall) Return(arg0 error) *MockCredentialManagementClientPutAWSCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialManagementClientPutAWSCall) Do(f func(context.Context, v20231001preview.AwsCredentialResource) error) *MockCredentialManagementClientPutAWSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialManagementClientPutAWSCall) DoAndReturn(f func(context.Context, v20231001preview.AwsCredentialResource) error) *MockCredentialManagementClientPutAWSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutAzure mocks base method.
func (m *MockCredentialManagementClient) PutAzure(arg0 context.Context, arg1 v20231001preview.AzureCredentialResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAzure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAzure indicates an expected call of PutAzure.
func (mr *MockCredentialManagementClientMockRecorder) PutAzure(arg0, arg1 any) *MockCredentialManagementClientPutAzureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAzure", reflect.TypeOf((*MockCredentialManagementClient)(nil).PutAzure), arg0, arg1)
	return &MockCredentialManagementClientPutAzureCall{Call: call}
}

// MockCredentialManagementClientPutAzureCall wrap *gomock.Call
type MockCredentialManagementClientPutAzureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialManagementClientPutAzureCall) Return(arg0 error) *MockCredentialManagementClientPutAzureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialManagementClientPutAzureCall) Do(f func(context.Context, v20231001preview.AzureCredentialResource) error) *MockCredentialManagementClientPutAzureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialManagementClientPutAzureCall) DoAndReturn(f func(context.Context, v20231001preview.AzureCredentialResource) error) *MockCredentialManagementClientPutAzureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
