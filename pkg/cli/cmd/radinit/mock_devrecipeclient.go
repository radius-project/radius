// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/cmd/radinit (interfaces: DevRecipeClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_devrecipeclient.go -package=radinit -self_package github.com/radius-project/radius/pkg/cli/cmd/radinit github.com/radius-project/radius/pkg/cli/cmd/radinit DevRecipeClient
//

// Package radinit is a generated GoMock package.
package radinit

import (
	context "context"
	reflect "reflect"

	v20231001preview "github.com/radius-project/radius/pkg/corerp/api/v20231001preview"
	gomock "go.uber.org/mock/gomock"
)

// MockDevRecipeClient is a mock of DevRecipeClient interface.
type MockDevRecipeClient struct {
	ctrl     *gomock.Controller
	recorder *MockDevRecipeClientMockRecorder
}

// MockDevRecipeClientMockRecorder is the mock recorder for MockDevRecipeClient.
type MockDevRecipeClientMockRecorder struct {
	mock *MockDevRecipeClient
}

// NewMockDevRecipeClient creates a new mock instance.
func NewMockDevRecipeClient(ctrl *gomock.Controller) *MockDevRecipeClient {
	mock := &MockDevRecipeClient{ctrl: ctrl}
	mock.recorder = &MockDevRecipeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevRecipeClient) EXPECT() *MockDevRecipeClientMockRecorder {
	return m.recorder
}

// GetDevRecipes mocks base method.
func (m *MockDevRecipeClient) GetDevRecipes(arg0 context.Context) (map[string]map[string]v20231001preview.RecipePropertiesClassification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevRecipes", arg0)
	ret0, _ := ret[0].(map[string]map[string]v20231001preview.RecipePropertiesClassification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevRecipes indicates an expected call of GetDevRecipes.
func (mr *MockDevRecipeClientMockRecorder) GetDevRecipes(arg0 any) *MockDevRecipeClientGetDevRecipesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevRecipes", reflect.TypeOf((*MockDevRecipeClient)(nil).GetDevRecipes), arg0)
	return &MockDevRecipeClientGetDevRecipesCall{Call: call}
}

// MockDevRecipeClientGetDevRecipesCall wrap *gomock.Call
type MockDevRecipeClientGetDevRecipesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDevRecipeClientGetDevRecipesCall) Return(arg0 map[string]map[string]v20231001preview.RecipePropertiesClassification, arg1 error) *MockDevRecipeClientGetDevRecipesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDevRecipeClientGetDevRecipesCall) Do(f func(context.Context) (map[string]map[string]v20231001preview.RecipePropertiesClassification, error)) *MockDevRecipeClientGetDevRecipesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDevRecipeClientGetDevRecipesCall) DoAndReturn(f func(context.Context) (map[string]map[string]v20231001preview.RecipePropertiesClassification, error)) *MockDevRecipeClientGetDevRecipesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
