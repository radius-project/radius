// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/clients (interfaces: CloudProviderManagementClient)

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCloudProviderManagementClient is a mock of CloudProviderManagementClient interface.
type MockCloudProviderManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderManagementClientMockRecorder
}

// MockCloudProviderManagementClientMockRecorder is the mock recorder for MockCloudProviderManagementClient.
type MockCloudProviderManagementClientMockRecorder struct {
	mock *MockCloudProviderManagementClient
}

// NewMockCloudProviderManagementClient creates a new mock instance.
func NewMockCloudProviderManagementClient(ctrl *gomock.Controller) *MockCloudProviderManagementClient {
	mock := &MockCloudProviderManagementClient{ctrl: ctrl}
	mock.recorder = &MockCloudProviderManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderManagementClient) EXPECT() *MockCloudProviderManagementClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCloudProviderManagementClient) Delete(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudProviderManagementClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudProviderManagementClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockCloudProviderManagementClient) Get(arg0 context.Context, arg1 string) (CloudProviderResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(CloudProviderResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudProviderManagementClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudProviderManagementClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockCloudProviderManagementClient) List(arg0 context.Context) ([]CloudProviderResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]CloudProviderResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCloudProviderManagementClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudProviderManagementClient)(nil).List), arg0)
}

// Put mocks base method.
func (m *MockCloudProviderManagementClient) Put(arg0 context.Context, arg1 AzureCloudProviderResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCloudProviderManagementClientMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCloudProviderManagementClient)(nil).Put), arg0, arg1)
}
