// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/clients (interfaces: ApplicationsManagementClient)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_applicationsclient.go -package=clients -self_package github.com/radius-project/radius/pkg/cli/clients github.com/radius-project/radius/pkg/cli/clients ApplicationsManagementClient
//

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	generated "github.com/radius-project/radius/pkg/cli/clients_new/generated"
	v20231001preview "github.com/radius-project/radius/pkg/corerp/api/v20231001preview"
	v20231001preview0 "github.com/radius-project/radius/pkg/ucp/api/v20231001preview"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationsManagementClient is a mock of ApplicationsManagementClient interface.
type MockApplicationsManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsManagementClientMockRecorder
}

// MockApplicationsManagementClientMockRecorder is the mock recorder for MockApplicationsManagementClient.
type MockApplicationsManagementClientMockRecorder struct {
	mock *MockApplicationsManagementClient
}

// NewMockApplicationsManagementClient creates a new mock instance.
func NewMockApplicationsManagementClient(ctrl *gomock.Controller) *MockApplicationsManagementClient {
	mock := &MockApplicationsManagementClient{ctrl: ctrl}
	mock.recorder = &MockApplicationsManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationsManagementClient) EXPECT() *MockApplicationsManagementClientMockRecorder {
	return m.recorder
}

// CreateApplicationIfNotFound mocks base method.
func (m *MockApplicationsManagementClient) CreateApplicationIfNotFound(arg0 context.Context, arg1 string, arg2 *v20231001preview.ApplicationResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationIfNotFound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationIfNotFound indicates an expected call of CreateApplicationIfNotFound.
func (mr *MockApplicationsManagementClientMockRecorder) CreateApplicationIfNotFound(arg0, arg1, arg2 any) *MockApplicationsManagementClientCreateApplicationIfNotFoundCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationIfNotFound", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateApplicationIfNotFound), arg0, arg1, arg2)
	return &MockApplicationsManagementClientCreateApplicationIfNotFoundCall{Call: call}
}

// MockApplicationsManagementClientCreateApplicationIfNotFoundCall wrap *gomock.Call
type MockApplicationsManagementClientCreateApplicationIfNotFoundCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateApplicationIfNotFoundCall) Return(arg0 error) *MockApplicationsManagementClientCreateApplicationIfNotFoundCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateApplicationIfNotFoundCall) Do(f func(context.Context, string, *v20231001preview.ApplicationResource) error) *MockApplicationsManagementClientCreateApplicationIfNotFoundCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateApplicationIfNotFoundCall) DoAndReturn(f func(context.Context, string, *v20231001preview.ApplicationResource) error) *MockApplicationsManagementClientCreateApplicationIfNotFoundCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateAPIVersion mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateAPIVersion(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *v20231001preview0.APIVersionResource) (v20231001preview0.APIVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAPIVersion", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(v20231001preview0.APIVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateAPIVersion indicates an expected call of CreateOrUpdateAPIVersion.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateAPIVersion(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAPIVersion", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateAPIVersion), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockApplicationsManagementClientCreateOrUpdateAPIVersionCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateAPIVersionCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateAPIVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall) Return(arg0 v20231001preview0.APIVersionResource, arg1 error) *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall) Do(f func(context.Context, string, string, string, string, *v20231001preview0.APIVersionResource) (v20231001preview0.APIVersionResource, error)) *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall) DoAndReturn(f func(context.Context, string, string, string, string, *v20231001preview0.APIVersionResource) (v20231001preview0.APIVersionResource, error)) *MockApplicationsManagementClientCreateOrUpdateAPIVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateApplication mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateApplication(arg0 context.Context, arg1 string, arg2 *v20231001preview.ApplicationResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateApplication indicates an expected call of CreateOrUpdateApplication.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateApplication(arg0, arg1, arg2 any) *MockApplicationsManagementClientCreateOrUpdateApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateApplication), arg0, arg1, arg2)
	return &MockApplicationsManagementClientCreateOrUpdateApplicationCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateApplicationCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateApplicationCall) Return(arg0 error) *MockApplicationsManagementClientCreateOrUpdateApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateApplicationCall) Do(f func(context.Context, string, *v20231001preview.ApplicationResource) error) *MockApplicationsManagementClientCreateOrUpdateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateApplicationCall) DoAndReturn(f func(context.Context, string, *v20231001preview.ApplicationResource) error) *MockApplicationsManagementClientCreateOrUpdateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateEnvironment mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateEnvironment(arg0 context.Context, arg1 string, arg2 *v20231001preview.EnvironmentResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateEnvironment indicates an expected call of CreateOrUpdateEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateEnvironment(arg0, arg1, arg2 any) *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateEnvironment), arg0, arg1, arg2)
	return &MockApplicationsManagementClientCreateOrUpdateEnvironmentCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateEnvironmentCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall) Return(arg0 error) *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall) Do(f func(context.Context, string, *v20231001preview.EnvironmentResource) error) *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall) DoAndReturn(f func(context.Context, string, *v20231001preview.EnvironmentResource) error) *MockApplicationsManagementClientCreateOrUpdateEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateLocation mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateLocation(arg0 context.Context, arg1, arg2, arg3 string, arg4 *v20231001preview0.LocationResource) (v20231001preview0.LocationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateLocation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(v20231001preview0.LocationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateLocation indicates an expected call of CreateOrUpdateLocation.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateLocation(arg0, arg1, arg2, arg3, arg4 any) *MockApplicationsManagementClientCreateOrUpdateLocationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateLocation", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateLocation), arg0, arg1, arg2, arg3, arg4)
	return &MockApplicationsManagementClientCreateOrUpdateLocationCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateLocationCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateLocationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateLocationCall) Return(arg0 v20231001preview0.LocationResource, arg1 error) *MockApplicationsManagementClientCreateOrUpdateLocationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateLocationCall) Do(f func(context.Context, string, string, string, *v20231001preview0.LocationResource) (v20231001preview0.LocationResource, error)) *MockApplicationsManagementClientCreateOrUpdateLocationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateLocationCall) DoAndReturn(f func(context.Context, string, string, string, *v20231001preview0.LocationResource) (v20231001preview0.LocationResource, error)) *MockApplicationsManagementClientCreateOrUpdateLocationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateResource mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateResource(arg0 context.Context, arg1, arg2 string, arg3 *generated.GenericResource) (generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateResource indicates an expected call of CreateOrUpdateResource.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateResource(arg0, arg1, arg2, arg3 any) *MockApplicationsManagementClientCreateOrUpdateResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResource", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateResource), arg0, arg1, arg2, arg3)
	return &MockApplicationsManagementClientCreateOrUpdateResourceCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateResourceCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateResourceCall) Return(arg0 generated.GenericResource, arg1 error) *MockApplicationsManagementClientCreateOrUpdateResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateResourceCall) Do(f func(context.Context, string, string, *generated.GenericResource) (generated.GenericResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateResourceCall) DoAndReturn(f func(context.Context, string, string, *generated.GenericResource) (generated.GenericResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateResourceGroup mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateResourceGroup(arg0 context.Context, arg1, arg2 string, arg3 *v20231001preview0.ResourceGroupResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResourceGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateResourceGroup indicates an expected call of CreateOrUpdateResourceGroup.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateResourceGroup(arg0, arg1, arg2, arg3 any) *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResourceGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateResourceGroup), arg0, arg1, arg2, arg3)
	return &MockApplicationsManagementClientCreateOrUpdateResourceGroupCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateResourceGroupCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateResourceGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall) Return(arg0 error) *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceGroupResource) error) *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceGroupResource) error) *MockApplicationsManagementClientCreateOrUpdateResourceGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateResourceProvider mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateResourceProvider(arg0 context.Context, arg1, arg2 string, arg3 *v20231001preview0.ResourceProviderResource) (v20231001preview0.ResourceProviderResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResourceProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v20231001preview0.ResourceProviderResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateResourceProvider indicates an expected call of CreateOrUpdateResourceProvider.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateResourceProvider(arg0, arg1, arg2, arg3 any) *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResourceProvider", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateResourceProvider), arg0, arg1, arg2, arg3)
	return &MockApplicationsManagementClientCreateOrUpdateResourceProviderCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateResourceProviderCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateResourceProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall) Return(arg0 v20231001preview0.ResourceProviderResource, arg1 error) *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceProviderResource) (v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceProviderResource) (v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateOrUpdateResourceType mocks base method.
func (m *MockApplicationsManagementClient) CreateOrUpdateResourceType(arg0 context.Context, arg1, arg2, arg3 string, arg4 *v20231001preview0.ResourceTypeResource) (v20231001preview0.ResourceTypeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResourceType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(v20231001preview0.ResourceTypeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateResourceType indicates an expected call of CreateOrUpdateResourceType.
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateResourceType(arg0, arg1, arg2, arg3, arg4 any) *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResourceType", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateResourceType), arg0, arg1, arg2, arg3, arg4)
	return &MockApplicationsManagementClientCreateOrUpdateResourceTypeCall{Call: call}
}

// MockApplicationsManagementClientCreateOrUpdateResourceTypeCall wrap *gomock.Call
type MockApplicationsManagementClientCreateOrUpdateResourceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall) Return(arg0 v20231001preview0.ResourceTypeResource, arg1 error) *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall) Do(f func(context.Context, string, string, string, *v20231001preview0.ResourceTypeResource) (v20231001preview0.ResourceTypeResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall) DoAndReturn(f func(context.Context, string, string, string, *v20231001preview0.ResourceTypeResource) (v20231001preview0.ResourceTypeResource, error)) *MockApplicationsManagementClientCreateOrUpdateResourceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApplication mocks base method.
func (m *MockApplicationsManagementClient) DeleteApplication(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteApplication(arg0, arg1 any) *MockApplicationsManagementClientDeleteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteApplication), arg0, arg1)
	return &MockApplicationsManagementClientDeleteApplicationCall{Call: call}
}

// MockApplicationsManagementClientDeleteApplicationCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteApplicationCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteApplicationCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationsManagementClientDeleteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteApplicationCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationsManagementClientDeleteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEnvironment mocks base method.
func (m *MockApplicationsManagementClient) DeleteEnvironment(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteEnvironment(arg0, arg1 any) *MockApplicationsManagementClientDeleteEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteEnvironment), arg0, arg1)
	return &MockApplicationsManagementClientDeleteEnvironmentCall{Call: call}
}

// MockApplicationsManagementClientDeleteEnvironmentCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteEnvironmentCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteEnvironmentCall) Do(f func(context.Context, string) (bool, error)) *MockApplicationsManagementClientDeleteEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteEnvironmentCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockApplicationsManagementClientDeleteEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResource mocks base method.
func (m *MockApplicationsManagementClient) DeleteResource(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteResource(arg0, arg1, arg2 any) *MockApplicationsManagementClientDeleteResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteResource), arg0, arg1, arg2)
	return &MockApplicationsManagementClientDeleteResourceCall{Call: call}
}

// MockApplicationsManagementClientDeleteResourceCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteResourceCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteResourceCall) Do(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteResourceCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResourceGroup mocks base method.
func (m *MockApplicationsManagementClient) DeleteResourceGroup(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceGroup indicates an expected call of DeleteResourceGroup.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteResourceGroup(arg0, arg1, arg2 any) *MockApplicationsManagementClientDeleteResourceGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteResourceGroup), arg0, arg1, arg2)
	return &MockApplicationsManagementClientDeleteResourceGroupCall{Call: call}
}

// MockApplicationsManagementClientDeleteResourceGroupCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteResourceGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteResourceGroupCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteResourceGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteResourceGroupCall) Do(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteResourceGroupCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResourceProvider mocks base method.
func (m *MockApplicationsManagementClient) DeleteResourceProvider(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceProvider indicates an expected call of DeleteResourceProvider.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteResourceProvider(arg0, arg1, arg2 any) *MockApplicationsManagementClientDeleteResourceProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceProvider", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteResourceProvider), arg0, arg1, arg2)
	return &MockApplicationsManagementClientDeleteResourceProviderCall{Call: call}
}

// MockApplicationsManagementClientDeleteResourceProviderCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteResourceProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteResourceProviderCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteResourceProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteResourceProviderCall) Do(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteResourceProviderCall) DoAndReturn(f func(context.Context, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResourceType mocks base method.
func (m *MockApplicationsManagementClient) DeleteResourceType(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceType indicates an expected call of DeleteResourceType.
func (mr *MockApplicationsManagementClientMockRecorder) DeleteResourceType(arg0, arg1, arg2, arg3 any) *MockApplicationsManagementClientDeleteResourceTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceType", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteResourceType), arg0, arg1, arg2, arg3)
	return &MockApplicationsManagementClientDeleteResourceTypeCall{Call: call}
}

// MockApplicationsManagementClientDeleteResourceTypeCall wrap *gomock.Call
type MockApplicationsManagementClientDeleteResourceTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientDeleteResourceTypeCall) Return(arg0 bool, arg1 error) *MockApplicationsManagementClientDeleteResourceTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientDeleteResourceTypeCall) Do(f func(context.Context, string, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientDeleteResourceTypeCall) DoAndReturn(f func(context.Context, string, string, string) (bool, error)) *MockApplicationsManagementClientDeleteResourceTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplication mocks base method.
func (m *MockApplicationsManagementClient) GetApplication(arg0 context.Context, arg1 string) (v20231001preview.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1)
	ret0, _ := ret[0].(v20231001preview.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockApplicationsManagementClientMockRecorder) GetApplication(arg0, arg1 any) *MockApplicationsManagementClientGetApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetApplication), arg0, arg1)
	return &MockApplicationsManagementClientGetApplicationCall{Call: call}
}

// MockApplicationsManagementClientGetApplicationCall wrap *gomock.Call
type MockApplicationsManagementClientGetApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetApplicationCall) Return(arg0 v20231001preview.ApplicationResource, arg1 error) *MockApplicationsManagementClientGetApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetApplicationCall) Do(f func(context.Context, string) (v20231001preview.ApplicationResource, error)) *MockApplicationsManagementClientGetApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetApplicationCall) DoAndReturn(f func(context.Context, string) (v20231001preview.ApplicationResource, error)) *MockApplicationsManagementClientGetApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationGraph mocks base method.
func (m *MockApplicationsManagementClient) GetApplicationGraph(arg0 context.Context, arg1 string) (v20231001preview.ApplicationGraphResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationGraph", arg0, arg1)
	ret0, _ := ret[0].(v20231001preview.ApplicationGraphResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationGraph indicates an expected call of GetApplicationGraph.
func (mr *MockApplicationsManagementClientMockRecorder) GetApplicationGraph(arg0, arg1 any) *MockApplicationsManagementClientGetApplicationGraphCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationGraph", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetApplicationGraph), arg0, arg1)
	return &MockApplicationsManagementClientGetApplicationGraphCall{Call: call}
}

// MockApplicationsManagementClientGetApplicationGraphCall wrap *gomock.Call
type MockApplicationsManagementClientGetApplicationGraphCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetApplicationGraphCall) Return(arg0 v20231001preview.ApplicationGraphResponse, arg1 error) *MockApplicationsManagementClientGetApplicationGraphCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetApplicationGraphCall) Do(f func(context.Context, string) (v20231001preview.ApplicationGraphResponse, error)) *MockApplicationsManagementClientGetApplicationGraphCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetApplicationGraphCall) DoAndReturn(f func(context.Context, string) (v20231001preview.ApplicationGraphResponse, error)) *MockApplicationsManagementClientGetApplicationGraphCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEnvironment mocks base method.
func (m *MockApplicationsManagementClient) GetEnvironment(arg0 context.Context, arg1 string) (v20231001preview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(v20231001preview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) GetEnvironment(arg0, arg1 any) *MockApplicationsManagementClientGetEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetEnvironment), arg0, arg1)
	return &MockApplicationsManagementClientGetEnvironmentCall{Call: call}
}

// MockApplicationsManagementClientGetEnvironmentCall wrap *gomock.Call
type MockApplicationsManagementClientGetEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetEnvironmentCall) Return(arg0 v20231001preview.EnvironmentResource, arg1 error) *MockApplicationsManagementClientGetEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetEnvironmentCall) Do(f func(context.Context, string) (v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientGetEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetEnvironmentCall) DoAndReturn(f func(context.Context, string) (v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientGetEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecipeMetadata mocks base method.
func (m *MockApplicationsManagementClient) GetRecipeMetadata(arg0 context.Context, arg1 string, arg2 v20231001preview.RecipeGetMetadata) (v20231001preview.RecipeGetMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(v20231001preview.RecipeGetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeMetadata indicates an expected call of GetRecipeMetadata.
func (mr *MockApplicationsManagementClientMockRecorder) GetRecipeMetadata(arg0, arg1, arg2 any) *MockApplicationsManagementClientGetRecipeMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeMetadata", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetRecipeMetadata), arg0, arg1, arg2)
	return &MockApplicationsManagementClientGetRecipeMetadataCall{Call: call}
}

// MockApplicationsManagementClientGetRecipeMetadataCall wrap *gomock.Call
type MockApplicationsManagementClientGetRecipeMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetRecipeMetadataCall) Return(arg0 v20231001preview.RecipeGetMetadataResponse, arg1 error) *MockApplicationsManagementClientGetRecipeMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetRecipeMetadataCall) Do(f func(context.Context, string, v20231001preview.RecipeGetMetadata) (v20231001preview.RecipeGetMetadataResponse, error)) *MockApplicationsManagementClientGetRecipeMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetRecipeMetadataCall) DoAndReturn(f func(context.Context, string, v20231001preview.RecipeGetMetadata) (v20231001preview.RecipeGetMetadataResponse, error)) *MockApplicationsManagementClientGetRecipeMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResource mocks base method.
func (m *MockApplicationsManagementClient) GetResource(arg0 context.Context, arg1, arg2 string) (generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockApplicationsManagementClientMockRecorder) GetResource(arg0, arg1, arg2 any) *MockApplicationsManagementClientGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetResource), arg0, arg1, arg2)
	return &MockApplicationsManagementClientGetResourceCall{Call: call}
}

// MockApplicationsManagementClientGetResourceCall wrap *gomock.Call
type MockApplicationsManagementClientGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetResourceCall) Return(arg0 generated.GenericResource, arg1 error) *MockApplicationsManagementClientGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetResourceCall) Do(f func(context.Context, string, string) (generated.GenericResource, error)) *MockApplicationsManagementClientGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetResourceCall) DoAndReturn(f func(context.Context, string, string) (generated.GenericResource, error)) *MockApplicationsManagementClientGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceGroup mocks base method.
func (m *MockApplicationsManagementClient) GetResourceGroup(arg0 context.Context, arg1, arg2 string) (v20231001preview0.ResourceGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(v20231001preview0.ResourceGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroup indicates an expected call of GetResourceGroup.
func (mr *MockApplicationsManagementClientMockRecorder) GetResourceGroup(arg0, arg1, arg2 any) *MockApplicationsManagementClientGetResourceGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetResourceGroup), arg0, arg1, arg2)
	return &MockApplicationsManagementClientGetResourceGroupCall{Call: call}
}

// MockApplicationsManagementClientGetResourceGroupCall wrap *gomock.Call
type MockApplicationsManagementClientGetResourceGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetResourceGroupCall) Return(arg0 v20231001preview0.ResourceGroupResource, arg1 error) *MockApplicationsManagementClientGetResourceGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetResourceGroupCall) Do(f func(context.Context, string, string) (v20231001preview0.ResourceGroupResource, error)) *MockApplicationsManagementClientGetResourceGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetResourceGroupCall) DoAndReturn(f func(context.Context, string, string) (v20231001preview0.ResourceGroupResource, error)) *MockApplicationsManagementClientGetResourceGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceProvider mocks base method.
func (m *MockApplicationsManagementClient) GetResourceProvider(arg0 context.Context, arg1, arg2 string) (v20231001preview0.ResourceProviderResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceProvider", arg0, arg1, arg2)
	ret0, _ := ret[0].(v20231001preview0.ResourceProviderResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceProvider indicates an expected call of GetResourceProvider.
func (mr *MockApplicationsManagementClientMockRecorder) GetResourceProvider(arg0, arg1, arg2 any) *MockApplicationsManagementClientGetResourceProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceProvider", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetResourceProvider), arg0, arg1, arg2)
	return &MockApplicationsManagementClientGetResourceProviderCall{Call: call}
}

// MockApplicationsManagementClientGetResourceProviderCall wrap *gomock.Call
type MockApplicationsManagementClientGetResourceProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetResourceProviderCall) Return(arg0 v20231001preview0.ResourceProviderResource, arg1 error) *MockApplicationsManagementClientGetResourceProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetResourceProviderCall) Do(f func(context.Context, string, string) (v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientGetResourceProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetResourceProviderCall) DoAndReturn(f func(context.Context, string, string) (v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientGetResourceProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceProviderSummary mocks base method.
func (m *MockApplicationsManagementClient) GetResourceProviderSummary(arg0 context.Context, arg1, arg2 string) (v20231001preview0.ResourceProviderSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceProviderSummary", arg0, arg1, arg2)
	ret0, _ := ret[0].(v20231001preview0.ResourceProviderSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceProviderSummary indicates an expected call of GetResourceProviderSummary.
func (mr *MockApplicationsManagementClientMockRecorder) GetResourceProviderSummary(arg0, arg1, arg2 any) *MockApplicationsManagementClientGetResourceProviderSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceProviderSummary", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetResourceProviderSummary), arg0, arg1, arg2)
	return &MockApplicationsManagementClientGetResourceProviderSummaryCall{Call: call}
}

// MockApplicationsManagementClientGetResourceProviderSummaryCall wrap *gomock.Call
type MockApplicationsManagementClientGetResourceProviderSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientGetResourceProviderSummaryCall) Return(arg0 v20231001preview0.ResourceProviderSummary, arg1 error) *MockApplicationsManagementClientGetResourceProviderSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientGetResourceProviderSummaryCall) Do(f func(context.Context, string, string) (v20231001preview0.ResourceProviderSummary, error)) *MockApplicationsManagementClientGetResourceProviderSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientGetResourceProviderSummaryCall) DoAndReturn(f func(context.Context, string, string) (v20231001preview0.ResourceProviderSummary, error)) *MockApplicationsManagementClientGetResourceProviderSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListApplications mocks base method.
func (m *MockApplicationsManagementClient) ListApplications(arg0 context.Context) ([]v20231001preview.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].([]v20231001preview.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockApplicationsManagementClientMockRecorder) ListApplications(arg0 any) *MockApplicationsManagementClientListApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListApplications), arg0)
	return &MockApplicationsManagementClientListApplicationsCall{Call: call}
}

// MockApplicationsManagementClientListApplicationsCall wrap *gomock.Call
type MockApplicationsManagementClientListApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListApplicationsCall) Return(arg0 []v20231001preview.ApplicationResource, arg1 error) *MockApplicationsManagementClientListApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListApplicationsCall) Do(f func(context.Context) ([]v20231001preview.ApplicationResource, error)) *MockApplicationsManagementClientListApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListApplicationsCall) DoAndReturn(f func(context.Context) ([]v20231001preview.ApplicationResource, error)) *MockApplicationsManagementClientListApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEnvironments mocks base method.
func (m *MockApplicationsManagementClient) ListEnvironments(arg0 context.Context) ([]v20231001preview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].([]v20231001preview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockApplicationsManagementClientMockRecorder) ListEnvironments(arg0 any) *MockApplicationsManagementClientListEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListEnvironments), arg0)
	return &MockApplicationsManagementClientListEnvironmentsCall{Call: call}
}

// MockApplicationsManagementClientListEnvironmentsCall wrap *gomock.Call
type MockApplicationsManagementClientListEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListEnvironmentsCall) Return(arg0 []v20231001preview.EnvironmentResource, arg1 error) *MockApplicationsManagementClientListEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListEnvironmentsCall) Do(f func(context.Context) ([]v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientListEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListEnvironmentsCall) DoAndReturn(f func(context.Context) ([]v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientListEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEnvironmentsAll mocks base method.
func (m *MockApplicationsManagementClient) ListEnvironmentsAll(arg0 context.Context) ([]v20231001preview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsAll", arg0)
	ret0, _ := ret[0].([]v20231001preview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsAll indicates an expected call of ListEnvironmentsAll.
func (mr *MockApplicationsManagementClientMockRecorder) ListEnvironmentsAll(arg0 any) *MockApplicationsManagementClientListEnvironmentsAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsAll", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListEnvironmentsAll), arg0)
	return &MockApplicationsManagementClientListEnvironmentsAllCall{Call: call}
}

// MockApplicationsManagementClientListEnvironmentsAllCall wrap *gomock.Call
type MockApplicationsManagementClientListEnvironmentsAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListEnvironmentsAllCall) Return(arg0 []v20231001preview.EnvironmentResource, arg1 error) *MockApplicationsManagementClientListEnvironmentsAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListEnvironmentsAllCall) Do(f func(context.Context) ([]v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientListEnvironmentsAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListEnvironmentsAllCall) DoAndReturn(f func(context.Context) ([]v20231001preview.EnvironmentResource, error)) *MockApplicationsManagementClientListEnvironmentsAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceGroups mocks base method.
func (m *MockApplicationsManagementClient) ListResourceGroups(arg0 context.Context, arg1 string) ([]v20231001preview0.ResourceGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceGroups", arg0, arg1)
	ret0, _ := ret[0].([]v20231001preview0.ResourceGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceGroups indicates an expected call of ListResourceGroups.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourceGroups(arg0, arg1 any) *MockApplicationsManagementClientListResourceGroupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceGroups", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourceGroups), arg0, arg1)
	return &MockApplicationsManagementClientListResourceGroupsCall{Call: call}
}

// MockApplicationsManagementClientListResourceGroupsCall wrap *gomock.Call
type MockApplicationsManagementClientListResourceGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourceGroupsCall) Return(arg0 []v20231001preview0.ResourceGroupResource, arg1 error) *MockApplicationsManagementClientListResourceGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourceGroupsCall) Do(f func(context.Context, string) ([]v20231001preview0.ResourceGroupResource, error)) *MockApplicationsManagementClientListResourceGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourceGroupsCall) DoAndReturn(f func(context.Context, string) ([]v20231001preview0.ResourceGroupResource, error)) *MockApplicationsManagementClientListResourceGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceProviderSummaries mocks base method.
func (m *MockApplicationsManagementClient) ListResourceProviderSummaries(arg0 context.Context, arg1 string) ([]v20231001preview0.ResourceProviderSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceProviderSummaries", arg0, arg1)
	ret0, _ := ret[0].([]v20231001preview0.ResourceProviderSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceProviderSummaries indicates an expected call of ListResourceProviderSummaries.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourceProviderSummaries(arg0, arg1 any) *MockApplicationsManagementClientListResourceProviderSummariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceProviderSummaries", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourceProviderSummaries), arg0, arg1)
	return &MockApplicationsManagementClientListResourceProviderSummariesCall{Call: call}
}

// MockApplicationsManagementClientListResourceProviderSummariesCall wrap *gomock.Call
type MockApplicationsManagementClientListResourceProviderSummariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourceProviderSummariesCall) Return(arg0 []v20231001preview0.ResourceProviderSummary, arg1 error) *MockApplicationsManagementClientListResourceProviderSummariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourceProviderSummariesCall) Do(f func(context.Context, string) ([]v20231001preview0.ResourceProviderSummary, error)) *MockApplicationsManagementClientListResourceProviderSummariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourceProviderSummariesCall) DoAndReturn(f func(context.Context, string) ([]v20231001preview0.ResourceProviderSummary, error)) *MockApplicationsManagementClientListResourceProviderSummariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceProviders mocks base method.
func (m *MockApplicationsManagementClient) ListResourceProviders(arg0 context.Context, arg1 string) ([]v20231001preview0.ResourceProviderResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceProviders", arg0, arg1)
	ret0, _ := ret[0].([]v20231001preview0.ResourceProviderResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceProviders indicates an expected call of ListResourceProviders.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourceProviders(arg0, arg1 any) *MockApplicationsManagementClientListResourceProvidersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceProviders", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourceProviders), arg0, arg1)
	return &MockApplicationsManagementClientListResourceProvidersCall{Call: call}
}

// MockApplicationsManagementClientListResourceProvidersCall wrap *gomock.Call
type MockApplicationsManagementClientListResourceProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourceProvidersCall) Return(arg0 []v20231001preview0.ResourceProviderResource, arg1 error) *MockApplicationsManagementClientListResourceProvidersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourceProvidersCall) Do(f func(context.Context, string) ([]v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientListResourceProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourceProvidersCall) DoAndReturn(f func(context.Context, string) ([]v20231001preview0.ResourceProviderResource, error)) *MockApplicationsManagementClientListResourceProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourcesInApplication mocks base method.
func (m *MockApplicationsManagementClient) ListResourcesInApplication(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesInApplication", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesInApplication indicates an expected call of ListResourcesInApplication.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourcesInApplication(arg0, arg1 any) *MockApplicationsManagementClientListResourcesInApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesInApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourcesInApplication), arg0, arg1)
	return &MockApplicationsManagementClientListResourcesInApplicationCall{Call: call}
}

// MockApplicationsManagementClientListResourcesInApplicationCall wrap *gomock.Call
type MockApplicationsManagementClientListResourcesInApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourcesInApplicationCall) Return(arg0 []generated.GenericResource, arg1 error) *MockApplicationsManagementClientListResourcesInApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourcesInApplicationCall) Do(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesInApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourcesInApplicationCall) DoAndReturn(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesInApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourcesInEnvironment mocks base method.
func (m *MockApplicationsManagementClient) ListResourcesInEnvironment(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesInEnvironment", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesInEnvironment indicates an expected call of ListResourcesInEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourcesInEnvironment(arg0, arg1 any) *MockApplicationsManagementClientListResourcesInEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesInEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourcesInEnvironment), arg0, arg1)
	return &MockApplicationsManagementClientListResourcesInEnvironmentCall{Call: call}
}

// MockApplicationsManagementClientListResourcesInEnvironmentCall wrap *gomock.Call
type MockApplicationsManagementClientListResourcesInEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourcesInEnvironmentCall) Return(arg0 []generated.GenericResource, arg1 error) *MockApplicationsManagementClientListResourcesInEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourcesInEnvironmentCall) Do(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesInEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourcesInEnvironmentCall) DoAndReturn(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesInEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourcesOfType mocks base method.
func (m *MockApplicationsManagementClient) ListResourcesOfType(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesOfType", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesOfType indicates an expected call of ListResourcesOfType.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourcesOfType(arg0, arg1 any) *MockApplicationsManagementClientListResourcesOfTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesOfType", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourcesOfType), arg0, arg1)
	return &MockApplicationsManagementClientListResourcesOfTypeCall{Call: call}
}

// MockApplicationsManagementClientListResourcesOfTypeCall wrap *gomock.Call
type MockApplicationsManagementClientListResourcesOfTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourcesOfTypeCall) Return(arg0 []generated.GenericResource, arg1 error) *MockApplicationsManagementClientListResourcesOfTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourcesOfTypeCall) Do(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourcesOfTypeCall) DoAndReturn(f func(context.Context, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourcesOfTypeInApplication mocks base method.
func (m *MockApplicationsManagementClient) ListResourcesOfTypeInApplication(arg0 context.Context, arg1, arg2 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesOfTypeInApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesOfTypeInApplication indicates an expected call of ListResourcesOfTypeInApplication.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourcesOfTypeInApplication(arg0, arg1, arg2 any) *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesOfTypeInApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourcesOfTypeInApplication), arg0, arg1, arg2)
	return &MockApplicationsManagementClientListResourcesOfTypeInApplicationCall{Call: call}
}

// MockApplicationsManagementClientListResourcesOfTypeInApplicationCall wrap *gomock.Call
type MockApplicationsManagementClientListResourcesOfTypeInApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall) Return(arg0 []generated.GenericResource, arg1 error) *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall) Do(f func(context.Context, string, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall) DoAndReturn(f func(context.Context, string, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeInApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourcesOfTypeInEnvironment mocks base method.
func (m *MockApplicationsManagementClient) ListResourcesOfTypeInEnvironment(arg0 context.Context, arg1, arg2 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesOfTypeInEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesOfTypeInEnvironment indicates an expected call of ListResourcesOfTypeInEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) ListResourcesOfTypeInEnvironment(arg0, arg1, arg2 any) *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesOfTypeInEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListResourcesOfTypeInEnvironment), arg0, arg1, arg2)
	return &MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall{Call: call}
}

// MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall wrap *gomock.Call
type MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall) Return(arg0 []generated.GenericResource, arg1 error) *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall) Do(f func(context.Context, string, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall) DoAndReturn(f func(context.Context, string, string) ([]generated.GenericResource, error)) *MockApplicationsManagementClientListResourcesOfTypeInEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
