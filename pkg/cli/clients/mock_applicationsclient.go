// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/cli/clients (interfaces: ApplicationsManagementClient)

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	generated "github.com/project-radius/radius/pkg/cli/clients_new/generated"
	v20220315privatepreview "github.com/project-radius/radius/pkg/corerp/api/v20220315privatepreview"
	v20220901privatepreview "github.com/project-radius/radius/pkg/ucp/api/v20220901privatepreview"
)

// MockApplicationsManagementClient is a mock of ApplicationsManagementClient interface.
type MockApplicationsManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsManagementClientMockRecorder
}

// MockApplicationsManagementClientMockRecorder is the mock recorder for MockApplicationsManagementClient.
type MockApplicationsManagementClientMockRecorder struct {
	mock *MockApplicationsManagementClient
}

// NewMockApplicationsManagementClient creates a new mock instance.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new MockApplicationsManagementClient object, which is used to mock the 
//	ApplicationsManagementClient. It also creates a MockApplicationsManagementClientMockRecorder object, which is used to 
//	record the interactions with the mock.
//
// </AiDoc: End of OpenAI comments>
func NewMockApplicationsManagementClient(ctrl *gomock.Controller) *MockApplicationsManagementClient {
	mock := &MockApplicationsManagementClient{ctrl: ctrl}
	mock.recorder = &MockApplicationsManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	The EXPECT() function returns a MockApplicationsManagementClientMockRecorder object which is used to record expectations
//	 for the MockApplicationsManagementClient.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) EXPECT() *MockApplicationsManagementClientMockRecorder {
	return m.recorder
}

// CreateApplicationIfNotFound mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates an application if it does not already exist. It takes in three arguments: a context, a string, and
//	 an ApplicationResource. It returns an error if the application could not be created.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) CreateApplicationIfNotFound(arg0 context.Context, arg1 string, arg2 v20220315privatepreview.ApplicationResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationIfNotFound", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationIfNotFound indicates an expected call of CreateApplicationIfNotFound.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating an application if it is not found. It takes three arguments and records the call with the 
//	method type.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) CreateApplicationIfNotFound(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationIfNotFound", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateApplicationIfNotFound), arg0, arg1, arg2)
}

// CreateEnvironment mocks base method.
func (m *MockApplicationsManagementClient) CreateEnvironment(arg0 context.Context, arg1, arg2 string, arg3 *v20220315privatepreview.EnvironmentProperties) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockApplicationsManagementClientMockRecorder) CreateEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateEnvironment), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateApplication mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating or updating an application in the ApplicationsManagementClient. It takes in a context, a 
//	string, and an ApplicationResource as parameters. It then returns an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) CreateOrUpdateApplication(arg0 context.Context, arg1 string, arg2 v20220315privatepreview.ApplicationResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateApplication indicates an expected call of CreateOrUpdateApplication.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a record of a call to the CreateOrUpdateApplication function of the 
//	MockApplicationsManagementClient. It takes three arguments and records the call with the given arguments.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) CreateOrUpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateOrUpdateApplication), arg0, arg1, arg2)
}

// CreateUCPGroup mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function creates a new user-defined resource group in the specified subscription. It takes in a context, 
//	subscription ID, resource group name, location, and a ResourceGroupResource object as parameters and returns a boolean 
//	value and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) CreateUCPGroup(arg0 context.Context, arg1, arg2, arg3 string, arg4 v20220901privatepreview.ResourceGroupResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUCPGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUCPGroup indicates an expected call of CreateUCPGroup.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is creating a mock record for the CreateUCPGroup function in the 
//	MockApplicationsManagementClientMockRecorder. This function takes in 5 arguments and records the call with the given 
//	arguments.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) CreateUCPGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUCPGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).CreateUCPGroup), arg0, arg1, arg2, arg3, arg4)
}

// DeleteApplication mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is deleting an application with a given context and name. It returns a boolean value indicating whether 
//	the application was successfully deleted and an error if one occurred.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) DeleteApplication(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the DeleteApplication method of the MockApplicationsManagementClient. It takes
//	 two arguments and returns a gomock.Call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteApplication), arg0, arg1)
}

// DeleteEnv mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is deleting an environment from the ApplicationsManagementClient. It takes in two arguments, a context and
//	 a string, and returns a boolean and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) DeleteEnv(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnv", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnv indicates an expected call of DeleteEnv.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the DeleteEnv function of the MockApplicationsManagementClient. It takes two 
//	arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) DeleteEnv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnv", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteEnv), arg0, arg1)
}

// DeleteResource mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is deleting a resource from the ApplicationsManagementClient. It takes in a context, a string for the 
//	first argument, and a string for the second argument. It returns a boolean and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) DeleteResource(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the DeleteResource method of the MockApplicationsManagementClient. It takes 
//	three parameters and records the call with the given parameters.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) DeleteResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteResource), arg0, arg1, arg2)
}

// DeleteUCPGroup mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is deleting a Unified Communications Platform (UCP) group from a given context, given the name of the 
//	group, the name of the application, and the name of the resource group. It returns a boolean value indicating whether 
//	the group was successfully deleted, and an error if one occurred.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) DeleteUCPGroup(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUCPGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUCPGroup indicates an expected call of DeleteUCPGroup.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to delete a UCP group from the Applications Management Client. It takes four parameters as input 
//	and records the call with the given parameters.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) DeleteUCPGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUCPGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).DeleteUCPGroup), arg0, arg1, arg2, arg3)
}

// GetEnvDetails mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to get the details of an environment, given a context and the environment's name. It returns an 
//	EnvironmentResource and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) GetEnvDetails(arg0 context.Context, arg1 string) (v20220315privatepreview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvDetails", arg0, arg1)
	ret0, _ := ret[0].(v20220315privatepreview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvDetails indicates an expected call of GetEnvDetails.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the GetEnvDetails function of the MockApplicationsManagementClient. It takes 
//	two arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) GetEnvDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvDetails", reflect.TypeOf((*MockApplicationsManagementClient)(nil).GetEnvDetails), arg0, arg1)
}

// ListAllResourcesByApplication mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all resources associated with a given application. It takes in two parameters, a context 
//	and a string representing the application, and returns a list of GenericResource objects and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListAllResourcesByApplication(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResourcesByApplication", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResourcesByApplication indicates an expected call of ListAllResourcesByApplication.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListAllResourcesByApplication function of the 
//	MockApplicationsManagementClient. It takes two arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListAllResourcesByApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResourcesByApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListAllResourcesByApplication), arg0, arg1)
}

// ListAllResourcesByEnvironment mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all resources associated with a given environment. It takes in two parameters, a context 
//	and a string representing the environment, and returns a list of GenericResource objects and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListAllResourcesByEnvironment(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResourcesByEnvironment", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResourcesByEnvironment indicates an expected call of ListAllResourcesByEnvironment.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListAllResourcesByEnvironment function of the 
//	MockApplicationsManagementClient. It takes two arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListAllResourcesByEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResourcesByEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListAllResourcesByEnvironment), arg0, arg1)
}

// ListAllResourcesByType mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all resources of a given type. It takes in two parameters, a context and a string 
//	representing the type of resource, and returns a list of GenericResource objects and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListAllResourcesByType(arg0 context.Context, arg1 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResourcesByType", arg0, arg1)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResourcesByType indicates an expected call of ListAllResourcesByType.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListAllResourcesByType method of the MockApplicationsManagementClient 
//	object, with the given arguments.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListAllResourcesByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResourcesByType", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListAllResourcesByType), arg0, arg1)
}

// ListAllResourcesOfTypeInApplication mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all resources of a given type in a given application. It takes in a context, a type and an
//	 application as parameters and returns a list of generic resources and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListAllResourcesOfTypeInApplication(arg0 context.Context, arg1, arg2 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResourcesOfTypeInApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResourcesOfTypeInApplication indicates an expected call of ListAllResourcesOfTypeInApplication.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListAllResourcesOfTypeInApplication function of the 
//	MockApplicationsManagementClient. It takes three arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListAllResourcesOfTypeInApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResourcesOfTypeInApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListAllResourcesOfTypeInApplication), arg0, arg1, arg2)
}

// ListAllResourcesOfTypeInEnvironment mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all resources of a given type in a given environment. It takes in a context, a type and an
//	 environment as parameters and returns a list of GenericResources and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListAllResourcesOfTypeInEnvironment(arg0 context.Context, arg1, arg2 string) ([]generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllResourcesOfTypeInEnvironment", arg0, arg1, arg2)
	ret0, _ := ret[0].([]generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllResourcesOfTypeInEnvironment indicates an expected call of ListAllResourcesOfTypeInEnvironment.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListAllResourcesOfTypeInEnvironment function of the 
//	MockApplicationsManagementClient. It takes in three arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListAllResourcesOfTypeInEnvironment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllResourcesOfTypeInEnvironment", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListAllResourcesOfTypeInEnvironment), arg0, arg1, arg2)
}

// ListApplications mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all applications in a given context. It returns a list of ApplicationResource objects and 
//	an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListApplications(arg0 context.Context) ([]v20220315privatepreview.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].([]v20220315privatepreview.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListApplications method of the MockApplicationsManagementClient object. It
//	 takes in an argument of type interface{} and returns a gomock.Call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListApplications), arg0)
}

// ListEnvironmentsAll mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list all the environment resources from the Applications Management Client. It takes in a 
//	context as an argument and returns a list of EnvironmentResource objects and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListEnvironmentsAll(arg0 context.Context) ([]v20220315privatepreview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsAll", arg0)
	ret0, _ := ret[0].([]v20220315privatepreview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsAll indicates an expected call of ListEnvironmentsAll.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListEnvironmentsAll function of the MockApplicationsManagementClient. It 
//	takes in an argument of type interface{} and returns a gomock.Call.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListEnvironmentsAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsAll", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListEnvironmentsAll), arg0)
}

// ListEnvironmentsInResourceGroup mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is retrieving a list of environment resources from a resource group in the context of the given argument.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListEnvironmentsInResourceGroup(arg0 context.Context) ([]v20220315privatepreview.EnvironmentResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsInResourceGroup", arg0)
	ret0, _ := ret[0].([]v20220315privatepreview.EnvironmentResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsInResourceGroup indicates an expected call of ListEnvironmentsInResourceGroup.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListEnvironmentsInResourceGroup method of the 
//	MockApplicationsManagementClient object. It takes in one argument and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListEnvironmentsInResourceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsInResourceGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListEnvironmentsInResourceGroup), arg0)
}

// ListUCPGroup mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to list the resource groups associated with a given user-created package (UCP) in a given 
//	subscription. It takes in three parameters: a context, a subscription ID, and a UCP name. It returns an array of 
//	ResourceGroupResource objects and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ListUCPGroup(arg0 context.Context, arg1, arg2 string) ([]v20220901privatepreview.ResourceGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUCPGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].([]v20220901privatepreview.ResourceGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUCPGroup indicates an expected call of ListUCPGroup.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ListUCPGroup function of the MockApplicationsManagementClient. It takes 
//	three arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ListUCPGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUCPGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ListUCPGroup), arg0, arg1, arg2)
}

// ShowApplication mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to show an application resource given a context and a string. It returns the application resource 
//	and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ShowApplication(arg0 context.Context, arg1 string) (v20220315privatepreview.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowApplication", arg0, arg1)
	ret0, _ := ret[0].(v20220315privatepreview.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowApplication indicates an expected call of ShowApplication.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ShowApplication method of the MockApplicationsManagementClient. It takes 
//	two arguments and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ShowApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowApplication", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ShowApplication), arg0, arg1)
}

// ShowRecipe mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to show the properties of an environment recipe. It takes in three parameters: a context, a string
//	 for the resource group name, and a string for the environment name. It returns an EnvironmentRecipeProperties object 
//	and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ShowRecipe(arg0 context.Context, arg1, arg2 string) (v20220315privatepreview.EnvironmentRecipeProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowRecipe", arg0, arg1, arg2)
	ret0, _ := ret[0].(v20220315privatepreview.EnvironmentRecipeProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowRecipe indicates an expected call of ShowRecipe.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ShowRecipe method of the MockApplicationsManagementClient. It takes three 
//	parameters and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ShowRecipe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowRecipe", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ShowRecipe), arg0, arg1, arg2)
}

// ShowResource mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to show a resource from the Applications Management Client. It takes in three parameters, a 
//	context, a string and another string, and returns a GenericResource and an error.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ShowResource(arg0 context.Context, arg1, arg2 string) (generated.GenericResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(generated.GenericResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowResource indicates an expected call of ShowResource.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ShowResource method of the MockApplicationsManagementClient. It takes 
//	three parameters and records the call with the given parameters.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ShowResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowResource", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ShowResource), arg0, arg1, arg2)
}

// ShowUCPGroup mocks base method.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to show the resource group resource associated with a given user-defined cloud profile group. It 
//	takes in four parameters: a context, a subscription ID, a resource group name, and a cloud profile group name. It 
//	returns the resource group resource associated with the given cloud profile group and an error if one occurs.
//
// </AiDoc: End of OpenAI comments>
func (m *MockApplicationsManagementClient) ShowUCPGroup(arg0 context.Context, arg1, arg2, arg3 string) (v20220901privatepreview.ResourceGroupResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowUCPGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v20220901privatepreview.ResourceGroupResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowUCPGroup indicates an expected call of ShowUCPGroup.
//
// <AiDoc: The following comments were generated by OpenAI explaining the code as it existed at the time of this commit>
//	This function is used to record a call to the ShowUCPGroup method of the MockApplicationsManagementClient. It takes four
//	 parameters and returns a call object.
//
// </AiDoc: End of OpenAI comments>
func (mr *MockApplicationsManagementClientMockRecorder) ShowUCPGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowUCPGroup", reflect.TypeOf((*MockApplicationsManagementClient)(nil).ShowUCPGroup), arg0, arg1, arg2, arg3)
}
