// Code generated by MockGen. DO NOT EDIT.
// Source: ./management_mocks.go
//
// Generated by this command:
//
//	mockgen -typed -source=./management_mocks.go -destination=./mock_management_wrapped_clients.go -package=clients -self_package github.com/radius-project/radius/pkg/cli/clients github.com/radius-project/radius/pkg/cli/clients genericResourceClient,applicationResourceClient,environmentResourceClient,resourceGroupClient,resourceProviderClient,resourceTypeClient,apiVersonClient,locationClient
//

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	generated "github.com/radius-project/radius/pkg/cli/clients_new/generated"
	v20231001preview "github.com/radius-project/radius/pkg/corerp/api/v20231001preview"
	v20231001preview0 "github.com/radius-project/radius/pkg/ucp/api/v20231001preview"
	gomock "go.uber.org/mock/gomock"
)

// MockgenericResourceClient is a mock of genericResourceClient interface.
type MockgenericResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockgenericResourceClientMockRecorder
}

// MockgenericResourceClientMockRecorder is the mock recorder for MockgenericResourceClient.
type MockgenericResourceClientMockRecorder struct {
	mock *MockgenericResourceClient
}

// NewMockgenericResourceClient creates a new mock instance.
func NewMockgenericResourceClient(ctrl *gomock.Controller) *MockgenericResourceClient {
	mock := &MockgenericResourceClient{ctrl: ctrl}
	mock.recorder = &MockgenericResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgenericResourceClient) EXPECT() *MockgenericResourceClientMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MockgenericResourceClient) BeginCreateOrUpdate(ctx context.Context, resourceName string, genericResourceParameters generated.GenericResource, options *generated.GenericResourcesClientBeginCreateOrUpdateOptions) (*runtime.Poller[generated.GenericResourcesClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, resourceName, genericResourceParameters, options)
	ret0, _ := ret[0].(*runtime.Poller[generated.GenericResourcesClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MockgenericResourceClientMockRecorder) BeginCreateOrUpdate(ctx, resourceName, genericResourceParameters, options any) *MockgenericResourceClientBeginCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MockgenericResourceClient)(nil).BeginCreateOrUpdate), ctx, resourceName, genericResourceParameters, options)
	return &MockgenericResourceClientBeginCreateOrUpdateCall{Call: call}
}

// MockgenericResourceClientBeginCreateOrUpdateCall wrap *gomock.Call
type MockgenericResourceClientBeginCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockgenericResourceClientBeginCreateOrUpdateCall) Return(arg0 *runtime.Poller[generated.GenericResourcesClientCreateOrUpdateResponse], arg1 error) *MockgenericResourceClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockgenericResourceClientBeginCreateOrUpdateCall) Do(f func(context.Context, string, generated.GenericResource, *generated.GenericResourcesClientBeginCreateOrUpdateOptions) (*runtime.Poller[generated.GenericResourcesClientCreateOrUpdateResponse], error)) *MockgenericResourceClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockgenericResourceClientBeginCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, generated.GenericResource, *generated.GenericResourcesClientBeginCreateOrUpdateOptions) (*runtime.Poller[generated.GenericResourcesClientCreateOrUpdateResponse], error)) *MockgenericResourceClientBeginCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BeginDelete mocks base method.
func (m *MockgenericResourceClient) BeginDelete(ctx context.Context, resourceName string, options *generated.GenericResourcesClientBeginDeleteOptions) (*runtime.Poller[generated.GenericResourcesClientDeleteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDelete", ctx, resourceName, options)
	ret0, _ := ret[0].(*runtime.Poller[generated.GenericResourcesClientDeleteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDelete indicates an expected call of BeginDelete.
func (mr *MockgenericResourceClientMockRecorder) BeginDelete(ctx, resourceName, options any) *MockgenericResourceClientBeginDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDelete", reflect.TypeOf((*MockgenericResourceClient)(nil).BeginDelete), ctx, resourceName, options)
	return &MockgenericResourceClientBeginDeleteCall{Call: call}
}

// MockgenericResourceClientBeginDeleteCall wrap *gomock.Call
type MockgenericResourceClientBeginDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockgenericResourceClientBeginDeleteCall) Return(arg0 *runtime.Poller[generated.GenericResourcesClientDeleteResponse], arg1 error) *MockgenericResourceClientBeginDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockgenericResourceClientBeginDeleteCall) Do(f func(context.Context, string, *generated.GenericResourcesClientBeginDeleteOptions) (*runtime.Poller[generated.GenericResourcesClientDeleteResponse], error)) *MockgenericResourceClientBeginDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockgenericResourceClientBeginDeleteCall) DoAndReturn(f func(context.Context, string, *generated.GenericResourcesClientBeginDeleteOptions) (*runtime.Poller[generated.GenericResourcesClientDeleteResponse], error)) *MockgenericResourceClientBeginDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockgenericResourceClient) Get(ctx context.Context, resourceName string, options *generated.GenericResourcesClientGetOptions) (generated.GenericResourcesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceName, options)
	ret0, _ := ret[0].(generated.GenericResourcesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockgenericResourceClientMockRecorder) Get(ctx, resourceName, options any) *MockgenericResourceClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockgenericResourceClient)(nil).Get), ctx, resourceName, options)
	return &MockgenericResourceClientGetCall{Call: call}
}

// MockgenericResourceClientGetCall wrap *gomock.Call
type MockgenericResourceClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockgenericResourceClientGetCall) Return(arg0 generated.GenericResourcesClientGetResponse, arg1 error) *MockgenericResourceClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockgenericResourceClientGetCall) Do(f func(context.Context, string, *generated.GenericResourcesClientGetOptions) (generated.GenericResourcesClientGetResponse, error)) *MockgenericResourceClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockgenericResourceClientGetCall) DoAndReturn(f func(context.Context, string, *generated.GenericResourcesClientGetOptions) (generated.GenericResourcesClientGetResponse, error)) *MockgenericResourceClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListByRootScopePager mocks base method.
func (m *MockgenericResourceClient) NewListByRootScopePager(options *generated.GenericResourcesClientListByRootScopeOptions) *runtime.Pager[generated.GenericResourcesClientListByRootScopeResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByRootScopePager", options)
	ret0, _ := ret[0].(*runtime.Pager[generated.GenericResourcesClientListByRootScopeResponse])
	return ret0
}

// NewListByRootScopePager indicates an expected call of NewListByRootScopePager.
func (mr *MockgenericResourceClientMockRecorder) NewListByRootScopePager(options any) *MockgenericResourceClientNewListByRootScopePagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByRootScopePager", reflect.TypeOf((*MockgenericResourceClient)(nil).NewListByRootScopePager), options)
	return &MockgenericResourceClientNewListByRootScopePagerCall{Call: call}
}

// MockgenericResourceClientNewListByRootScopePagerCall wrap *gomock.Call
type MockgenericResourceClientNewListByRootScopePagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockgenericResourceClientNewListByRootScopePagerCall) Return(arg0 *runtime.Pager[generated.GenericResourcesClientListByRootScopeResponse]) *MockgenericResourceClientNewListByRootScopePagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockgenericResourceClientNewListByRootScopePagerCall) Do(f func(*generated.GenericResourcesClientListByRootScopeOptions) *runtime.Pager[generated.GenericResourcesClientListByRootScopeResponse]) *MockgenericResourceClientNewListByRootScopePagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockgenericResourceClientNewListByRootScopePagerCall) DoAndReturn(f func(*generated.GenericResourcesClientListByRootScopeOptions) *runtime.Pager[generated.GenericResourcesClientListByRootScopeResponse]) *MockgenericResourceClientNewListByRootScopePagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockapplicationResourceClient is a mock of applicationResourceClient interface.
type MockapplicationResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationResourceClientMockRecorder
}

// MockapplicationResourceClientMockRecorder is the mock recorder for MockapplicationResourceClient.
type MockapplicationResourceClientMockRecorder struct {
	mock *MockapplicationResourceClient
}

// NewMockapplicationResourceClient creates a new mock instance.
func NewMockapplicationResourceClient(ctrl *gomock.Controller) *MockapplicationResourceClient {
	mock := &MockapplicationResourceClient{ctrl: ctrl}
	mock.recorder = &MockapplicationResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapplicationResourceClient) EXPECT() *MockapplicationResourceClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockapplicationResourceClient) CreateOrUpdate(ctx context.Context, applicationName string, resource v20231001preview.ApplicationResource, options *v20231001preview.ApplicationsClientCreateOrUpdateOptions) (v20231001preview.ApplicationsClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, applicationName, resource, options)
	ret0, _ := ret[0].(v20231001preview.ApplicationsClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockapplicationResourceClientMockRecorder) CreateOrUpdate(ctx, applicationName, resource, options any) *MockapplicationResourceClientCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockapplicationResourceClient)(nil).CreateOrUpdate), ctx, applicationName, resource, options)
	return &MockapplicationResourceClientCreateOrUpdateCall{Call: call}
}

// MockapplicationResourceClientCreateOrUpdateCall wrap *gomock.Call
type MockapplicationResourceClientCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapplicationResourceClientCreateOrUpdateCall) Return(arg0 v20231001preview.ApplicationsClientCreateOrUpdateResponse, arg1 error) *MockapplicationResourceClientCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapplicationResourceClientCreateOrUpdateCall) Do(f func(context.Context, string, v20231001preview.ApplicationResource, *v20231001preview.ApplicationsClientCreateOrUpdateOptions) (v20231001preview.ApplicationsClientCreateOrUpdateResponse, error)) *MockapplicationResourceClientCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapplicationResourceClientCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, v20231001preview.ApplicationResource, *v20231001preview.ApplicationsClientCreateOrUpdateOptions) (v20231001preview.ApplicationsClientCreateOrUpdateResponse, error)) *MockapplicationResourceClientCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockapplicationResourceClient) Delete(ctx context.Context, applicationName string, options *v20231001preview.ApplicationsClientDeleteOptions) (v20231001preview.ApplicationsClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, applicationName, options)
	ret0, _ := ret[0].(v20231001preview.ApplicationsClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockapplicationResourceClientMockRecorder) Delete(ctx, applicationName, options any) *MockapplicationResourceClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockapplicationResourceClient)(nil).Delete), ctx, applicationName, options)
	return &MockapplicationResourceClientDeleteCall{Call: call}
}

// MockapplicationResourceClientDeleteCall wrap *gomock.Call
type MockapplicationResourceClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapplicationResourceClientDeleteCall) Return(arg0 v20231001preview.ApplicationsClientDeleteResponse, arg1 error) *MockapplicationResourceClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapplicationResourceClientDeleteCall) Do(f func(context.Context, string, *v20231001preview.ApplicationsClientDeleteOptions) (v20231001preview.ApplicationsClientDeleteResponse, error)) *MockapplicationResourceClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapplicationResourceClientDeleteCall) DoAndReturn(f func(context.Context, string, *v20231001preview.ApplicationsClientDeleteOptions) (v20231001preview.ApplicationsClientDeleteResponse, error)) *MockapplicationResourceClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockapplicationResourceClient) Get(ctx context.Context, applicationName string, options *v20231001preview.ApplicationsClientGetOptions) (v20231001preview.ApplicationsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, applicationName, options)
	ret0, _ := ret[0].(v20231001preview.ApplicationsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockapplicationResourceClientMockRecorder) Get(ctx, applicationName, options any) *MockapplicationResourceClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockapplicationResourceClient)(nil).Get), ctx, applicationName, options)
	return &MockapplicationResourceClientGetCall{Call: call}
}

// MockapplicationResourceClientGetCall wrap *gomock.Call
type MockapplicationResourceClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapplicationResourceClientGetCall) Return(arg0 v20231001preview.ApplicationsClientGetResponse, arg1 error) *MockapplicationResourceClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapplicationResourceClientGetCall) Do(f func(context.Context, string, *v20231001preview.ApplicationsClientGetOptions) (v20231001preview.ApplicationsClientGetResponse, error)) *MockapplicationResourceClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapplicationResourceClientGetCall) DoAndReturn(f func(context.Context, string, *v20231001preview.ApplicationsClientGetOptions) (v20231001preview.ApplicationsClientGetResponse, error)) *MockapplicationResourceClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGraph mocks base method.
func (m *MockapplicationResourceClient) GetGraph(ctx context.Context, applicationName string, body map[string]any, options *v20231001preview.ApplicationsClientGetGraphOptions) (v20231001preview.ApplicationsClientGetGraphResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraph", ctx, applicationName, body, options)
	ret0, _ := ret[0].(v20231001preview.ApplicationsClientGetGraphResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraph indicates an expected call of GetGraph.
func (mr *MockapplicationResourceClientMockRecorder) GetGraph(ctx, applicationName, body, options any) *MockapplicationResourceClientGetGraphCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraph", reflect.TypeOf((*MockapplicationResourceClient)(nil).GetGraph), ctx, applicationName, body, options)
	return &MockapplicationResourceClientGetGraphCall{Call: call}
}

// MockapplicationResourceClientGetGraphCall wrap *gomock.Call
type MockapplicationResourceClientGetGraphCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapplicationResourceClientGetGraphCall) Return(arg0 v20231001preview.ApplicationsClientGetGraphResponse, arg1 error) *MockapplicationResourceClientGetGraphCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapplicationResourceClientGetGraphCall) Do(f func(context.Context, string, map[string]any, *v20231001preview.ApplicationsClientGetGraphOptions) (v20231001preview.ApplicationsClientGetGraphResponse, error)) *MockapplicationResourceClientGetGraphCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapplicationResourceClientGetGraphCall) DoAndReturn(f func(context.Context, string, map[string]any, *v20231001preview.ApplicationsClientGetGraphOptions) (v20231001preview.ApplicationsClientGetGraphResponse, error)) *MockapplicationResourceClientGetGraphCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListByScopePager mocks base method.
func (m *MockapplicationResourceClient) NewListByScopePager(options *v20231001preview.ApplicationsClientListByScopeOptions) *runtime.Pager[v20231001preview.ApplicationsClientListByScopeResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByScopePager", options)
	ret0, _ := ret[0].(*runtime.Pager[v20231001preview.ApplicationsClientListByScopeResponse])
	return ret0
}

// NewListByScopePager indicates an expected call of NewListByScopePager.
func (mr *MockapplicationResourceClientMockRecorder) NewListByScopePager(options any) *MockapplicationResourceClientNewListByScopePagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByScopePager", reflect.TypeOf((*MockapplicationResourceClient)(nil).NewListByScopePager), options)
	return &MockapplicationResourceClientNewListByScopePagerCall{Call: call}
}

// MockapplicationResourceClientNewListByScopePagerCall wrap *gomock.Call
type MockapplicationResourceClientNewListByScopePagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapplicationResourceClientNewListByScopePagerCall) Return(arg0 *runtime.Pager[v20231001preview.ApplicationsClientListByScopeResponse]) *MockapplicationResourceClientNewListByScopePagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapplicationResourceClientNewListByScopePagerCall) Do(f func(*v20231001preview.ApplicationsClientListByScopeOptions) *runtime.Pager[v20231001preview.ApplicationsClientListByScopeResponse]) *MockapplicationResourceClientNewListByScopePagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapplicationResourceClientNewListByScopePagerCall) DoAndReturn(f func(*v20231001preview.ApplicationsClientListByScopeOptions) *runtime.Pager[v20231001preview.ApplicationsClientListByScopeResponse]) *MockapplicationResourceClientNewListByScopePagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockenvironmentResourceClient is a mock of environmentResourceClient interface.
type MockenvironmentResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentResourceClientMockRecorder
}

// MockenvironmentResourceClientMockRecorder is the mock recorder for MockenvironmentResourceClient.
type MockenvironmentResourceClientMockRecorder struct {
	mock *MockenvironmentResourceClient
}

// NewMockenvironmentResourceClient creates a new mock instance.
func NewMockenvironmentResourceClient(ctrl *gomock.Controller) *MockenvironmentResourceClient {
	mock := &MockenvironmentResourceClient{ctrl: ctrl}
	mock.recorder = &MockenvironmentResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenvironmentResourceClient) EXPECT() *MockenvironmentResourceClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockenvironmentResourceClient) CreateOrUpdate(ctx context.Context, environmentName string, resource v20231001preview.EnvironmentResource, options *v20231001preview.EnvironmentsClientCreateOrUpdateOptions) (v20231001preview.EnvironmentsClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, environmentName, resource, options)
	ret0, _ := ret[0].(v20231001preview.EnvironmentsClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockenvironmentResourceClientMockRecorder) CreateOrUpdate(ctx, environmentName, resource, options any) *MockenvironmentResourceClientCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockenvironmentResourceClient)(nil).CreateOrUpdate), ctx, environmentName, resource, options)
	return &MockenvironmentResourceClientCreateOrUpdateCall{Call: call}
}

// MockenvironmentResourceClientCreateOrUpdateCall wrap *gomock.Call
type MockenvironmentResourceClientCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockenvironmentResourceClientCreateOrUpdateCall) Return(arg0 v20231001preview.EnvironmentsClientCreateOrUpdateResponse, arg1 error) *MockenvironmentResourceClientCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockenvironmentResourceClientCreateOrUpdateCall) Do(f func(context.Context, string, v20231001preview.EnvironmentResource, *v20231001preview.EnvironmentsClientCreateOrUpdateOptions) (v20231001preview.EnvironmentsClientCreateOrUpdateResponse, error)) *MockenvironmentResourceClientCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockenvironmentResourceClientCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, v20231001preview.EnvironmentResource, *v20231001preview.EnvironmentsClientCreateOrUpdateOptions) (v20231001preview.EnvironmentsClientCreateOrUpdateResponse, error)) *MockenvironmentResourceClientCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockenvironmentResourceClient) Delete(ctx context.Context, environmentName string, options *v20231001preview.EnvironmentsClientDeleteOptions) (v20231001preview.EnvironmentsClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, environmentName, options)
	ret0, _ := ret[0].(v20231001preview.EnvironmentsClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockenvironmentResourceClientMockRecorder) Delete(ctx, environmentName, options any) *MockenvironmentResourceClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockenvironmentResourceClient)(nil).Delete), ctx, environmentName, options)
	return &MockenvironmentResourceClientDeleteCall{Call: call}
}

// MockenvironmentResourceClientDeleteCall wrap *gomock.Call
type MockenvironmentResourceClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockenvironmentResourceClientDeleteCall) Return(arg0 v20231001preview.EnvironmentsClientDeleteResponse, arg1 error) *MockenvironmentResourceClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockenvironmentResourceClientDeleteCall) Do(f func(context.Context, string, *v20231001preview.EnvironmentsClientDeleteOptions) (v20231001preview.EnvironmentsClientDeleteResponse, error)) *MockenvironmentResourceClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockenvironmentResourceClientDeleteCall) DoAndReturn(f func(context.Context, string, *v20231001preview.EnvironmentsClientDeleteOptions) (v20231001preview.EnvironmentsClientDeleteResponse, error)) *MockenvironmentResourceClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockenvironmentResourceClient) Get(ctx context.Context, environmentName string, options *v20231001preview.EnvironmentsClientGetOptions) (v20231001preview.EnvironmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, environmentName, options)
	ret0, _ := ret[0].(v20231001preview.EnvironmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockenvironmentResourceClientMockRecorder) Get(ctx, environmentName, options any) *MockenvironmentResourceClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockenvironmentResourceClient)(nil).Get), ctx, environmentName, options)
	return &MockenvironmentResourceClientGetCall{Call: call}
}

// MockenvironmentResourceClientGetCall wrap *gomock.Call
type MockenvironmentResourceClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockenvironmentResourceClientGetCall) Return(arg0 v20231001preview.EnvironmentsClientGetResponse, arg1 error) *MockenvironmentResourceClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockenvironmentResourceClientGetCall) Do(f func(context.Context, string, *v20231001preview.EnvironmentsClientGetOptions) (v20231001preview.EnvironmentsClientGetResponse, error)) *MockenvironmentResourceClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockenvironmentResourceClientGetCall) DoAndReturn(f func(context.Context, string, *v20231001preview.EnvironmentsClientGetOptions) (v20231001preview.EnvironmentsClientGetResponse, error)) *MockenvironmentResourceClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetadata mocks base method.
func (m *MockenvironmentResourceClient) GetMetadata(ctx context.Context, environmentName string, body v20231001preview.RecipeGetMetadata, options *v20231001preview.EnvironmentsClientGetMetadataOptions) (v20231001preview.EnvironmentsClientGetMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, environmentName, body, options)
	ret0, _ := ret[0].(v20231001preview.EnvironmentsClientGetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockenvironmentResourceClientMockRecorder) GetMetadata(ctx, environmentName, body, options any) *MockenvironmentResourceClientGetMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockenvironmentResourceClient)(nil).GetMetadata), ctx, environmentName, body, options)
	return &MockenvironmentResourceClientGetMetadataCall{Call: call}
}

// MockenvironmentResourceClientGetMetadataCall wrap *gomock.Call
type MockenvironmentResourceClientGetMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockenvironmentResourceClientGetMetadataCall) Return(arg0 v20231001preview.EnvironmentsClientGetMetadataResponse, arg1 error) *MockenvironmentResourceClientGetMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockenvironmentResourceClientGetMetadataCall) Do(f func(context.Context, string, v20231001preview.RecipeGetMetadata, *v20231001preview.EnvironmentsClientGetMetadataOptions) (v20231001preview.EnvironmentsClientGetMetadataResponse, error)) *MockenvironmentResourceClientGetMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockenvironmentResourceClientGetMetadataCall) DoAndReturn(f func(context.Context, string, v20231001preview.RecipeGetMetadata, *v20231001preview.EnvironmentsClientGetMetadataOptions) (v20231001preview.EnvironmentsClientGetMetadataResponse, error)) *MockenvironmentResourceClientGetMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListByScopePager mocks base method.
func (m *MockenvironmentResourceClient) NewListByScopePager(options *v20231001preview.EnvironmentsClientListByScopeOptions) *runtime.Pager[v20231001preview.EnvironmentsClientListByScopeResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByScopePager", options)
	ret0, _ := ret[0].(*runtime.Pager[v20231001preview.EnvironmentsClientListByScopeResponse])
	return ret0
}

// NewListByScopePager indicates an expected call of NewListByScopePager.
func (mr *MockenvironmentResourceClientMockRecorder) NewListByScopePager(options any) *MockenvironmentResourceClientNewListByScopePagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByScopePager", reflect.TypeOf((*MockenvironmentResourceClient)(nil).NewListByScopePager), options)
	return &MockenvironmentResourceClientNewListByScopePagerCall{Call: call}
}

// MockenvironmentResourceClientNewListByScopePagerCall wrap *gomock.Call
type MockenvironmentResourceClientNewListByScopePagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockenvironmentResourceClientNewListByScopePagerCall) Return(arg0 *runtime.Pager[v20231001preview.EnvironmentsClientListByScopeResponse]) *MockenvironmentResourceClientNewListByScopePagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockenvironmentResourceClientNewListByScopePagerCall) Do(f func(*v20231001preview.EnvironmentsClientListByScopeOptions) *runtime.Pager[v20231001preview.EnvironmentsClientListByScopeResponse]) *MockenvironmentResourceClientNewListByScopePagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockenvironmentResourceClientNewListByScopePagerCall) DoAndReturn(f func(*v20231001preview.EnvironmentsClientListByScopeOptions) *runtime.Pager[v20231001preview.EnvironmentsClientListByScopeResponse]) *MockenvironmentResourceClientNewListByScopePagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockresourceGroupClient is a mock of resourceGroupClient interface.
type MockresourceGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockresourceGroupClientMockRecorder
}

// MockresourceGroupClientMockRecorder is the mock recorder for MockresourceGroupClient.
type MockresourceGroupClientMockRecorder struct {
	mock *MockresourceGroupClient
}

// NewMockresourceGroupClient creates a new mock instance.
func NewMockresourceGroupClient(ctrl *gomock.Controller) *MockresourceGroupClient {
	mock := &MockresourceGroupClient{ctrl: ctrl}
	mock.recorder = &MockresourceGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceGroupClient) EXPECT() *MockresourceGroupClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockresourceGroupClient) CreateOrUpdate(ctx context.Context, planeName, resourceGroupName string, resource v20231001preview0.ResourceGroupResource, options *v20231001preview0.ResourceGroupsClientCreateOrUpdateOptions) (v20231001preview0.ResourceGroupsClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, planeName, resourceGroupName, resource, options)
	ret0, _ := ret[0].(v20231001preview0.ResourceGroupsClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockresourceGroupClientMockRecorder) CreateOrUpdate(ctx, planeName, resourceGroupName, resource, options any) *MockresourceGroupClientCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockresourceGroupClient)(nil).CreateOrUpdate), ctx, planeName, resourceGroupName, resource, options)
	return &MockresourceGroupClientCreateOrUpdateCall{Call: call}
}

// MockresourceGroupClientCreateOrUpdateCall wrap *gomock.Call
type MockresourceGroupClientCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceGroupClientCreateOrUpdateCall) Return(arg0 v20231001preview0.ResourceGroupsClientCreateOrUpdateResponse, arg1 error) *MockresourceGroupClientCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceGroupClientCreateOrUpdateCall) Do(f func(context.Context, string, string, v20231001preview0.ResourceGroupResource, *v20231001preview0.ResourceGroupsClientCreateOrUpdateOptions) (v20231001preview0.ResourceGroupsClientCreateOrUpdateResponse, error)) *MockresourceGroupClientCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceGroupClientCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, string, v20231001preview0.ResourceGroupResource, *v20231001preview0.ResourceGroupsClientCreateOrUpdateOptions) (v20231001preview0.ResourceGroupsClientCreateOrUpdateResponse, error)) *MockresourceGroupClientCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockresourceGroupClient) Delete(ctx context.Context, planeName, resourceGroupName string, options *v20231001preview0.ResourceGroupsClientDeleteOptions) (v20231001preview0.ResourceGroupsClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, planeName, resourceGroupName, options)
	ret0, _ := ret[0].(v20231001preview0.ResourceGroupsClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockresourceGroupClientMockRecorder) Delete(ctx, planeName, resourceGroupName, options any) *MockresourceGroupClientDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockresourceGroupClient)(nil).Delete), ctx, planeName, resourceGroupName, options)
	return &MockresourceGroupClientDeleteCall{Call: call}
}

// MockresourceGroupClientDeleteCall wrap *gomock.Call
type MockresourceGroupClientDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceGroupClientDeleteCall) Return(arg0 v20231001preview0.ResourceGroupsClientDeleteResponse, arg1 error) *MockresourceGroupClientDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceGroupClientDeleteCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceGroupsClientDeleteOptions) (v20231001preview0.ResourceGroupsClientDeleteResponse, error)) *MockresourceGroupClientDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceGroupClientDeleteCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceGroupsClientDeleteOptions) (v20231001preview0.ResourceGroupsClientDeleteResponse, error)) *MockresourceGroupClientDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockresourceGroupClient) Get(ctx context.Context, planeName, resourceGroupName string, options *v20231001preview0.ResourceGroupsClientGetOptions) (v20231001preview0.ResourceGroupsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, planeName, resourceGroupName, options)
	ret0, _ := ret[0].(v20231001preview0.ResourceGroupsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockresourceGroupClientMockRecorder) Get(ctx, planeName, resourceGroupName, options any) *MockresourceGroupClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockresourceGroupClient)(nil).Get), ctx, planeName, resourceGroupName, options)
	return &MockresourceGroupClientGetCall{Call: call}
}

// MockresourceGroupClientGetCall wrap *gomock.Call
type MockresourceGroupClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceGroupClientGetCall) Return(arg0 v20231001preview0.ResourceGroupsClientGetResponse, arg1 error) *MockresourceGroupClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceGroupClientGetCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceGroupsClientGetOptions) (v20231001preview0.ResourceGroupsClientGetResponse, error)) *MockresourceGroupClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceGroupClientGetCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceGroupsClientGetOptions) (v20231001preview0.ResourceGroupsClientGetResponse, error)) *MockresourceGroupClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListPager mocks base method.
func (m *MockresourceGroupClient) NewListPager(planeName string, options *v20231001preview0.ResourceGroupsClientListOptions) *runtime.Pager[v20231001preview0.ResourceGroupsClientListResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", planeName, options)
	ret0, _ := ret[0].(*runtime.Pager[v20231001preview0.ResourceGroupsClientListResponse])
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockresourceGroupClientMockRecorder) NewListPager(planeName, options any) *MockresourceGroupClientNewListPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockresourceGroupClient)(nil).NewListPager), planeName, options)
	return &MockresourceGroupClientNewListPagerCall{Call: call}
}

// MockresourceGroupClientNewListPagerCall wrap *gomock.Call
type MockresourceGroupClientNewListPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceGroupClientNewListPagerCall) Return(arg0 *runtime.Pager[v20231001preview0.ResourceGroupsClientListResponse]) *MockresourceGroupClientNewListPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceGroupClientNewListPagerCall) Do(f func(string, *v20231001preview0.ResourceGroupsClientListOptions) *runtime.Pager[v20231001preview0.ResourceGroupsClientListResponse]) *MockresourceGroupClientNewListPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceGroupClientNewListPagerCall) DoAndReturn(f func(string, *v20231001preview0.ResourceGroupsClientListOptions) *runtime.Pager[v20231001preview0.ResourceGroupsClientListResponse]) *MockresourceGroupClientNewListPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockresourceProviderClient is a mock of resourceProviderClient interface.
type MockresourceProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockresourceProviderClientMockRecorder
}

// MockresourceProviderClientMockRecorder is the mock recorder for MockresourceProviderClient.
type MockresourceProviderClientMockRecorder struct {
	mock *MockresourceProviderClient
}

// NewMockresourceProviderClient creates a new mock instance.
func NewMockresourceProviderClient(ctrl *gomock.Controller) *MockresourceProviderClient {
	mock := &MockresourceProviderClient{ctrl: ctrl}
	mock.recorder = &MockresourceProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceProviderClient) EXPECT() *MockresourceProviderClientMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MockresourceProviderClient) BeginCreateOrUpdate(ctx context.Context, planeName, resourceProviderName string, resource v20231001preview0.ResourceProviderResource, options *v20231001preview0.ResourceProvidersClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, planeName, resourceProviderName, resource, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.ResourceProvidersClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MockresourceProviderClientMockRecorder) BeginCreateOrUpdate(ctx, planeName, resourceProviderName, resource, options any) *MockresourceProviderClientBeginCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MockresourceProviderClient)(nil).BeginCreateOrUpdate), ctx, planeName, resourceProviderName, resource, options)
	return &MockresourceProviderClientBeginCreateOrUpdateCall{Call: call}
}

// MockresourceProviderClientBeginCreateOrUpdateCall wrap *gomock.Call
type MockresourceProviderClientBeginCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientBeginCreateOrUpdateCall) Return(arg0 *runtime.Poller[v20231001preview0.ResourceProvidersClientCreateOrUpdateResponse], arg1 error) *MockresourceProviderClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientBeginCreateOrUpdateCall) Do(f func(context.Context, string, string, v20231001preview0.ResourceProviderResource, *v20231001preview0.ResourceProvidersClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientCreateOrUpdateResponse], error)) *MockresourceProviderClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientBeginCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, string, v20231001preview0.ResourceProviderResource, *v20231001preview0.ResourceProvidersClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientCreateOrUpdateResponse], error)) *MockresourceProviderClientBeginCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BeginDelete mocks base method.
func (m *MockresourceProviderClient) BeginDelete(ctx context.Context, planeName, resourceProviderName string, options *v20231001preview0.ResourceProvidersClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientDeleteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDelete", ctx, planeName, resourceProviderName, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.ResourceProvidersClientDeleteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDelete indicates an expected call of BeginDelete.
func (mr *MockresourceProviderClientMockRecorder) BeginDelete(ctx, planeName, resourceProviderName, options any) *MockresourceProviderClientBeginDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDelete", reflect.TypeOf((*MockresourceProviderClient)(nil).BeginDelete), ctx, planeName, resourceProviderName, options)
	return &MockresourceProviderClientBeginDeleteCall{Call: call}
}

// MockresourceProviderClientBeginDeleteCall wrap *gomock.Call
type MockresourceProviderClientBeginDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientBeginDeleteCall) Return(arg0 *runtime.Poller[v20231001preview0.ResourceProvidersClientDeleteResponse], arg1 error) *MockresourceProviderClientBeginDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientBeginDeleteCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientDeleteResponse], error)) *MockresourceProviderClientBeginDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientBeginDeleteCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceProvidersClientDeleteResponse], error)) *MockresourceProviderClientBeginDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockresourceProviderClient) Get(ctx context.Context, planeName, resourceProviderName string, options *v20231001preview0.ResourceProvidersClientGetOptions) (v20231001preview0.ResourceProvidersClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, planeName, resourceProviderName, options)
	ret0, _ := ret[0].(v20231001preview0.ResourceProvidersClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockresourceProviderClientMockRecorder) Get(ctx, planeName, resourceProviderName, options any) *MockresourceProviderClientGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockresourceProviderClient)(nil).Get), ctx, planeName, resourceProviderName, options)
	return &MockresourceProviderClientGetCall{Call: call}
}

// MockresourceProviderClientGetCall wrap *gomock.Call
type MockresourceProviderClientGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientGetCall) Return(arg0 v20231001preview0.ResourceProvidersClientGetResponse, arg1 error) *MockresourceProviderClientGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientGetCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientGetOptions) (v20231001preview0.ResourceProvidersClientGetResponse, error)) *MockresourceProviderClientGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientGetCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientGetOptions) (v20231001preview0.ResourceProvidersClientGetResponse, error)) *MockresourceProviderClientGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderSummary mocks base method.
func (m *MockresourceProviderClient) GetProviderSummary(ctx context.Context, planeName, resourceProviderName string, options *v20231001preview0.ResourceProvidersClientGetProviderSummaryOptions) (v20231001preview0.ResourceProvidersClientGetProviderSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderSummary", ctx, planeName, resourceProviderName, options)
	ret0, _ := ret[0].(v20231001preview0.ResourceProvidersClientGetProviderSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderSummary indicates an expected call of GetProviderSummary.
func (mr *MockresourceProviderClientMockRecorder) GetProviderSummary(ctx, planeName, resourceProviderName, options any) *MockresourceProviderClientGetProviderSummaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderSummary", reflect.TypeOf((*MockresourceProviderClient)(nil).GetProviderSummary), ctx, planeName, resourceProviderName, options)
	return &MockresourceProviderClientGetProviderSummaryCall{Call: call}
}

// MockresourceProviderClientGetProviderSummaryCall wrap *gomock.Call
type MockresourceProviderClientGetProviderSummaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientGetProviderSummaryCall) Return(arg0 v20231001preview0.ResourceProvidersClientGetProviderSummaryResponse, arg1 error) *MockresourceProviderClientGetProviderSummaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientGetProviderSummaryCall) Do(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientGetProviderSummaryOptions) (v20231001preview0.ResourceProvidersClientGetProviderSummaryResponse, error)) *MockresourceProviderClientGetProviderSummaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientGetProviderSummaryCall) DoAndReturn(f func(context.Context, string, string, *v20231001preview0.ResourceProvidersClientGetProviderSummaryOptions) (v20231001preview0.ResourceProvidersClientGetProviderSummaryResponse, error)) *MockresourceProviderClientGetProviderSummaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListPager mocks base method.
func (m *MockresourceProviderClient) NewListPager(planeName string, options *v20231001preview0.ResourceProvidersClientListOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", planeName, options)
	ret0, _ := ret[0].(*runtime.Pager[v20231001preview0.ResourceProvidersClientListResponse])
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockresourceProviderClientMockRecorder) NewListPager(planeName, options any) *MockresourceProviderClientNewListPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockresourceProviderClient)(nil).NewListPager), planeName, options)
	return &MockresourceProviderClientNewListPagerCall{Call: call}
}

// MockresourceProviderClientNewListPagerCall wrap *gomock.Call
type MockresourceProviderClientNewListPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientNewListPagerCall) Return(arg0 *runtime.Pager[v20231001preview0.ResourceProvidersClientListResponse]) *MockresourceProviderClientNewListPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientNewListPagerCall) Do(f func(string, *v20231001preview0.ResourceProvidersClientListOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListResponse]) *MockresourceProviderClientNewListPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientNewListPagerCall) DoAndReturn(f func(string, *v20231001preview0.ResourceProvidersClientListOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListResponse]) *MockresourceProviderClientNewListPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListProviderSummariesPager mocks base method.
func (m *MockresourceProviderClient) NewListProviderSummariesPager(planeName string, options *v20231001preview0.ResourceProvidersClientListProviderSummariesOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListProviderSummariesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProviderSummariesPager", planeName, options)
	ret0, _ := ret[0].(*runtime.Pager[v20231001preview0.ResourceProvidersClientListProviderSummariesResponse])
	return ret0
}

// NewListProviderSummariesPager indicates an expected call of NewListProviderSummariesPager.
func (mr *MockresourceProviderClientMockRecorder) NewListProviderSummariesPager(planeName, options any) *MockresourceProviderClientNewListProviderSummariesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProviderSummariesPager", reflect.TypeOf((*MockresourceProviderClient)(nil).NewListProviderSummariesPager), planeName, options)
	return &MockresourceProviderClientNewListProviderSummariesPagerCall{Call: call}
}

// MockresourceProviderClientNewListProviderSummariesPagerCall wrap *gomock.Call
type MockresourceProviderClientNewListProviderSummariesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceProviderClientNewListProviderSummariesPagerCall) Return(arg0 *runtime.Pager[v20231001preview0.ResourceProvidersClientListProviderSummariesResponse]) *MockresourceProviderClientNewListProviderSummariesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceProviderClientNewListProviderSummariesPagerCall) Do(f func(string, *v20231001preview0.ResourceProvidersClientListProviderSummariesOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListProviderSummariesResponse]) *MockresourceProviderClientNewListProviderSummariesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceProviderClientNewListProviderSummariesPagerCall) DoAndReturn(f func(string, *v20231001preview0.ResourceProvidersClientListProviderSummariesOptions) *runtime.Pager[v20231001preview0.ResourceProvidersClientListProviderSummariesResponse]) *MockresourceProviderClientNewListProviderSummariesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockresourceTypeClient is a mock of resourceTypeClient interface.
type MockresourceTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockresourceTypeClientMockRecorder
}

// MockresourceTypeClientMockRecorder is the mock recorder for MockresourceTypeClient.
type MockresourceTypeClientMockRecorder struct {
	mock *MockresourceTypeClient
}

// NewMockresourceTypeClient creates a new mock instance.
func NewMockresourceTypeClient(ctrl *gomock.Controller) *MockresourceTypeClient {
	mock := &MockresourceTypeClient{ctrl: ctrl}
	mock.recorder = &MockresourceTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceTypeClient) EXPECT() *MockresourceTypeClientMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MockresourceTypeClient) BeginCreateOrUpdate(ctx context.Context, planeName, resourceProviderName, resourceTypeName string, resource v20231001preview0.ResourceTypeResource, options *v20231001preview0.ResourceTypesClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, planeName, resourceProviderName, resourceTypeName, resource, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.ResourceTypesClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MockresourceTypeClientMockRecorder) BeginCreateOrUpdate(ctx, planeName, resourceProviderName, resourceTypeName, resource, options any) *MockresourceTypeClientBeginCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MockresourceTypeClient)(nil).BeginCreateOrUpdate), ctx, planeName, resourceProviderName, resourceTypeName, resource, options)
	return &MockresourceTypeClientBeginCreateOrUpdateCall{Call: call}
}

// MockresourceTypeClientBeginCreateOrUpdateCall wrap *gomock.Call
type MockresourceTypeClientBeginCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceTypeClientBeginCreateOrUpdateCall) Return(arg0 *runtime.Poller[v20231001preview0.ResourceTypesClientCreateOrUpdateResponse], arg1 error) *MockresourceTypeClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceTypeClientBeginCreateOrUpdateCall) Do(f func(context.Context, string, string, string, v20231001preview0.ResourceTypeResource, *v20231001preview0.ResourceTypesClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientCreateOrUpdateResponse], error)) *MockresourceTypeClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceTypeClientBeginCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, string, string, v20231001preview0.ResourceTypeResource, *v20231001preview0.ResourceTypesClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientCreateOrUpdateResponse], error)) *MockresourceTypeClientBeginCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BeginDelete mocks base method.
func (m *MockresourceTypeClient) BeginDelete(ctx context.Context, planeName, resourceProviderName, resourceTypeName string, options *v20231001preview0.ResourceTypesClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientDeleteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDelete", ctx, planeName, resourceProviderName, resourceTypeName, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.ResourceTypesClientDeleteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDelete indicates an expected call of BeginDelete.
func (mr *MockresourceTypeClientMockRecorder) BeginDelete(ctx, planeName, resourceProviderName, resourceTypeName, options any) *MockresourceTypeClientBeginDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDelete", reflect.TypeOf((*MockresourceTypeClient)(nil).BeginDelete), ctx, planeName, resourceProviderName, resourceTypeName, options)
	return &MockresourceTypeClientBeginDeleteCall{Call: call}
}

// MockresourceTypeClientBeginDeleteCall wrap *gomock.Call
type MockresourceTypeClientBeginDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockresourceTypeClientBeginDeleteCall) Return(arg0 *runtime.Poller[v20231001preview0.ResourceTypesClientDeleteResponse], arg1 error) *MockresourceTypeClientBeginDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockresourceTypeClientBeginDeleteCall) Do(f func(context.Context, string, string, string, *v20231001preview0.ResourceTypesClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientDeleteResponse], error)) *MockresourceTypeClientBeginDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockresourceTypeClientBeginDeleteCall) DoAndReturn(f func(context.Context, string, string, string, *v20231001preview0.ResourceTypesClientBeginDeleteOptions) (*runtime.Poller[v20231001preview0.ResourceTypesClientDeleteResponse], error)) *MockresourceTypeClientBeginDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockapiVersionClient is a mock of apiVersionClient interface.
type MockapiVersionClient struct {
	ctrl     *gomock.Controller
	recorder *MockapiVersionClientMockRecorder
}

// MockapiVersionClientMockRecorder is the mock recorder for MockapiVersionClient.
type MockapiVersionClientMockRecorder struct {
	mock *MockapiVersionClient
}

// NewMockapiVersionClient creates a new mock instance.
func NewMockapiVersionClient(ctrl *gomock.Controller) *MockapiVersionClient {
	mock := &MockapiVersionClient{ctrl: ctrl}
	mock.recorder = &MockapiVersionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiVersionClient) EXPECT() *MockapiVersionClientMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MockapiVersionClient) BeginCreateOrUpdate(ctx context.Context, planeName, resourceProviderName, resourceTypeName, apiVersionName string, resource v20231001preview0.APIVersionResource, options *v20231001preview0.APIVersionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.APIVersionsClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, resource, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.APIVersionsClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MockapiVersionClientMockRecorder) BeginCreateOrUpdate(ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, resource, options any) *MockapiVersionClientBeginCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MockapiVersionClient)(nil).BeginCreateOrUpdate), ctx, planeName, resourceProviderName, resourceTypeName, apiVersionName, resource, options)
	return &MockapiVersionClientBeginCreateOrUpdateCall{Call: call}
}

// MockapiVersionClientBeginCreateOrUpdateCall wrap *gomock.Call
type MockapiVersionClientBeginCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockapiVersionClientBeginCreateOrUpdateCall) Return(arg0 *runtime.Poller[v20231001preview0.APIVersionsClientCreateOrUpdateResponse], arg1 error) *MockapiVersionClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockapiVersionClientBeginCreateOrUpdateCall) Do(f func(context.Context, string, string, string, string, v20231001preview0.APIVersionResource, *v20231001preview0.APIVersionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.APIVersionsClientCreateOrUpdateResponse], error)) *MockapiVersionClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockapiVersionClientBeginCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, string, string, string, v20231001preview0.APIVersionResource, *v20231001preview0.APIVersionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.APIVersionsClientCreateOrUpdateResponse], error)) *MockapiVersionClientBeginCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocklocationClient is a mock of locationClient interface.
type MocklocationClient struct {
	ctrl     *gomock.Controller
	recorder *MocklocationClientMockRecorder
}

// MocklocationClientMockRecorder is the mock recorder for MocklocationClient.
type MocklocationClientMockRecorder struct {
	mock *MocklocationClient
}

// NewMocklocationClient creates a new mock instance.
func NewMocklocationClient(ctrl *gomock.Controller) *MocklocationClient {
	mock := &MocklocationClient{ctrl: ctrl}
	mock.recorder = &MocklocationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocationClient) EXPECT() *MocklocationClientMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MocklocationClient) BeginCreateOrUpdate(ctx context.Context, planeName, resourceProviderName, locationName string, resource v20231001preview0.LocationResource, options *v20231001preview0.LocationsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.LocationsClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, planeName, resourceProviderName, locationName, resource, options)
	ret0, _ := ret[0].(*runtime.Poller[v20231001preview0.LocationsClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MocklocationClientMockRecorder) BeginCreateOrUpdate(ctx, planeName, resourceProviderName, locationName, resource, options any) *MocklocationClientBeginCreateOrUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MocklocationClient)(nil).BeginCreateOrUpdate), ctx, planeName, resourceProviderName, locationName, resource, options)
	return &MocklocationClientBeginCreateOrUpdateCall{Call: call}
}

// MocklocationClientBeginCreateOrUpdateCall wrap *gomock.Call
type MocklocationClientBeginCreateOrUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocklocationClientBeginCreateOrUpdateCall) Return(arg0 *runtime.Poller[v20231001preview0.LocationsClientCreateOrUpdateResponse], arg1 error) *MocklocationClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocklocationClientBeginCreateOrUpdateCall) Do(f func(context.Context, string, string, string, v20231001preview0.LocationResource, *v20231001preview0.LocationsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.LocationsClientCreateOrUpdateResponse], error)) *MocklocationClientBeginCreateOrUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocklocationClientBeginCreateOrUpdateCall) DoAndReturn(f func(context.Context, string, string, string, v20231001preview0.LocationResource, *v20231001preview0.LocationsClientBeginCreateOrUpdateOptions) (*runtime.Poller[v20231001preview0.LocationsClientCreateOrUpdateResponse], error)) *MocklocationClientBeginCreateOrUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
