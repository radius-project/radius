// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/cli/clients (interfaces: DiagnosticsClient)

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDiagnosticsClient is a mock of DiagnosticsClient interface.
type MockDiagnosticsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosticsClientMockRecorder
}

// MockDiagnosticsClientMockRecorder is the mock recorder for MockDiagnosticsClient.
type MockDiagnosticsClientMockRecorder struct {
	mock *MockDiagnosticsClient
}

// NewMockDiagnosticsClient creates a new mock instance.
func NewMockDiagnosticsClient(ctrl *gomock.Controller) *MockDiagnosticsClient {
	mock := &MockDiagnosticsClient{ctrl: ctrl}
	mock.recorder = &MockDiagnosticsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosticsClient) EXPECT() *MockDiagnosticsClientMockRecorder {
	return m.recorder
}

// Expose mocks base method.
func (m *MockDiagnosticsClient) Expose(arg0 context.Context, arg1 ExposeOptions) (chan error, chan struct{}, chan os.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expose", arg0, arg1)
	ret0, _ := ret[0].(chan error)
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(chan os.Signal)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Expose indicates an expected call of Expose.
func (mr *MockDiagnosticsClientMockRecorder) Expose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expose", reflect.TypeOf((*MockDiagnosticsClient)(nil).Expose), arg0, arg1)
}

// GetPublicEndpoint mocks base method.
func (m *MockDiagnosticsClient) GetPublicEndpoint(arg0 context.Context, arg1 EndpointOptions) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicEndpoint indicates an expected call of GetPublicEndpoint.
func (mr *MockDiagnosticsClientMockRecorder) GetPublicEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicEndpoint", reflect.TypeOf((*MockDiagnosticsClient)(nil).GetPublicEndpoint), arg0, arg1)
}

// Logs mocks base method.
func (m *MockDiagnosticsClient) Logs(arg0 context.Context, arg1 LogsOptions) ([]LogStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1)
	ret0, _ := ret[0].([]LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockDiagnosticsClientMockRecorder) Logs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockDiagnosticsClient)(nil).Logs), arg0, arg1)
}
