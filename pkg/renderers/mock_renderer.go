// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/radius/pkg/workloads (interfaces: WorkloadRenderer)

// Package renderers is a generated GoMock package.
package renderers

import (
	context "context"
	reflect "reflect"

	components "github.com/Azure/radius/pkg/model/components"
	outputresource "github.com/Azure/radius/pkg/radrp/outputresource"
	workloads "github.com/Azure/radius/pkg/workloads"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkloadRenderer is a mock of WorkloadRenderer interface.
type MockWorkloadRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadRendererMockRecorder
}

// MockWorkloadRendererMockRecorder is the mock recorder for MockWorkloadRenderer.
type MockWorkloadRendererMockRecorder struct {
	mock *MockWorkloadRenderer
}

// NewMockWorkloadRenderer creates a new mock instance.
func NewMockWorkloadRenderer(ctrl *gomock.Controller) *MockWorkloadRenderer {
	mock := &MockWorkloadRenderer{ctrl: ctrl}
	mock.recorder = &MockWorkloadRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkloadRenderer) EXPECT() *MockWorkloadRendererMockRecorder {
	return m.recorder
}

// AllocateBindings mocks base method.
func (m *MockWorkloadRenderer) AllocateBindings(arg0 context.Context, arg1 workloads.InstantiatedWorkload, arg2 []workloads.WorkloadResourceProperties) (map[string]components.BindingState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateBindings", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]components.BindingState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateBindings indicates an expected call of AllocateBindings.
func (mr *MockWorkloadRendererMockRecorder) AllocateBindings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateBindings", reflect.TypeOf((*MockWorkloadRenderer)(nil).AllocateBindings), arg0, arg1, arg2)
}

// Render mocks base method.
func (m *MockWorkloadRenderer) Render(arg0 context.Context, arg1 workloads.InstantiatedWorkload) ([]outputresource.OutputResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0, arg1)
	ret0, _ := ret[0].([]outputresource.OutputResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Render indicates an expected call of Render.
func (mr *MockWorkloadRendererMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockWorkloadRenderer)(nil).Render), arg0, arg1)
}
