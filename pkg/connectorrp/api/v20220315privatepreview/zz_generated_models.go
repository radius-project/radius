//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// BasicResourceProperties - Basic properties of a Radius resource.
type BasicResourceProperties struct {
	// Status of the resource
	Status *ResourceStatus `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BasicResourceProperties.
func (b BasicResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BasicResourceProperties.
func (b *BasicResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BasicResourceProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "status", b.Status)
}

func (b *BasicResourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "status":
				err = unpopulate(val, &b.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DaprInvokeHTTPRouteList - Object that includes an array of DaprInvokeHttpRoute and a possible link for next set
type DaprInvokeHTTPRouteList struct {
	// The link used to fetch the next page of DaprInvokeHttpRoute list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprInvokeHttpRoute resources
	Value []*DaprInvokeHTTPRouteResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteList.
func (d DaprInvokeHTTPRouteList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DaprInvokeHTTPRouteProperties - DaprInvokeHttpRoute connector properties
type DaprInvokeHTTPRouteProperties struct {
	BasicResourceProperties
	// REQUIRED; The Dapr appId used for the route
	AppID *string `json:"appId,omitempty"`

	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the daprInvokeHttpRoute connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteProperties.
func (d DaprInvokeHTTPRouteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "appId", d.AppID)
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprInvokeHTTPRouteProperties.
func (d *DaprInvokeHTTPRouteProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appId":
				err = unpopulate(val, &d.AppID)
				delete(rawMsg, key)
		case "application":
				err = unpopulate(val, &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &d.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &d.ProvisioningState)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprInvokeHTTPRouteResource - DaprInvokeHttpRoute connector
type DaprInvokeHTTPRouteResource struct {
	TrackedResource
	// REQUIRED; DaprInvokeHttpRoute connector properties
	Properties *DaprInvokeHTTPRouteProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteResource.
func (d DaprInvokeHTTPRouteResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprInvokeHTTPRouteResource.
func (d *DaprInvokeHTTPRouteResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &d.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &d.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprInvokeHTTPRoutesCreateOrUpdateOptions contains the optional parameters for the DaprInvokeHTTPRoutes.CreateOrUpdate method.
type DaprInvokeHTTPRoutesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesDeleteOptions contains the optional parameters for the DaprInvokeHTTPRoutes.Delete method.
type DaprInvokeHTTPRoutesDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesGetOptions contains the optional parameters for the DaprInvokeHTTPRoutes.Get method.
type DaprInvokeHTTPRoutesGetOptions struct {
	// placeholder for future optional parameters
}

// DaprInvokeHTTPRoutesListByRootScopeOptions contains the optional parameters for the DaprInvokeHTTPRoutes.ListByRootScope method.
type DaprInvokeHTTPRoutesListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

type DaprPubSubAzureServiceBusResourceProperties struct {
	DaprPubSubBrokerProperties
	// REQUIRED; PubSub resource
	Resource *string `json:"resource,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubAzureServiceBusResourceProperties.
func (d DaprPubSubAzureServiceBusResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DaprPubSubBrokerProperties.marshalInternal(objectMap, DaprPubSubBrokerPropertiesKindPubsubAzureServicebus)
	populate(objectMap, "resource", d.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubAzureServiceBusResourceProperties.
func (d *DaprPubSubAzureServiceBusResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "resource":
				err = unpopulate(val, &d.Resource)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DaprPubSubBrokerProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprPubSubBrokerList - Object that includes an array of DaprPubSubBroker and a possible link for next set
type DaprPubSubBrokerList struct {
	// The link used to fetch the next page of DaprPubSubBroker list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprPubSubBroker resources
	Value []*DaprPubSubBrokerResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubBrokerList.
func (d DaprPubSubBrokerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DaprPubSubBrokerPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDaprPubSubBrokerProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DaprPubSubAzureServiceBusResourceProperties, *DaprPubSubBrokerProperties, *DaprPubSubGenericResourceProperties
type DaprPubSubBrokerPropertiesClassification interface {
	// GetDaprPubSubBrokerProperties returns the DaprPubSubBrokerProperties content of the underlying type.
	GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties
}

// DaprPubSubBrokerProperties - DaprPubSubBroker connector properties
type DaprPubSubBrokerProperties struct {
	BasicResourceProperties
	// REQUIRED; The resource id of the environment linked to the daprPubSubBroker connector
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The DaprPubSubProperties kind
	Kind *DaprPubSubBrokerPropertiesKind `json:"kind,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the daprPubSubBroker connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// GetDaprPubSubBrokerProperties implements the DaprPubSubBrokerPropertiesClassification interface for type DaprPubSubBrokerProperties.
func (d *DaprPubSubBrokerProperties) GetDaprPubSubBrokerProperties() *DaprPubSubBrokerProperties { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubBrokerProperties.
func (d *DaprPubSubBrokerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DaprPubSubBrokerProperties) marshalInternal(objectMap map[string]interface{}, discValue DaprPubSubBrokerPropertiesKind) {
	d.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	d.Kind = &discValue
	objectMap["kind"] = d.Kind
	populate(objectMap, "provisioningState", d.ProvisioningState)
}

func (d *DaprPubSubBrokerProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &d.ProvisioningState)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprPubSubBrokerResource - DaprPubSubBroker connector
type DaprPubSubBrokerResource struct {
	TrackedResource
	// REQUIRED; DaprPubSubBroker connector properties
	Properties DaprPubSubBrokerPropertiesClassification `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubBrokerResource.
func (d DaprPubSubBrokerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubBrokerResource.
func (d *DaprPubSubBrokerResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				d.Properties, err = unmarshalDaprPubSubBrokerPropertiesClassification(val)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &d.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprPubSubBrokersCreateOrUpdateOptions contains the optional parameters for the DaprPubSubBrokers.CreateOrUpdate method.
type DaprPubSubBrokersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersDeleteOptions contains the optional parameters for the DaprPubSubBrokers.Delete method.
type DaprPubSubBrokersDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersGetOptions contains the optional parameters for the DaprPubSubBrokers.Get method.
type DaprPubSubBrokersGetOptions struct {
	// placeholder for future optional parameters
}

// DaprPubSubBrokersListByRootScopeOptions contains the optional parameters for the DaprPubSubBrokers.ListByRootScope method.
type DaprPubSubBrokersListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

type DaprPubSubGenericResourceProperties struct {
	DaprPubSubBrokerProperties
	// REQUIRED; Metadata for the pub sub resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; Dapr PubSub type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubGenericResourceProperties.
func (d DaprPubSubGenericResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DaprPubSubBrokerProperties.marshalInternal(objectMap, DaprPubSubBrokerPropertiesKindGeneric)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubGenericResourceProperties.
func (d *DaprPubSubGenericResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "metadata":
				err = unpopulate(val, &d.Metadata)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DaprPubSubBrokerProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprSecretStoreList - Object that includes an array of DaprSecretStore and a possible link for next set
type DaprSecretStoreList struct {
	// The link used to fetch the next page of DaprSecretStore list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprSecretStore resources
	Value []*DaprSecretStoreResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreList.
func (d DaprSecretStoreList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DaprSecretStoreProperties - DaprSecretStore connector properties
type DaprSecretStoreProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; Radius kind for Dapr Secret Store
	Kind *DaprSecretStorePropertiesKind `json:"kind,omitempty"`

	// REQUIRED; Metadata for the Secret Store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; Dapr Secret Store type. These strings match the types defined in Dapr Component format: https://docs.dapr.io/reference/components-reference/supported-secret-stores/
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the dapr secret store connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreProperties.
func (d DaprSecretStoreProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprSecretStoreProperties.
func (d *DaprSecretStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, &d.Kind)
				delete(rawMsg, key)
		case "metadata":
				err = unpopulate(val, &d.Metadata)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &d.ProvisioningState)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprSecretStoreResource - DaprSecretStore connector
type DaprSecretStoreResource struct {
	TrackedResource
	// REQUIRED; DaprSecretStore connector properties
	Properties *DaprSecretStoreProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreResource.
func (d DaprSecretStoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprSecretStoreResource.
func (d *DaprSecretStoreResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &d.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &d.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprSecretStoresCreateOrUpdateOptions contains the optional parameters for the DaprSecretStores.CreateOrUpdate method.
type DaprSecretStoresCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresDeleteOptions contains the optional parameters for the DaprSecretStores.Delete method.
type DaprSecretStoresDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresGetOptions contains the optional parameters for the DaprSecretStores.Get method.
type DaprSecretStoresGetOptions struct {
	// placeholder for future optional parameters
}

// DaprSecretStoresListByRootScopeOptions contains the optional parameters for the DaprSecretStores.ListByRootScope method.
type DaprSecretStoresListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

type DaprStateStoreAzureTableStorageResourceProperties struct {
	DaprStateStoreProperties
	// REQUIRED; The resource id of the Azure Storage Table the daprStateStore resource is connected to.
	Resource *string `json:"resource,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreAzureTableStorageResourceProperties.
func (d DaprStateStoreAzureTableStorageResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DaprStateStoreProperties.marshalInternal(objectMap, DaprStateStorePropertiesKindStateAzureTablestorage)
	populate(objectMap, "resource", d.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreAzureTableStorageResourceProperties.
func (d *DaprStateStoreAzureTableStorageResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "resource":
				err = unpopulate(val, &d.Resource)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DaprStateStoreProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

type DaprStateStoreGenericResourceProperties struct {
	DaprStateStoreProperties
	// REQUIRED; Metadata for the state store resource. This should match the values specified in Dapr component spec
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// REQUIRED; Dapr StateStore type. These strings match the format used by Dapr Kubernetes configuration format.
	Type *string `json:"type,omitempty"`

	// REQUIRED; Dapr component version
	Version *string `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreGenericResourceProperties.
func (d DaprStateStoreGenericResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DaprStateStoreProperties.marshalInternal(objectMap, DaprStateStorePropertiesKindGeneric)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreGenericResourceProperties.
func (d *DaprStateStoreGenericResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "metadata":
				err = unpopulate(val, &d.Metadata)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DaprStateStoreProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprStateStoreList - Object that includes an array of DaprStateStore and a possible link for next set
type DaprStateStoreList struct {
	// The link used to fetch the next page of DaprStateStore list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of DaprStateStore resources
	Value []*DaprStateStoreResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreList.
func (d DaprStateStoreList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DaprStateStorePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDaprStateStoreProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DaprStateStoreAzureTableStorageResourceProperties, *DaprStateStoreGenericResourceProperties, *DaprStateStoreProperties,
// - *DaprStateStoreSqlServerResourceProperties
type DaprStateStorePropertiesClassification interface {
	// GetDaprStateStoreProperties returns the DaprStateStoreProperties content of the underlying type.
	GetDaprStateStoreProperties() *DaprStateStoreProperties
}

// DaprStateStoreProperties - DaprStateStore connector properties
type DaprStateStoreProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The Dapr StateStore kind
	Kind *DaprStateStorePropertiesKind `json:"kind,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the daprStateStore connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// GetDaprStateStoreProperties implements the DaprStateStorePropertiesClassification interface for type DaprStateStoreProperties.
func (d *DaprStateStoreProperties) GetDaprStateStoreProperties() *DaprStateStoreProperties { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreProperties.
func (d *DaprStateStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DaprStateStoreProperties) marshalInternal(objectMap map[string]interface{}, discValue DaprStateStorePropertiesKind) {
	d.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	d.Kind = &discValue
	objectMap["kind"] = d.Kind
	populate(objectMap, "provisioningState", d.ProvisioningState)
}

func (d *DaprStateStoreProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &d.ProvisioningState)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprStateStoreResource - DaprStateStore connector
type DaprStateStoreResource struct {
	TrackedResource
	// REQUIRED; DaprStateStore connector properties
	Properties DaprStateStorePropertiesClassification `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreResource.
func (d DaprStateStoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreResource.
func (d *DaprStateStoreResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				d.Properties, err = unmarshalDaprStateStorePropertiesClassification(val)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &d.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

type DaprStateStoreSQLServerResourceProperties struct {
	DaprStateStoreProperties
	// REQUIRED; The resource id of the Azure SQL Database the daprStateStore resource is connected to.
	Resource *string `json:"resource,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreSQLServerResourceProperties.
func (d DaprStateStoreSQLServerResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DaprStateStoreProperties.marshalInternal(objectMap, DaprStateStorePropertiesKindStateSqlserver)
	populate(objectMap, "resource", d.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreSQLServerResourceProperties.
func (d *DaprStateStoreSQLServerResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "resource":
				err = unpopulate(val, &d.Resource)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DaprStateStoreProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DaprStateStoresCreateOrUpdateOptions contains the optional parameters for the DaprStateStores.CreateOrUpdate method.
type DaprStateStoresCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresDeleteOptions contains the optional parameters for the DaprStateStores.Delete method.
type DaprStateStoresDeleteOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresGetOptions contains the optional parameters for the DaprStateStores.Get method.
type DaprStateStoresGetOptions struct {
	// placeholder for future optional parameters
}

// DaprStateStoresListByRootScopeOptions contains the optional parameters for the DaprStateStores.ListByRootScope method.
type DaprStateStoresListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ExtenderList - Object that includes an array of Extender and a possible link for next set
type ExtenderList struct {
	// The link used to fetch the next page of Extender list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Extender resources
	Value []*ExtenderResponseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderList.
func (e ExtenderList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// ExtenderProperties - Extender connector properties
type ExtenderProperties struct {
	ExtenderResponseProperties
	// The secret values for the given Extender resource
	Secrets map[string]interface{} `json:"secrets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderProperties.
func (e ExtenderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.ExtenderResponseProperties.marshalInternal(objectMap)
	populate(objectMap, "secrets", e.Secrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderProperties.
func (e *ExtenderProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secrets":
				err = unpopulate(val, &e.Secrets)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.ExtenderResponseProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ExtenderResource - Extender connector
type ExtenderResource struct {
	TrackedResource
	// REQUIRED; Extender connector properties
	Properties *ExtenderProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResource.
func (e ExtenderResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "systemData", e.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResource.
func (e *ExtenderResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &e.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &e.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ExtenderResponseProperties - Extender connector properties
type ExtenderResponseProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the extender connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResponseProperties.
func (e ExtenderResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResponseProperties.
func (e *ExtenderResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e ExtenderResponseProperties) marshalInternal(objectMap map[string]interface{}) {
	e.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", e.Application)
	populate(objectMap, "environment", e.Environment)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	if e.AdditionalProperties != nil {
		for key, val := range e.AdditionalProperties {
			objectMap[key] = val
		}
	}
}

func (e *ExtenderResponseProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &e.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &e.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &e.ProvisioningState)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
	var err error
		if e.AdditionalProperties == nil {
			e.AdditionalProperties = map[string]interface{}{}
		}
		if val != nil {
			var aux interface{}
			err = json.Unmarshal(val, &aux)
			e.AdditionalProperties[key] = aux
		}
		delete(rawMsg, key)
		if err != nil {
			return err
		}
	}
	return nil
}

// ExtenderResponseResource - Extender connector
type ExtenderResponseResource struct {
	TrackedResource
	// REQUIRED; Extender connector properties
	Properties *ExtenderResponseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResponseResource.
func (e ExtenderResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "systemData", e.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResponseResource.
func (e *ExtenderResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &e.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &e.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ExtendersCreateOrUpdateOptions contains the optional parameters for the Extenders.CreateOrUpdate method.
type ExtendersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExtendersDeleteOptions contains the optional parameters for the Extenders.Delete method.
type ExtendersDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExtendersGetOptions contains the optional parameters for the Extenders.Get method.
type ExtendersGetOptions struct {
	// placeholder for future optional parameters
}

// ExtendersListByRootScopeOptions contains the optional parameters for the Extenders.ListByRootScope method.
type ExtendersListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// ExtendersListSecretsOptions contains the optional parameters for the Extenders.ListSecrets method.
type ExtendersListSecretsOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabaseList - Object that includes an array of MongoDatabase and a possible link for next set
type MongoDatabaseList struct {
	// The link used to fetch the next page of MongoDatabase list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of MongoDatabase resources
	Value []*MongoDatabaseResponseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseList.
func (m MongoDatabaseList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MongoDatabaseProperties - MongoDatabase connector properties
type MongoDatabaseProperties struct {
	MongoDatabaseResponseProperties
	// Secrets values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseProperties.
func (m MongoDatabaseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.MongoDatabaseResponseProperties.marshalInternal(objectMap)
	populate(objectMap, "secrets", m.Secrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseProperties.
func (m *MongoDatabaseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secrets":
				err = unpopulate(val, &m.Secrets)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := m.MongoDatabaseResponseProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// MongoDatabaseResource - MongoDatabase connector
type MongoDatabaseResource struct {
	TrackedResource
	// REQUIRED; MongoDatabase connector properties
	Properties *MongoDatabaseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResource.
func (m MongoDatabaseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResource.
func (m *MongoDatabaseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &m.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &m.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := m.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// MongoDatabaseResponseProperties - MongoDatabase connector properties
type MongoDatabaseResponseProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// Fully qualified resource ID of a supported resource with Mongo API to use for this connector
	Resource *string `json:"resource,omitempty"`

	// READ-ONLY; Provisioning state of the mongo database connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResponseProperties.
func (m MongoDatabaseResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResponseProperties.
func (m *MongoDatabaseResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m MongoDatabaseResponseProperties) marshalInternal(objectMap map[string]interface{}) {
	m.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", m.Application)
	populate(objectMap, "environment", m.Environment)
	populate(objectMap, "host", m.Host)
	populate(objectMap, "port", m.Port)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "resource", m.Resource)
}

func (m *MongoDatabaseResponseProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &m.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &m.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, &m.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, &m.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &m.ProvisioningState)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, &m.Resource)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := m.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// MongoDatabaseResponseResource - MongoDatabase connector
type MongoDatabaseResponseResource struct {
	TrackedResource
	// REQUIRED; MongoDatabase connector properties
	Properties *MongoDatabaseResponseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResponseResource.
func (m MongoDatabaseResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResponseResource.
func (m *MongoDatabaseResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &m.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &m.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := m.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// MongoDatabaseSecrets - The secret values for the given MongoDatabase resource
type MongoDatabaseSecrets struct {
	// Connection string used to connect to the target Mongo database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Mongo database
	Password *string `json:"password,omitempty"`

	// Username to use when connecting to the target Mongo database
	Username *string `json:"username,omitempty"`
}

// MongoDatabasesCreateOrUpdateOptions contains the optional parameters for the MongoDatabases.CreateOrUpdate method.
type MongoDatabasesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesDeleteOptions contains the optional parameters for the MongoDatabases.Delete method.
type MongoDatabasesDeleteOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesGetOptions contains the optional parameters for the MongoDatabases.Get method.
type MongoDatabasesGetOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesListByRootScopeOptions contains the optional parameters for the MongoDatabases.ListByRootScope method.
type MongoDatabasesListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesListSecretsOptions contains the optional parameters for the MongoDatabases.ListSecrets method.
type MongoDatabasesListSecretsOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueueList - Object that includes an array of RabbitMQMessageQueue and a possible link for next set
type RabbitMQMessageQueueList struct {
	// The link used to fetch the next page of RabbitMQMessageQueue list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of RabbitMQMessageQueue resources
	Value []*RabbitMQMessageQueueResponseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueList.
func (r RabbitMQMessageQueueList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RabbitMQMessageQueueProperties - RabbitMQMessageQueue connector properties
type RabbitMQMessageQueueProperties struct {
	RabbitMQMessageQueueResponseProperties
	// Secrets provided by resources,
	Secrets *RabbitMQSecrets `json:"secrets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueProperties.
func (r RabbitMQMessageQueueProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.RabbitMQMessageQueueResponseProperties.marshalInternal(objectMap)
	populate(objectMap, "secrets", r.Secrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueProperties.
func (r *RabbitMQMessageQueueProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secrets":
				err = unpopulate(val, &r.Secrets)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.RabbitMQMessageQueueResponseProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RabbitMQMessageQueueResource - RabbitMQMessageQueue connector
type RabbitMQMessageQueueResource struct {
	TrackedResource
	// REQUIRED; RabbitMQMessageQueue connector properties
	Properties *RabbitMQMessageQueueProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResource.
func (r RabbitMQMessageQueueResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResource.
func (r *RabbitMQMessageQueueResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &r.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RabbitMQMessageQueueResponseProperties - RabbitMQMessageQueue connector response properties
type RabbitMQMessageQueueResponseProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The name of the queue
	Queue *string `json:"queue,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// READ-ONLY; Provisioning state of the rabbitMQ message queue connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResponseProperties.
func (r RabbitMQMessageQueueResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResponseProperties.
func (r *RabbitMQMessageQueueResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r RabbitMQMessageQueueResponseProperties) marshalInternal(objectMap map[string]interface{}) {
	r.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "queue", r.Queue)
}

func (r *RabbitMQMessageQueueResponseProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &r.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &r.ProvisioningState)
				delete(rawMsg, key)
		case "queue":
				err = unpopulate(val, &r.Queue)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RabbitMQMessageQueueResponseResource - RabbitMQMessageQueue connector
type RabbitMQMessageQueueResponseResource struct {
	TrackedResource
	// REQUIRED; RabbitMQMessageQueue connector response properties
	Properties *RabbitMQMessageQueueResponseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResponseResource.
func (r RabbitMQMessageQueueResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResponseResource.
func (r *RabbitMQMessageQueueResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &r.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RabbitMQMessageQueuesCreateOrUpdateOptions contains the optional parameters for the RabbitMQMessageQueues.CreateOrUpdate method.
type RabbitMQMessageQueuesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesDeleteOptions contains the optional parameters for the RabbitMQMessageQueues.Delete method.
type RabbitMQMessageQueuesDeleteOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesGetOptions contains the optional parameters for the RabbitMQMessageQueues.Get method.
type RabbitMQMessageQueuesGetOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesListByRootScopeOptions contains the optional parameters for the RabbitMQMessageQueues.ListByRootScope method.
type RabbitMQMessageQueuesListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQMessageQueuesListSecretsOptions contains the optional parameters for the RabbitMQMessageQueues.ListSecrets method.
type RabbitMQMessageQueuesListSecretsOptions struct {
	// placeholder for future optional parameters
}

// RabbitMQSecrets - The secret values for the given RabbitMQMessageQueue resource
type RabbitMQSecrets struct {
	// The connection string used to connect to this RabbitMQ instance
	ConnectionString *string `json:"connectionString,omitempty"`
}

// RedisCacheList - Object that includes an array of RedisCache and a possible link for next set
type RedisCacheList struct {
	// The link used to fetch the next page of RedisCache list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of RedisCache resources
	Value []*RedisCacheResponseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheList.
func (r RedisCacheList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RedisCacheProperties - RedisCache connector properties
type RedisCacheProperties struct {
	RedisCacheResponseProperties
	// The secret values for the given RedisCache resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheProperties.
func (r RedisCacheProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.RedisCacheResponseProperties.marshalInternal(objectMap)
	populate(objectMap, "secrets", r.Secrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheProperties.
func (r *RedisCacheProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secrets":
				err = unpopulate(val, &r.Secrets)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.RedisCacheResponseProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RedisCacheResource - RedisCache connector
type RedisCacheResource struct {
	TrackedResource
	// REQUIRED; RedisCache connector properties
	Properties *RedisCacheProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResource.
func (r RedisCacheResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResource.
func (r *RedisCacheResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &r.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RedisCacheResponseProperties - RedisCache connector properties
type RedisCacheResponseProperties struct {
	BasicResourceProperties
	// REQUIRED; Fully qualified resource ID for the environment that the connector is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the connector is consumed by
	Application *string `json:"application,omitempty"`

	// The host name of the target redis cache
	Host *string `json:"host,omitempty"`

	// The port value of the target redis cache
	Port *int32 `json:"port,omitempty"`

	// Fully qualified resource ID of a supported resource with Redis API to use for this connector
	Resource *string `json:"resource,omitempty"`

	// READ-ONLY; Provisioning state of the redis cache connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResponseProperties.
func (r RedisCacheResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResponseProperties.
func (r *RedisCacheResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r RedisCacheResponseProperties) marshalInternal(objectMap map[string]interface{}) {
	r.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "host", r.Host)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "resource", r.Resource)
}

func (r *RedisCacheResponseProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &r.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, &r.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, &r.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &r.ProvisioningState)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, &r.Resource)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RedisCacheResponseResource - RedisCache connector
type RedisCacheResponseResource struct {
	TrackedResource
	// REQUIRED; RedisCache connector properties
	Properties *RedisCacheResponseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResponseResource.
func (r RedisCacheResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResponseResource.
func (r *RedisCacheResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &r.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RedisCacheSecrets - The secret values for the given RedisCache resource
type RedisCacheSecrets struct {
	// The connection string used to connect to the redis cache
	ConnectionString *string `json:"connectionString,omitempty"`

	// The password for this Redis instance
	Password *string `json:"password,omitempty"`
}

// RedisCachesCreateOrUpdateOptions contains the optional parameters for the RedisCaches.CreateOrUpdate method.
type RedisCachesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesDeleteOptions contains the optional parameters for the RedisCaches.Delete method.
type RedisCachesDeleteOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesGetOptions contains the optional parameters for the RedisCaches.Get method.
type RedisCachesGetOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesListByRootScopeOptions contains the optional parameters for the RedisCaches.ListByRootScope method.
type RedisCachesListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesListSecretsOptions contains the optional parameters for the RedisCaches.ListSecrets method.
type RedisCachesListSecretsOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

func (r *Resource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, &r.ID)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, &r.Name)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ResourceStatus - Status of a resource.
type ResourceStatus struct {
	OutputResources []map[string]interface{} `json:"outputResources,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceStatus.
func (r ResourceStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "outputResources", r.OutputResources)
	return json.Marshal(objectMap)
}

// SQLDatabaseList - Object that includes an array of SQLDatabase and a possible link for next set
type SQLDatabaseList struct {
	// The link used to fetch the next page of SQLDatabase list.
	NextLink *string `json:"nextLink,omitempty"`

	// List of SQLDatabase resources
	Value []*SQLDatabaseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseList.
func (s SQLDatabaseList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLDatabaseProperties - SQLDatabse connector properties
type SQLDatabaseProperties struct {
	BasicResourceProperties
	// REQUIRED; The resource id of the environment linked to the sqlDatabase connector
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the environment that the connector is linked to
	Application *string `json:"application,omitempty"`

	// The name of the SQL database.
	Database *string `json:"database,omitempty"`

	// Fully qualified resource ID of a supported resource with SQL API to use for this connector
	Resource *string `json:"resource,omitempty"`

	// The fully qualified domain name of the SQL database.
	Server *string `json:"server,omitempty"`

	// READ-ONLY; Provisioning state of the SQL database connector at the time the operation was called
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseProperties.
func (s SQLDatabaseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.BasicResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "application", s.Application)
	populate(objectMap, "database", s.Database)
	populate(objectMap, "environment", s.Environment)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "resource", s.Resource)
	populate(objectMap, "server", s.Server)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDatabaseProperties.
func (s *SQLDatabaseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, &s.Application)
				delete(rawMsg, key)
		case "database":
				err = unpopulate(val, &s.Database)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, &s.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, &s.ProvisioningState)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, &s.Resource)
				delete(rawMsg, key)
		case "server":
				err = unpopulate(val, &s.Server)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.BasicResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDatabaseResource - SQLDatabse connector
type SQLDatabaseResource struct {
	TrackedResource
	// REQUIRED; SQLDatabse connector properties
	Properties *SQLDatabaseProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseResource.
func (s SQLDatabaseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDatabaseResource.
func (s *SQLDatabaseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
				err = unpopulate(val, &s.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, &s.SystemData)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDatabasesCreateOrUpdateOptions contains the optional parameters for the SQLDatabases.CreateOrUpdate method.
type SQLDatabasesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesDeleteOptions contains the optional parameters for the SQLDatabases.Delete method.
type SQLDatabasesDeleteOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesGetOptions contains the optional parameters for the SQLDatabases.Get method.
type SQLDatabasesGetOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesListByRootScopeOptions contains the optional parameters for the SQLDatabases.ListByRootScope method.
type SQLDatabasesListByRootScopeOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdAt", (*timeRFC3339)(s.CreatedAt))
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populate(objectMap, "lastModifiedAt", (*timeRFC3339)(s.LastModifiedAt))
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				s.CreatedAt = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "createdBy":
				err = unpopulate(val, &s.CreatedBy)
				delete(rawMsg, key)
		case "createdByType":
				err = unpopulate(val, &s.CreatedByType)
				delete(rawMsg, key)
		case "lastModifiedAt":
				var aux timeRFC3339
				err = unpopulate(val, &aux)
				s.LastModifiedAt = (*time.Time)(&aux)
				delete(rawMsg, key)
		case "lastModifiedBy":
				err = unpopulate(val, &s.LastModifiedBy)
				delete(rawMsg, key)
		case "lastModifiedByType":
				err = unpopulate(val, &s.LastModifiedByType)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TrackedResource.
func (t *TrackedResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func (t *TrackedResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
				err = unpopulate(val, &t.Location)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, &t.Tags)
				delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := t.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}

