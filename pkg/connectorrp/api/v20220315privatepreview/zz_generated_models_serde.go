//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type BasicResourceProperties.
func (b BasicResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "status", b.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BasicResourceProperties.
func (b *BasicResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "status":
				err = unpopulate(val, "Status", &b.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteList.
func (d DaprInvokeHTTPRouteList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprInvokeHTTPRouteList.
func (d *DaprInvokeHTTPRouteList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &d.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &d.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteProperties.
func (d DaprInvokeHTTPRouteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appId", d.AppID)
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "recipe", d.Recipe)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprInvokeHTTPRouteProperties.
func (d *DaprInvokeHTTPRouteProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appId":
				err = unpopulate(val, "AppID", &d.AppID)
				delete(rawMsg, key)
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &d.Recipe)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprInvokeHTTPRouteResource.
func (d DaprInvokeHTTPRouteResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprInvokeHTTPRouteResource.
func (d *DaprInvokeHTTPRouteResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &d.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &d.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &d.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &d.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &d.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &d.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubAzureServiceBusResourceProperties.
func (d DaprPubSubAzureServiceBusResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = DaprPubSubBrokerPropertiesKindPubsubAzureServicebus
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "recipe", d.Recipe)
	populate(objectMap, "resource", d.Resource)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "topic", d.Topic)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubAzureServiceBusResourceProperties.
func (d *DaprPubSubAzureServiceBusResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &d.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &d.Resource)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		case "topic":
				err = unpopulate(val, "Topic", &d.Topic)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubBrokerList.
func (d DaprPubSubBrokerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubBrokerList.
func (d *DaprPubSubBrokerList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &d.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &d.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubBrokerProperties.
func (d DaprPubSubBrokerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = d.Kind
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "recipe", d.Recipe)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "topic", d.Topic)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubBrokerProperties.
func (d *DaprPubSubBrokerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &d.Recipe)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		case "topic":
				err = unpopulate(val, "Topic", &d.Topic)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubBrokerResource.
func (d DaprPubSubBrokerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubBrokerResource.
func (d *DaprPubSubBrokerResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &d.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &d.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &d.Name)
				delete(rawMsg, key)
		case "properties":
				d.Properties, err = unmarshalDaprPubSubBrokerPropertiesClassification(val)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &d.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &d.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprPubSubGenericResourceProperties.
func (d DaprPubSubGenericResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = DaprPubSubBrokerPropertiesKindGeneric
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "recipe", d.Recipe)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "topic", d.Topic)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprPubSubGenericResourceProperties.
func (d *DaprPubSubGenericResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "metadata":
				err = unpopulate(val, "Metadata", &d.Metadata)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &d.Recipe)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		case "topic":
				err = unpopulate(val, "Topic", &d.Topic)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, "Version", &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreList.
func (d DaprSecretStoreList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprSecretStoreList.
func (d *DaprSecretStoreList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &d.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &d.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreProperties.
func (d DaprSecretStoreProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "secretStoreName", d.SecretStoreName)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprSecretStoreProperties.
func (d *DaprSecretStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "metadata":
				err = unpopulate(val, "Metadata", &d.Metadata)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "secretStoreName":
				err = unpopulate(val, "SecretStoreName", &d.SecretStoreName)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, "Version", &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprSecretStoreResource.
func (d DaprSecretStoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprSecretStoreResource.
func (d *DaprSecretStoreResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &d.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &d.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &d.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &d.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &d.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &d.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreAzureTableStorageResourceProperties.
func (d DaprStateStoreAzureTableStorageResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = DaprStateStorePropertiesKindStateAzureTablestorage
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "resource", d.Resource)
	populate(objectMap, "stateStoreName", d.StateStoreName)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreAzureTableStorageResourceProperties.
func (d *DaprStateStoreAzureTableStorageResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &d.Resource)
				delete(rawMsg, key)
		case "stateStoreName":
				err = unpopulate(val, "StateStoreName", &d.StateStoreName)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreGenericResourceProperties.
func (d DaprStateStoreGenericResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = DaprStateStorePropertiesKindGeneric
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "stateStoreName", d.StateStoreName)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreGenericResourceProperties.
func (d *DaprStateStoreGenericResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "metadata":
				err = unpopulate(val, "Metadata", &d.Metadata)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "stateStoreName":
				err = unpopulate(val, "StateStoreName", &d.StateStoreName)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		case "version":
				err = unpopulate(val, "Version", &d.Version)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreList.
func (d DaprStateStoreList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreList.
func (d *DaprStateStoreList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &d.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &d.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreProperties.
func (d DaprStateStoreProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = d.Kind
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "stateStoreName", d.StateStoreName)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreProperties.
func (d *DaprStateStoreProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "stateStoreName":
				err = unpopulate(val, "StateStoreName", &d.StateStoreName)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreResource.
func (d DaprStateStoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreResource.
func (d *DaprStateStoreResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &d.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &d.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &d.Name)
				delete(rawMsg, key)
		case "properties":
				d.Properties, err = unmarshalDaprStateStorePropertiesClassification(val)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &d.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &d.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &d.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DaprStateStoreSQLServerResourceProperties.
func (d DaprStateStoreSQLServerResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", d.Application)
	populate(objectMap, "environment", d.Environment)
	objectMap["kind"] = DaprStateStorePropertiesKindStateSqlserver
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "resource", d.Resource)
	populate(objectMap, "stateStoreName", d.StateStoreName)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DaprStateStoreSQLServerResourceProperties.
func (d *DaprStateStoreSQLServerResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &d.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &d.Environment)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &d.Kind)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &d.Resource)
				delete(rawMsg, key)
		case "stateStoreName":
				err = unpopulate(val, "StateStoreName", &d.StateStoreName)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &d.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorAdditionalInfo.
func (e ErrorAdditionalInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "info", e.Info)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorAdditionalInfo.
func (e *ErrorAdditionalInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "info":
				err = unpopulate(val, "Info", &e.Info)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &e.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorDetail.
func (e *ErrorDetail) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalInfo":
				err = unpopulate(val, "AdditionalInfo", &e.AdditionalInfo)
				delete(rawMsg, key)
		case "code":
				err = unpopulate(val, "Code", &e.Code)
				delete(rawMsg, key)
		case "details":
				err = unpopulate(val, "Details", &e.Details)
				delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &e.Message)
				delete(rawMsg, key)
		case "target":
				err = unpopulate(val, "Target", &e.Target)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponse.
func (e ErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", e.Error)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ErrorResponse.
func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
				err = unpopulate(val, "Error", &e.Error)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderList.
func (e ExtenderList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderList.
func (e *ExtenderList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &e.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &e.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderProperties.
func (e ExtenderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", e.Application)
	populate(objectMap, "environment", e.Environment)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "secrets", e.Secrets)
	populate(objectMap, "status", e.Status)
	if e.AdditionalProperties != nil {
		for key, val := range e.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderProperties.
func (e *ExtenderProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &e.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &e.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &e.ProvisioningState)
				delete(rawMsg, key)
		case "secrets":
				err = unpopulate(val, "Secrets", &e.Secrets)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &e.Status)
				delete(rawMsg, key)
		default:
			if e.AdditionalProperties == nil {
				e.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				e.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResource.
func (e ExtenderResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "systemData", e.SystemData)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResource.
func (e *ExtenderResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &e.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &e.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &e.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &e.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &e.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &e.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &e.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResponseProperties.
func (e ExtenderResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", e.Application)
	populate(objectMap, "environment", e.Environment)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "status", e.Status)
	if e.AdditionalProperties != nil {
		for key, val := range e.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResponseProperties.
func (e *ExtenderResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &e.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &e.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &e.ProvisioningState)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &e.Status)
				delete(rawMsg, key)
		default:
			if e.AdditionalProperties == nil {
				e.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				e.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ExtenderResponseResource.
func (e ExtenderResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "systemData", e.SystemData)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExtenderResponseResource.
func (e *ExtenderResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &e.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &e.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &e.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &e.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &e.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &e.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &e.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseList.
func (m MongoDatabaseList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseList.
func (m *MongoDatabaseList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &m.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &m.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseProperties.
func (m MongoDatabaseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", m.Application)
	populate(objectMap, "database", m.Database)
	populate(objectMap, "environment", m.Environment)
	populate(objectMap, "host", m.Host)
	populate(objectMap, "port", m.Port)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "recipe", m.Recipe)
	populate(objectMap, "resource", m.Resource)
	populate(objectMap, "secrets", m.Secrets)
	populate(objectMap, "status", m.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseProperties.
func (m *MongoDatabaseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &m.Application)
				delete(rawMsg, key)
		case "database":
				err = unpopulate(val, "Database", &m.Database)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &m.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, "Host", &m.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, "Port", &m.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &m.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &m.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &m.Resource)
				delete(rawMsg, key)
		case "secrets":
				err = unpopulate(val, "Secrets", &m.Secrets)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &m.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResource.
func (m MongoDatabaseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResource.
func (m *MongoDatabaseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &m.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &m.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &m.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &m.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &m.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &m.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &m.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResponseProperties.
func (m MongoDatabaseResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", m.Application)
	populate(objectMap, "database", m.Database)
	populate(objectMap, "environment", m.Environment)
	populate(objectMap, "host", m.Host)
	populate(objectMap, "port", m.Port)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "recipe", m.Recipe)
	populate(objectMap, "resource", m.Resource)
	populate(objectMap, "status", m.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResponseProperties.
func (m *MongoDatabaseResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &m.Application)
				delete(rawMsg, key)
		case "database":
				err = unpopulate(val, "Database", &m.Database)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &m.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, "Host", &m.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, "Port", &m.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &m.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &m.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &m.Resource)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &m.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseResponseResource.
func (m MongoDatabaseResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseResponseResource.
func (m *MongoDatabaseResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &m.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &m.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &m.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &m.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &m.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &m.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &m.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDatabaseSecrets.
func (m MongoDatabaseSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionString", m.ConnectionString)
	populate(objectMap, "password", m.Password)
	populate(objectMap, "username", m.Username)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MongoDatabaseSecrets.
func (m *MongoDatabaseSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionString":
				err = unpopulate(val, "ConnectionString", &m.ConnectionString)
				delete(rawMsg, key)
		case "password":
				err = unpopulate(val, "Password", &m.Password)
				delete(rawMsg, key)
		case "username":
				err = unpopulate(val, "Username", &m.Username)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueList.
func (r RabbitMQMessageQueueList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueList.
func (r *RabbitMQMessageQueueList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &r.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &r.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueProperties.
func (r RabbitMQMessageQueueProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "queue", r.Queue)
	populate(objectMap, "secrets", r.Secrets)
	populate(objectMap, "status", r.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueProperties.
func (r *RabbitMQMessageQueueProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &r.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &r.ProvisioningState)
				delete(rawMsg, key)
		case "queue":
				err = unpopulate(val, "Queue", &r.Queue)
				delete(rawMsg, key)
		case "secrets":
				err = unpopulate(val, "Secrets", &r.Secrets)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &r.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResource.
func (r RabbitMQMessageQueueResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResource.
func (r *RabbitMQMessageQueueResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &r.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &r.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &r.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResponseProperties.
func (r RabbitMQMessageQueueResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "queue", r.Queue)
	populate(objectMap, "status", r.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResponseProperties.
func (r *RabbitMQMessageQueueResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &r.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &r.ProvisioningState)
				delete(rawMsg, key)
		case "queue":
				err = unpopulate(val, "Queue", &r.Queue)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &r.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQMessageQueueResponseResource.
func (r RabbitMQMessageQueueResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQMessageQueueResponseResource.
func (r *RabbitMQMessageQueueResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &r.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &r.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &r.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RabbitMQSecrets.
func (r RabbitMQSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionString", r.ConnectionString)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RabbitMQSecrets.
func (r *RabbitMQSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionString":
				err = unpopulate(val, "ConnectionString", &r.ConnectionString)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Recipe.
func (r Recipe) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", r.Name)
	populate(objectMap, "parameters", r.Parameters)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Recipe.
func (r *Recipe) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "parameters":
				err = unpopulate(val, "Parameters", &r.Parameters)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheList.
func (r RedisCacheList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheList.
func (r *RedisCacheList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &r.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &r.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheProperties.
func (r RedisCacheProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "host", r.Host)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "recipe", r.Recipe)
	populate(objectMap, "resource", r.Resource)
	populate(objectMap, "secrets", r.Secrets)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "username", r.Username)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheProperties.
func (r *RedisCacheProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &r.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, "Host", &r.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, "Port", &r.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &r.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &r.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &r.Resource)
				delete(rawMsg, key)
		case "secrets":
				err = unpopulate(val, "Secrets", &r.Secrets)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &r.Status)
				delete(rawMsg, key)
		case "username":
				err = unpopulate(val, "Username", &r.Username)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResource.
func (r RedisCacheResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResource.
func (r *RedisCacheResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &r.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &r.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &r.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResponseProperties.
func (r RedisCacheResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", r.Application)
	populate(objectMap, "environment", r.Environment)
	populate(objectMap, "host", r.Host)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "recipe", r.Recipe)
	populate(objectMap, "resource", r.Resource)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "username", r.Username)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResponseProperties.
func (r *RedisCacheResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &r.Application)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &r.Environment)
				delete(rawMsg, key)
		case "host":
				err = unpopulate(val, "Host", &r.Host)
				delete(rawMsg, key)
		case "port":
				err = unpopulate(val, "Port", &r.Port)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &r.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &r.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &r.Resource)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &r.Status)
				delete(rawMsg, key)
		case "username":
				err = unpopulate(val, "Username", &r.Username)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheResponseResource.
func (r RedisCacheResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheResponseResource.
func (r *RedisCacheResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &r.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &r.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &r.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &r.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedisCacheSecrets.
func (r RedisCacheSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionString", r.ConnectionString)
	populate(objectMap, "password", r.Password)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedisCacheSecrets.
func (r *RedisCacheSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionString":
				err = unpopulate(val, "ConnectionString", &r.ConnectionString)
				delete(rawMsg, key)
		case "password":
				err = unpopulate(val, "Password", &r.Password)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &r.ID)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &r.Name)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &r.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResourceStatus.
func (r ResourceStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "outputResources", r.OutputResources)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceStatus.
func (r *ResourceStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "outputResources":
				err = unpopulate(val, "OutputResources", &r.OutputResources)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseList.
func (s SQLDatabaseList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDatabaseList.
func (s *SQLDatabaseList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &s.NextLink)
				delete(rawMsg, key)
		case "value":
				err = unpopulate(val, "Value", &s.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseProperties.
func (s SQLDatabaseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "application", s.Application)
	populate(objectMap, "database", s.Database)
	populate(objectMap, "environment", s.Environment)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "recipe", s.Recipe)
	populate(objectMap, "resource", s.Resource)
	populate(objectMap, "server", s.Server)
	populate(objectMap, "status", s.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDatabaseProperties.
func (s *SQLDatabaseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "application":
				err = unpopulate(val, "Application", &s.Application)
				delete(rawMsg, key)
		case "database":
				err = unpopulate(val, "Database", &s.Database)
				delete(rawMsg, key)
		case "environment":
				err = unpopulate(val, "Environment", &s.Environment)
				delete(rawMsg, key)
		case "provisioningState":
				err = unpopulate(val, "ProvisioningState", &s.ProvisioningState)
				delete(rawMsg, key)
		case "recipe":
				err = unpopulate(val, "Recipe", &s.Recipe)
				delete(rawMsg, key)
		case "resource":
				err = unpopulate(val, "Resource", &s.Resource)
				delete(rawMsg, key)
		case "server":
				err = unpopulate(val, "Server", &s.Server)
				delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &s.Status)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseResource.
func (s SQLDatabaseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDatabaseResource.
func (s *SQLDatabaseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &s.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &s.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &s.Name)
				delete(rawMsg, key)
		case "properties":
				err = unpopulate(val, "Properties", &s.Properties)
				delete(rawMsg, key)
		case "systemData":
				err = unpopulate(val, "SystemData", &s.SystemData)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &s.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &s.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
				err = unpopulateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
				delete(rawMsg, key)
		case "createdBy":
				err = unpopulate(val, "CreatedBy", &s.CreatedBy)
				delete(rawMsg, key)
		case "createdByType":
				err = unpopulate(val, "CreatedByType", &s.CreatedByType)
				delete(rawMsg, key)
		case "lastModifiedAt":
				err = unpopulateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
				delete(rawMsg, key)
		case "lastModifiedBy":
				err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
				delete(rawMsg, key)
		case "lastModifiedByType":
				err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TrackedResource.
func (t *TrackedResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &t.ID)
				delete(rawMsg, key)
		case "location":
				err = unpopulate(val, "Location", &t.Location)
				delete(rawMsg, key)
		case "name":
				err = unpopulate(val, "Name", &t.Name)
				delete(rawMsg, key)
		case "tags":
				err = unpopulate(val, "Tags", &t.Tags)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &t.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

