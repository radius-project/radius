//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DaprInvokeHTTPRoutesClient contains the methods for the DaprInvokeHTTPRoutes group.
// Don't use this type directly, use NewDaprInvokeHTTPRoutesClient() instead.
type DaprInvokeHTTPRoutesClient struct {
	ep string
	pl runtime.Pipeline
	rootScope string
}

// NewDaprInvokeHTTPRoutesClient creates a new instance of DaprInvokeHTTPRoutesClient with the specified values.
func NewDaprInvokeHTTPRoutesClient(con *arm.Connection, rootScope string) *DaprInvokeHTTPRoutesClient {
	return &DaprInvokeHTTPRoutesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), rootScope: rootScope}
}

// CreateOrUpdate - Creates or updates a DaprInvokeHttpRoute resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprInvokeHTTPRoutesClient) CreateOrUpdate(ctx context.Context, daprInvokeHTTPRouteName string, daprInvokeHTTPRouteParameters DaprInvokeHTTPRouteResource, options *DaprInvokeHTTPRoutesCreateOrUpdateOptions) (DaprInvokeHTTPRoutesCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, daprInvokeHTTPRouteName, daprInvokeHTTPRouteParameters, options)
	if err != nil {
		return DaprInvokeHTTPRoutesCreateOrUpdateResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprInvokeHTTPRoutesCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return DaprInvokeHTTPRoutesCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DaprInvokeHTTPRoutesClient) createOrUpdateCreateRequest(ctx context.Context, daprInvokeHTTPRouteName string, daprInvokeHTTPRouteParameters DaprInvokeHTTPRouteResource, options *DaprInvokeHTTPRoutesCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Connector/daprInvokeHttpRoutes/{daprInvokeHttpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", url.PathEscape(client.rootScope))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, daprInvokeHTTPRouteParameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DaprInvokeHTTPRoutesClient) createOrUpdateHandleResponse(resp *http.Response) (DaprInvokeHTTPRoutesCreateOrUpdateResponse, error) {
	result := DaprInvokeHTTPRoutesCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprInvokeHTTPRouteResource); err != nil {
		return DaprInvokeHTTPRoutesCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *DaprInvokeHTTPRoutesClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes an existing daprInvokeHttpRoute resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprInvokeHTTPRoutesClient) Delete(ctx context.Context, daprInvokeHTTPRouteName string, options *DaprInvokeHTTPRoutesDeleteOptions) (DaprInvokeHTTPRoutesDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, daprInvokeHTTPRouteName, options)
	if err != nil {
		return DaprInvokeHTTPRoutesDeleteResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprInvokeHTTPRoutesDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return DaprInvokeHTTPRoutesDeleteResponse{}, client.deleteHandleError(resp)
	}
	return DaprInvokeHTTPRoutesDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DaprInvokeHTTPRoutesClient) deleteCreateRequest(ctx context.Context, daprInvokeHTTPRouteName string, options *DaprInvokeHTTPRoutesDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Connector/daprInvokeHttpRoutes/{daprInvokeHttpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", url.PathEscape(client.rootScope))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DaprInvokeHTTPRoutesClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Retrieves information about a daprInvokeHttpRoute resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprInvokeHTTPRoutesClient) Get(ctx context.Context, daprInvokeHTTPRouteName string, options *DaprInvokeHTTPRoutesGetOptions) (DaprInvokeHTTPRoutesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, daprInvokeHTTPRouteName, options)
	if err != nil {
		return DaprInvokeHTTPRoutesGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprInvokeHTTPRoutesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprInvokeHTTPRoutesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DaprInvokeHTTPRoutesClient) getCreateRequest(ctx context.Context, daprInvokeHTTPRouteName string, options *DaprInvokeHTTPRoutesGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Connector/daprInvokeHttpRoutes/{daprInvokeHttpRouteName}"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", url.PathEscape(client.rootScope))
	if daprInvokeHTTPRouteName == "" {
		return nil, errors.New("parameter daprInvokeHTTPRouteName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprInvokeHttpRouteName}", url.PathEscape(daprInvokeHTTPRouteName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DaprInvokeHTTPRoutesClient) getHandleResponse(resp *http.Response) (DaprInvokeHTTPRoutesGetResponse, error) {
	result := DaprInvokeHTTPRoutesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprInvokeHTTPRouteResource); err != nil {
		return DaprInvokeHTTPRoutesGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *DaprInvokeHTTPRoutesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByRootScope - Lists information about all daprInvokeHttpRoute resources in the given root scope
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprInvokeHTTPRoutesClient) ListByRootScope(options *DaprInvokeHTTPRoutesListByRootScopeOptions) (*DaprInvokeHTTPRoutesListByRootScopePager) {
	return &DaprInvokeHTTPRoutesListByRootScopePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByRootScopeCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DaprInvokeHTTPRoutesListByRootScopeResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DaprInvokeHTTPRouteList.NextLink)
		},
	}
}

// listByRootScopeCreateRequest creates the ListByRootScope request.
func (client *DaprInvokeHTTPRoutesClient) listByRootScopeCreateRequest(ctx context.Context, options *DaprInvokeHTTPRoutesListByRootScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Connector/daprInvokeHttpRoutes"
	if client.rootScope == "" {
		return nil, errors.New("parameter client.rootScope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", url.PathEscape(client.rootScope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByRootScopeHandleResponse handles the ListByRootScope response.
func (client *DaprInvokeHTTPRoutesClient) listByRootScopeHandleResponse(resp *http.Response) (DaprInvokeHTTPRoutesListByRootScopeResponse, error) {
	result := DaprInvokeHTTPRoutesListByRootScopeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprInvokeHTTPRouteList); err != nil {
		return DaprInvokeHTTPRoutesListByRootScopeResponse{}, err
	}
	return result, nil
}

// listByRootScopeHandleError handles the ListByRootScope error response.
func (client *DaprInvokeHTTPRoutesClient) listByRootScopeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

