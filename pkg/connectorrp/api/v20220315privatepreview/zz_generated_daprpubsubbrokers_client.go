//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20220315privatepreview

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DaprPubSubBrokersClient contains the methods for the DaprPubSubBrokers group.
// Don't use this type directly, use NewDaprPubSubBrokersClient() instead.
type DaprPubSubBrokersClient struct {
	ep string
	pl runtime.Pipeline
	subscriptionID string
}

// NewDaprPubSubBrokersClient creates a new instance of DaprPubSubBrokersClient with the specified values.
func NewDaprPubSubBrokersClient(con *arm.Connection, subscriptionID string) *DaprPubSubBrokersClient {
	return &DaprPubSubBrokersClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// CreateOrUpdate - Creates or updates a DaprPubSubBroker resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprPubSubBrokersClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, daprPubSubBrokerParameters DaprPubSubBrokerResource, options *DaprPubSubBrokersCreateOrUpdateOptions) (DaprPubSubBrokersCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, daprPubSubBrokerName, daprPubSubBrokerParameters, options)
	if err != nil {
		return DaprPubSubBrokersCreateOrUpdateResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprPubSubBrokersCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return DaprPubSubBrokersCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DaprPubSubBrokersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, daprPubSubBrokerParameters DaprPubSubBrokerResource, options *DaprPubSubBrokersCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Connector/daprPubSubBrokers/{daprPubSubBrokerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if daprPubSubBrokerName == "" {
		return nil, errors.New("parameter daprPubSubBrokerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprPubSubBrokerName}", url.PathEscape(daprPubSubBrokerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, daprPubSubBrokerParameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DaprPubSubBrokersClient) createOrUpdateHandleResponse(resp *http.Response) (DaprPubSubBrokersCreateOrUpdateResponse, error) {
	result := DaprPubSubBrokersCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprPubSubBrokerResource); err != nil {
		return DaprPubSubBrokersCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *DaprPubSubBrokersClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes an existing daprPubSubBroker resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprPubSubBrokersClient) Delete(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, options *DaprPubSubBrokersDeleteOptions) (DaprPubSubBrokersDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, daprPubSubBrokerName, options)
	if err != nil {
		return DaprPubSubBrokersDeleteResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprPubSubBrokersDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return DaprPubSubBrokersDeleteResponse{}, client.deleteHandleError(resp)
	}
	return DaprPubSubBrokersDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DaprPubSubBrokersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, options *DaprPubSubBrokersDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Connector/daprPubSubBrokers/{daprPubSubBrokerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if daprPubSubBrokerName == "" {
		return nil, errors.New("parameter daprPubSubBrokerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprPubSubBrokerName}", url.PathEscape(daprPubSubBrokerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DaprPubSubBrokersClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Retrieves information about a daprPubSubBroker resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprPubSubBrokersClient) Get(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, options *DaprPubSubBrokersGetOptions) (DaprPubSubBrokersGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, daprPubSubBrokerName, options)
	if err != nil {
		return DaprPubSubBrokersGetResponse{}, err
	}
	resp, err := 	client.pl.Do(req)
	if err != nil {
		return DaprPubSubBrokersGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DaprPubSubBrokersGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DaprPubSubBrokersClient) getCreateRequest(ctx context.Context, resourceGroupName string, daprPubSubBrokerName string, options *DaprPubSubBrokersGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Connector/daprPubSubBrokers/{daprPubSubBrokerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if daprPubSubBrokerName == "" {
		return nil, errors.New("parameter daprPubSubBrokerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{daprPubSubBrokerName}", url.PathEscape(daprPubSubBrokerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DaprPubSubBrokersClient) getHandleResponse(resp *http.Response) (DaprPubSubBrokersGetResponse, error) {
	result := DaprPubSubBrokersGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprPubSubBrokerResource); err != nil {
		return DaprPubSubBrokersGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *DaprPubSubBrokersClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Lists information about all daprPubSubBroker resources in the given subscription and resource group
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprPubSubBrokersClient) List(resourceGroupName string, options *DaprPubSubBrokersListOptions) (*DaprPubSubBrokersListPager) {
	return &DaprPubSubBrokersListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp DaprPubSubBrokersListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DaprPubSubBrokerList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *DaprPubSubBrokersClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *DaprPubSubBrokersListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Applications.Connector/daprPubSubBrokers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DaprPubSubBrokersClient) listHandleResponse(resp *http.Response) (DaprPubSubBrokersListResponse, error) {
	result := DaprPubSubBrokersListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprPubSubBrokerList); err != nil {
		return DaprPubSubBrokersListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *DaprPubSubBrokersClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Lists information about all daprPubSubBroker resources in the given subscription
// If the operation fails it returns the *ErrorResponse error type.
func (client *DaprPubSubBrokersClient) ListBySubscription(options *DaprPubSubBrokersListBySubscriptionOptions) (*DaprPubSubBrokersListBySubscriptionPager) {
	return &DaprPubSubBrokersListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DaprPubSubBrokersListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DaprPubSubBrokerList.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DaprPubSubBrokersClient) listBySubscriptionCreateRequest(ctx context.Context, options *DaprPubSubBrokersListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Applications.Connector/daprPubSubBrokers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(	client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DaprPubSubBrokersClient) listBySubscriptionHandleResponse(resp *http.Response) (DaprPubSubBrokersListBySubscriptionResponse, error) {
	result := DaprPubSubBrokersListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprPubSubBrokerList); err != nil {
		return DaprPubSubBrokersListBySubscriptionResponse{}, err
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *DaprPubSubBrokersClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

