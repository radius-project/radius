// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/components/queue (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_client.go -package=queue -self_package github.com/radius-project/radius/pkg/components/queue github.com/radius-project/radius/pkg/components/queue Client
//

// Package queue is a generated GoMock package.
package queue

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockClient) Dequeue(arg0 context.Context, arg1 QueueClientConfig) (*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", arg0, arg1)
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockClientMockRecorder) Dequeue(arg0, arg1 any) *MockClientDequeueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockClient)(nil).Dequeue), arg0, arg1)
	return &MockClientDequeueCall{Call: call}
}

// MockClientDequeueCall wrap *gomock.Call
type MockClientDequeueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDequeueCall) Return(arg0 *Message, arg1 error) *MockClientDequeueCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDequeueCall) Do(f func(context.Context, QueueClientConfig) (*Message, error)) *MockClientDequeueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDequeueCall) DoAndReturn(f func(context.Context, QueueClientConfig) (*Message, error)) *MockClientDequeueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Enqueue mocks base method.
func (m *MockClient) Enqueue(arg0 context.Context, arg1 *Message, arg2 ...EnqueueOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enqueue", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockClientMockRecorder) Enqueue(arg0, arg1 any, arg2 ...any) *MockClientEnqueueCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockClient)(nil).Enqueue), varargs...)
	return &MockClientEnqueueCall{Call: call}
}

// MockClientEnqueueCall wrap *gomock.Call
type MockClientEnqueueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientEnqueueCall) Return(arg0 error) *MockClientEnqueueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientEnqueueCall) Do(f func(context.Context, *Message, ...EnqueueOptions) error) *MockClientEnqueueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientEnqueueCall) DoAndReturn(f func(context.Context, *Message, ...EnqueueOptions) error) *MockClientEnqueueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtendMessage mocks base method.
func (m *MockClient) ExtendMessage(arg0 context.Context, arg1 *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendMessage indicates an expected call of ExtendMessage.
func (mr *MockClientMockRecorder) ExtendMessage(arg0, arg1 any) *MockClientExtendMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendMessage", reflect.TypeOf((*MockClient)(nil).ExtendMessage), arg0, arg1)
	return &MockClientExtendMessageCall{Call: call}
}

// MockClientExtendMessageCall wrap *gomock.Call
type MockClientExtendMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientExtendMessageCall) Return(arg0 error) *MockClientExtendMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientExtendMessageCall) Do(f func(context.Context, *Message) error) *MockClientExtendMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientExtendMessageCall) DoAndReturn(f func(context.Context, *Message) error) *MockClientExtendMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinishMessage mocks base method.
func (m *MockClient) FinishMessage(arg0 context.Context, arg1 *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishMessage indicates an expected call of FinishMessage.
func (mr *MockClientMockRecorder) FinishMessage(arg0, arg1 any) *MockClientFinishMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishMessage", reflect.TypeOf((*MockClient)(nil).FinishMessage), arg0, arg1)
	return &MockClientFinishMessageCall{Call: call}
}

// MockClientFinishMessageCall wrap *gomock.Call
type MockClientFinishMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientFinishMessageCall) Return(arg0 error) *MockClientFinishMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientFinishMessageCall) Do(f func(context.Context, *Message) error) *MockClientFinishMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientFinishMessageCall) DoAndReturn(f func(context.Context, *Message) error) *MockClientFinishMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
