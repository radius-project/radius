// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/components/database/postgres (interfaces: PostgresAPI)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_postgresapi.go -package=postgres -self_package github.com/radius-project/radius/pkg/components/database/postgres github.com/radius-project/radius/pkg/components/database/postgres PostgresAPI
//

// Package postgres is a generated GoMock package.
package postgres

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockPostgresAPI is a mock of PostgresAPI interface.
type MockPostgresAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresAPIMockRecorder
}

// MockPostgresAPIMockRecorder is the mock recorder for MockPostgresAPI.
type MockPostgresAPIMockRecorder struct {
	mock *MockPostgresAPI
}

// NewMockPostgresAPI creates a new mock instance.
func NewMockPostgresAPI(ctrl *gomock.Controller) *MockPostgresAPI {
	mock := &MockPostgresAPI{ctrl: ctrl}
	mock.recorder = &MockPostgresAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresAPI) EXPECT() *MockPostgresAPIMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockPostgresAPI) Begin(arg0 context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPostgresAPIMockRecorder) Begin(arg0 any) *MockPostgresAPIBeginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPostgresAPI)(nil).Begin), arg0)
	return &MockPostgresAPIBeginCall{Call: call}
}

// MockPostgresAPIBeginCall wrap *gomock.Call
type MockPostgresAPIBeginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPostgresAPIBeginCall) Return(arg0 pgx.Tx, arg1 error) *MockPostgresAPIBeginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPostgresAPIBeginCall) Do(f func(context.Context) (pgx.Tx, error)) *MockPostgresAPIBeginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPostgresAPIBeginCall) DoAndReturn(f func(context.Context) (pgx.Tx, error)) *MockPostgresAPIBeginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockPostgresAPI) Exec(arg0 context.Context, arg1 string, arg2 ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPostgresAPIMockRecorder) Exec(arg0, arg1 any, arg2 ...any) *MockPostgresAPIExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPostgresAPI)(nil).Exec), varargs...)
	return &MockPostgresAPIExecCall{Call: call}
}

// MockPostgresAPIExecCall wrap *gomock.Call
type MockPostgresAPIExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPostgresAPIExecCall) Return(arg0 pgconn.CommandTag, arg1 error) *MockPostgresAPIExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPostgresAPIExecCall) Do(f func(context.Context, string, ...any) (pgconn.CommandTag, error)) *MockPostgresAPIExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPostgresAPIExecCall) DoAndReturn(f func(context.Context, string, ...any) (pgconn.CommandTag, error)) *MockPostgresAPIExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Query mocks base method.
func (m *MockPostgresAPI) Query(arg0 context.Context, arg1 string, arg2 ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPostgresAPIMockRecorder) Query(arg0, arg1 any, arg2 ...any) *MockPostgresAPIQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPostgresAPI)(nil).Query), varargs...)
	return &MockPostgresAPIQueryCall{Call: call}
}

// MockPostgresAPIQueryCall wrap *gomock.Call
type MockPostgresAPIQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPostgresAPIQueryCall) Return(arg0 pgx.Rows, arg1 error) *MockPostgresAPIQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPostgresAPIQueryCall) Do(f func(context.Context, string, ...any) (pgx.Rows, error)) *MockPostgresAPIQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPostgresAPIQueryCall) DoAndReturn(f func(context.Context, string, ...any) (pgx.Rows, error)) *MockPostgresAPIQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRow mocks base method.
func (m *MockPostgresAPI) QueryRow(arg0 context.Context, arg1 string, arg2 ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPostgresAPIMockRecorder) QueryRow(arg0, arg1 any, arg2 ...any) *MockPostgresAPIQueryRowCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPostgresAPI)(nil).QueryRow), varargs...)
	return &MockPostgresAPIQueryRowCall{Call: call}
}

// MockPostgresAPIQueryRowCall wrap *gomock.Call
type MockPostgresAPIQueryRowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPostgresAPIQueryRowCall) Return(arg0 pgx.Row) *MockPostgresAPIQueryRowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPostgresAPIQueryRowCall) Do(f func(context.Context, string, ...any) pgx.Row) *MockPostgresAPIQueryRowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPostgresAPIQueryRowCall) DoAndReturn(f func(context.Context, string, ...any) pgx.Row) *MockPostgresAPIQueryRowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
