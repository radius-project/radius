// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package v20231001preview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StateStoresClient contains the methods for the StateStores group.
// Don't use this type directly, use NewStateStoresClient() instead.
type StateStoresClient struct {
	internal *arm.Client
	rootScope string
}

// NewStateStoresClient creates a new instance of StateStoresClient with the specified values.
//   - rootScope - The scope in which the resource is present. UCP Scope is /planes/{planeType}/{planeName}/resourceGroup/{resourcegroupID}
//     and Azure resource scope is
//     /subscriptions/{subscriptionID}/resourceGroup/{resourcegroupID}
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewStateStoresClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*StateStoresClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &StateStoresClient{
		rootScope: rootScope,
	internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - stateStoreName - StateStore name
//   - resource - Resource create parameters.
//   - options - StateStoresClientBeginCreateOrUpdateOptions contains the optional parameters for the StateStoresClient.BeginCreateOrUpdate
//     method.
func (client *StateStoresClient) BeginCreateOrUpdate(ctx context.Context, stateStoreName string, resource DaprStateStoreResource, options *StateStoresClientBeginCreateOrUpdateOptions) (*runtime.Poller[StateStoresClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, stateStoreName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[StateStoresClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[StateStoresClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *StateStoresClient) createOrUpdate(ctx context.Context, stateStoreName string, resource DaprStateStoreResource, options *StateStoresClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "StateStoresClient.BeginCreateOrUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, stateStoreName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *StateStoresClient) createOrUpdateCreateRequest(ctx context.Context, stateStoreName string, resource DaprStateStoreResource, _ *StateStoresClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/stateStores/{stateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if stateStoreName == "" {
		return nil, errors.New("parameter stateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{stateStoreName}", url.PathEscape(stateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
;	return req, nil
}

// BeginDelete - Delete a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - stateStoreName - StateStore name
//   - options - StateStoresClientBeginDeleteOptions contains the optional parameters for the StateStoresClient.BeginDelete method.
func (client *StateStoresClient) BeginDelete(ctx context.Context, stateStoreName string, options *StateStoresClientBeginDeleteOptions) (*runtime.Poller[StateStoresClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, stateStoreName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[StateStoresClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[StateStoresClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *StateStoresClient) deleteOperation(ctx context.Context, stateStoreName string, options *StateStoresClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "StateStoresClient.BeginDelete", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, stateStoreName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StateStoresClient) deleteCreateRequest(ctx context.Context, stateStoreName string, _ *StateStoresClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/stateStores/{stateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if stateStoreName == "" {
		return nil, errors.New("parameter stateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{stateStoreName}", url.PathEscape(stateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - stateStoreName - StateStore name
//   - options - StateStoresClientGetOptions contains the optional parameters for the StateStoresClient.Get method.
func (client *StateStoresClient) Get(ctx context.Context, stateStoreName string, options *StateStoresClientGetOptions) (StateStoresClientGetResponse, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "StateStoresClient.Get", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, stateStoreName, options)
	if err != nil {
		return StateStoresClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StateStoresClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StateStoresClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *StateStoresClient) getCreateRequest(ctx context.Context, stateStoreName string, _ *StateStoresClientGetOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/stateStores/{stateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if stateStoreName == "" {
		return nil, errors.New("parameter stateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{stateStoreName}", url.PathEscape(stateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StateStoresClient) getHandleResponse(resp *http.Response) (StateStoresClientGetResponse, error) {
	result := StateStoresClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprStateStoreResource); err != nil {
		return StateStoresClientGetResponse{}, err
	}
	return result, nil
}

// NewListByScopePager - List DaprStateStoreResource resources by Scope
//
// Generated from API version 2023-10-01-preview
//   - options - StateStoresClientListByScopeOptions contains the optional parameters for the StateStoresClient.NewListByScopePager
//     method.
func (client *StateStoresClient) NewListByScopePager(options *StateStoresClientListByScopeOptions) (*runtime.Pager[StateStoresClientListByScopeResponse]) {
	return runtime.NewPager(runtime.PagingHandler[StateStoresClientListByScopeResponse]{
		More: func(page StateStoresClientListByScopeResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *StateStoresClientListByScopeResponse) (StateStoresClientListByScopeResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByScopeCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return StateStoresClientListByScopeResponse{}, err
			}
			return client.listByScopeHandleResponse(resp)
			},
		Tracer: client.internal.Tracer(),
	})
}

// listByScopeCreateRequest creates the ListByScope request.
func (client *StateStoresClient) listByScopeCreateRequest(ctx context.Context, _ *StateStoresClientListByScopeOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/stateStores"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByScopeHandleResponse handles the ListByScope response.
func (client *StateStoresClient) listByScopeHandleResponse(resp *http.Response) (StateStoresClientListByScopeResponse, error) {
	result := StateStoresClientListByScopeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DaprStateStoreResourceListResult); err != nil {
		return StateStoresClientListByScopeResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - stateStoreName - StateStore name
//   - properties - The resource properties to be updated.
//   - options - StateStoresClientBeginUpdateOptions contains the optional parameters for the StateStoresClient.BeginUpdate method.
func (client *StateStoresClient) BeginUpdate(ctx context.Context, stateStoreName string, properties DaprStateStoreResourceUpdate, options *StateStoresClientBeginUpdateOptions) (*runtime.Poller[StateStoresClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, stateStoreName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[StateStoresClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[StateStoresClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a DaprStateStoreResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *StateStoresClient) update(ctx context.Context, stateStoreName string, properties DaprStateStoreResourceUpdate, options *StateStoresClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	ctx, endSpan := runtime.StartSpan(ctx, "StateStoresClient.BeginUpdate", client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, stateStoreName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *StateStoresClient) updateCreateRequest(ctx context.Context, stateStoreName string, properties DaprStateStoreResourceUpdate, _ *StateStoresClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Dapr/stateStores/{stateStoreName}"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if stateStoreName == "" {
		return nil, errors.New("parameter stateStoreName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{stateStoreName}", url.PathEscape(stateStoreName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
	return nil, err
}
;	return req, nil
}

