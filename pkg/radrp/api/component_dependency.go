// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComponentDependency Dependency of a component.
//
// swagger:model ComponentDependency
type ComponentDependency struct {

	// Binding of the component dependency
	Binding *ComponentBindingExpression `json:"binding,omitempty"`

	// env
	Env map[string]ComponentBindingExpression `json:"env,omitempty"`

	// secrets
	Secrets *ComponentDependencySecrets `json:"secrets,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ComponentDependency) UnmarshalJSON(data []byte) error {
	var props struct {

		// Binding of the component dependency
		Binding *ComponentBindingExpression `json:"binding,omitempty"`

		// env
		Env map[string]ComponentBindingExpression `json:"env,omitempty"`

		// secrets
		Secrets *ComponentDependencySecrets `json:"secrets,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Binding = props.Binding
	m.Env = props.Env
	m.Secrets = props.Secrets
	return nil
}

// Validate validates this component dependency
func (m *ComponentDependency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecrets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDependency) validateBinding(formats strfmt.Registry) error {
	if swag.IsZero(m.Binding) { // not required
		return nil
	}

	if m.Binding != nil {
		if err := m.Binding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binding")
			}
			return err
		}
	}

	return nil
}

func (m *ComponentDependency) validateEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for k := range m.Env {

		if err := validate.Required("env"+"."+k, "body", m.Env[k]); err != nil {
			return err
		}
		if val, ok := m.Env[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ComponentDependency) validateSecrets(formats strfmt.Registry) error {
	if swag.IsZero(m.Secrets) { // not required
		return nil
	}

	if m.Secrets != nil {
		if err := m.Secrets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secrets")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this component dependency based on the context it is used
func (m *ComponentDependency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBinding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDependency) contextValidateBinding(ctx context.Context, formats strfmt.Registry) error {

	if m.Binding != nil {
		if err := m.Binding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binding")
			}
			return err
		}
	}

	return nil
}

func (m *ComponentDependency) contextValidateEnv(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Env {

		if val, ok := m.Env[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ComponentDependency) contextValidateSecrets(ctx context.Context, formats strfmt.Registry) error {

	if m.Secrets != nil {
		if err := m.Secrets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secrets")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentDependency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentDependency) UnmarshalBinary(b []byte) error {
	var res ComponentDependency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
