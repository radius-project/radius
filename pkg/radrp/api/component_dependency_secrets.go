// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComponentDependencySecrets Secrets of a component binding.
//
// swagger:model ComponentDependencySecrets
type ComponentDependencySecrets struct {

	// keys
	Keys map[string]ComponentBindingExpression `json:"keys,omitempty"`

	// Kind of the component binding
	Store *ComponentBindingExpression `json:"store,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *ComponentDependencySecrets) UnmarshalJSON(data []byte) error {
	var props struct {

		// keys
		Keys map[string]ComponentBindingExpression `json:"keys,omitempty"`

		// Kind of the component binding
		Store *ComponentBindingExpression `json:"store,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Keys = props.Keys
	m.Store = props.Store
	return nil
}

// Validate validates this component dependency secrets
func (m *ComponentDependencySecrets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDependencySecrets) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	for k := range m.Keys {

		if err := validate.Required("keys"+"."+k, "body", m.Keys[k]); err != nil {
			return err
		}
		if val, ok := m.Keys[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ComponentDependencySecrets) validateStore(formats strfmt.Registry) error {
	if swag.IsZero(m.Store) { // not required
		return nil
	}

	if m.Store != nil {
		if err := m.Store.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("store")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this component dependency secrets based on the context it is used
func (m *ComponentDependencySecrets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentDependencySecrets) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Keys {

		if val, ok := m.Keys[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ComponentDependencySecrets) contextValidateStore(ctx context.Context, formats strfmt.Registry) error {

	if m.Store != nil {
		if err := m.Store.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("store")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentDependencySecrets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentDependencySecrets) UnmarshalBinary(b []byte) error {
	var res ComponentDependencySecrets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
