// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationResource Application resource.
//
// swagger:model ApplicationResource
type ApplicationResource struct {
	TrackedResource

	// Properties of the application.
	// Required: true
	Properties ApplicationProperties `json:"properties"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApplicationResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TrackedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TrackedResource = aO0

	// now for regular properties
	var propsApplicationResource struct {
		Properties ApplicationProperties `json:"properties"`
	}
	if err := swag.ReadJSON(raw, &propsApplicationResource); err != nil {
		return err
	}
	m.Properties = propsApplicationResource.Properties

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApplicationResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TrackedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsApplicationResource struct {
		Properties ApplicationProperties `json:"properties"`
	}
	propsApplicationResource.Properties = m.Properties

	jsonDataPropsApplicationResource, errApplicationResource := swag.WriteJSON(propsApplicationResource)
	if errApplicationResource != nil {
		return nil, errApplicationResource
	}
	_parts = append(_parts, jsonDataPropsApplicationResource)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this application resource
func (m *ApplicationResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TrackedResource
	if err := m.TrackedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationResource) validateProperties(formats strfmt.Registry) error {

	if m.Properties == nil {
		return errors.Required("properties", "body", nil)
	}

	return nil
}

// ContextValidate validate this application resource based on the context it is used
func (m *ApplicationResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TrackedResource
	if err := m.TrackedResource.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationResource) UnmarshalBinary(b []byte) error {
	var res ApplicationResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
