// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentResource Deployment resource.
//
// swagger:model DeploymentResource
type DeploymentResource struct {
	TrackedResource

	// Defines the name of the deployment.
	// Required: true
	Name *string `json:"name"`

	// Properties of the deployment.
	// Required: true
	Properties *DeploymentProperties `json:"properties"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DeploymentResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TrackedResource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TrackedResource = aO0

	// now for regular properties
	var propsDeploymentResource struct {
		Name *string `json:"name"`

		Properties *DeploymentProperties `json:"properties"`
	}
	if err := swag.ReadJSON(raw, &propsDeploymentResource); err != nil {
		return err
	}
	m.Name = propsDeploymentResource.Name

	m.Properties = propsDeploymentResource.Properties

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DeploymentResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.TrackedResource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDeploymentResource struct {
		Name *string `json:"name"`

		Properties *DeploymentProperties `json:"properties"`
	}
	propsDeploymentResource.Name = m.Name

	propsDeploymentResource.Properties = m.Properties

	jsonDataPropsDeploymentResource, errDeploymentResource := swag.WriteJSON(propsDeploymentResource)
	if errDeploymentResource != nil {
		return nil, errDeploymentResource
	}
	_parts = append(_parts, jsonDataPropsDeploymentResource)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this deployment resource
func (m *DeploymentResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TrackedResource
	if err := m.TrackedResource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentResource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentResource) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment resource based on the context it is used
func (m *DeploymentResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TrackedResource
	if err := m.TrackedResource.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentResource) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {
		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentResource) UnmarshalBinary(b []byte) error {
	var res DeploymentResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
