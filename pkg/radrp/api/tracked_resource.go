// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackedResource Tracked Resource
//
// The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
//
// swagger:model trackedResource
type TrackedResource struct {
	Resource

	// The geo-location where the resource lives
	// Required: true
	Location *string `json:"location"`

	// Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TrackedResource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Resource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Resource = aO0

	// now for regular properties
	var propsTrackedResource struct {
		Location *string `json:"location"`

		Tags map[string]string `json:"tags,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsTrackedResource); err != nil {
		return err
	}
	m.Location = propsTrackedResource.Location

	m.Tags = propsTrackedResource.Tags

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TrackedResource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Resource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsTrackedResource struct {
		Location *string `json:"location"`

		Tags map[string]string `json:"tags,omitempty"`
	}
	propsTrackedResource.Location = m.Location

	propsTrackedResource.Tags = m.Tags

	jsonDataPropsTrackedResource, errTrackedResource := swag.WriteJSON(propsTrackedResource)
	if errTrackedResource != nil {
		return nil, errTrackedResource
	}
	_parts = append(_parts, jsonDataPropsTrackedResource)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tracked resource
func (m *TrackedResource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackedResource) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tracked resource based on the context it is used
func (m *TrackedResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Resource
	if err := m.Resource.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TrackedResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackedResource) UnmarshalBinary(b []byte) error {
	var res TrackedResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
