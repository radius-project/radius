// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/radius/pkg/radrp/db (interfaces: RadrpDB)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	azresources "github.com/Azure/radius/pkg/azure/azresources"
	gomock "github.com/golang/mock/gomock"
)

// MockRadrpDB is a mock of RadrpDB interface.
type MockRadrpDB struct {
	ctrl     *gomock.Controller
	recorder *MockRadrpDBMockRecorder
}

// MockRadrpDBMockRecorder is the mock recorder for MockRadrpDB.
type MockRadrpDBMockRecorder struct {
	mock *MockRadrpDB
}

// NewMockRadrpDB creates a new mock instance.
func NewMockRadrpDB(ctrl *gomock.Controller) *MockRadrpDB {
	mock := &MockRadrpDB{ctrl: ctrl}
	mock.recorder = &MockRadrpDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadrpDB) EXPECT() *MockRadrpDBMockRecorder {
	return m.recorder
}

// DeleteOperationByID mocks base method.
func (m *MockRadrpDB) DeleteOperationByID(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperationByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperationByID indicates an expected call of DeleteOperationByID.
func (mr *MockRadrpDBMockRecorder) DeleteOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteOperationByID), arg0, arg1)
}

// DeleteV3Application mocks base method.
func (m *MockRadrpDB) DeleteV3Application(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV3Application", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV3Application indicates an expected call of DeleteV3Application.
func (mr *MockRadrpDBMockRecorder) DeleteV3Application(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV3Application", reflect.TypeOf((*MockRadrpDB)(nil).DeleteV3Application), arg0, arg1)
}

// DeleteV3Resource mocks base method.
func (m *MockRadrpDB) DeleteV3Resource(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV3Resource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV3Resource indicates an expected call of DeleteV3Resource.
func (mr *MockRadrpDBMockRecorder) DeleteV3Resource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV3Resource", reflect.TypeOf((*MockRadrpDB)(nil).DeleteV3Resource), arg0, arg1)
}

// GetOperationByID mocks base method.
func (m *MockRadrpDB) GetOperationByID(arg0 context.Context, arg1 azresources.ResourceID) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID.
func (mr *MockRadrpDBMockRecorder) GetOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).GetOperationByID), arg0, arg1)
}

// GetV3Application mocks base method.
func (m *MockRadrpDB) GetV3Application(arg0 context.Context, arg1 azresources.ResourceID) (ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV3Application", arg0, arg1)
	ret0, _ := ret[0].(ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV3Application indicates an expected call of GetV3Application.
func (mr *MockRadrpDBMockRecorder) GetV3Application(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV3Application", reflect.TypeOf((*MockRadrpDB)(nil).GetV3Application), arg0, arg1)
}

// GetV3Resource mocks base method.
func (m *MockRadrpDB) GetV3Resource(arg0 context.Context, arg1 azresources.ResourceID) (RadiusResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV3Resource", arg0, arg1)
	ret0, _ := ret[0].(RadiusResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV3Resource indicates an expected call of GetV3Resource.
func (mr *MockRadrpDBMockRecorder) GetV3Resource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV3Resource", reflect.TypeOf((*MockRadrpDB)(nil).GetV3Resource), arg0, arg1)
}

// ListAllV3ResourcesByApplication mocks base method.
func (m *MockRadrpDB) ListAllV3ResourcesByApplication(arg0 context.Context, arg1 azresources.ResourceID) ([]RadiusResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllV3ResourcesByApplication", arg0, arg1)
	ret0, _ := ret[0].([]RadiusResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllV3ResourcesByApplication indicates an expected call of ListAllV3ResourcesByApplication.
func (mr *MockRadrpDBMockRecorder) ListAllV3ResourcesByApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllV3ResourcesByApplication", reflect.TypeOf((*MockRadrpDB)(nil).ListAllV3ResourcesByApplication), arg0, arg1)
}

// ListV3Applications mocks base method.
func (m *MockRadrpDB) ListV3Applications(arg0 context.Context, arg1 azresources.ResourceID) ([]ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV3Applications", arg0, arg1)
	ret0, _ := ret[0].([]ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV3Applications indicates an expected call of ListV3Applications.
func (mr *MockRadrpDBMockRecorder) ListV3Applications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV3Applications", reflect.TypeOf((*MockRadrpDB)(nil).ListV3Applications), arg0, arg1)
}

// ListV3Resources mocks base method.
func (m *MockRadrpDB) ListV3Resources(arg0 context.Context, arg1 azresources.ResourceID) ([]RadiusResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV3Resources", arg0, arg1)
	ret0, _ := ret[0].([]RadiusResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV3Resources indicates an expected call of ListV3Resources.
func (mr *MockRadrpDBMockRecorder) ListV3Resources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV3Resources", reflect.TypeOf((*MockRadrpDB)(nil).ListV3Resources), arg0, arg1)
}

// PatchOperationByID mocks base method.
func (m *MockRadrpDB) PatchOperationByID(arg0 context.Context, arg1 azresources.ResourceID, arg2 *Operation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOperationByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchOperationByID indicates an expected call of PatchOperationByID.
func (mr *MockRadrpDBMockRecorder) PatchOperationByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).PatchOperationByID), arg0, arg1, arg2)
}

// UpdateV3ApplicationDefinition mocks base method.
func (m *MockRadrpDB) UpdateV3ApplicationDefinition(arg0 context.Context, arg1 ApplicationResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ApplicationDefinition", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateV3ApplicationDefinition indicates an expected call of UpdateV3ApplicationDefinition.
func (mr *MockRadrpDBMockRecorder) UpdateV3ApplicationDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ApplicationDefinition", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ApplicationDefinition), arg0, arg1)
}

// UpdateV3ResourceDefinition mocks base method.
func (m *MockRadrpDB) UpdateV3ResourceDefinition(arg0 context.Context, arg1 azresources.ResourceID, arg2 RadiusResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ResourceDefinition", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateV3ResourceDefinition indicates an expected call of UpdateV3ResourceDefinition.
func (mr *MockRadrpDBMockRecorder) UpdateV3ResourceDefinition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ResourceDefinition", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ResourceDefinition), arg0, arg1, arg2)
}

// UpdateV3ResourceStatus mocks base method.
func (m *MockRadrpDB) UpdateV3ResourceStatus(arg0 context.Context, arg1 azresources.ResourceID, arg2 RadiusResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ResourceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateV3ResourceStatus indicates an expected call of UpdateV3ResourceStatus.
func (mr *MockRadrpDBMockRecorder) UpdateV3ResourceStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ResourceStatus", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ResourceStatus), arg0, arg1, arg2)
}
