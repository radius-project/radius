// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/radius/pkg/radrp/db (interfaces: RadrpDB)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	azresources "github.com/Azure/radius/pkg/azure/azresources"
	resources "github.com/Azure/radius/pkg/radrp/resources"
	gomock "github.com/golang/mock/gomock"
)

// MockRadrpDB is a mock of RadrpDB interface.
type MockRadrpDB struct {
	ctrl     *gomock.Controller
	recorder *MockRadrpDBMockRecorder
}

// MockRadrpDBMockRecorder is the mock recorder for MockRadrpDB.
type MockRadrpDBMockRecorder struct {
	mock *MockRadrpDB
}

// NewMockRadrpDB creates a new mock instance.
func NewMockRadrpDB(ctrl *gomock.Controller) *MockRadrpDB {
	mock := &MockRadrpDB{ctrl: ctrl}
	mock.recorder = &MockRadrpDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadrpDB) EXPECT() *MockRadrpDBMockRecorder {
	return m.recorder
}

// DeleteApplicationByID mocks base method.
func (m *MockRadrpDB) DeleteApplicationByID(arg0 context.Context, arg1 resources.ApplicationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationByID indicates an expected call of DeleteApplicationByID.
func (mr *MockRadrpDBMockRecorder) DeleteApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationByID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteApplicationByID), arg0, arg1)
}

// DeleteComponentByApplicationID mocks base method.
func (m *MockRadrpDB) DeleteComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponentByApplicationID indicates an expected call of DeleteComponentByApplicationID.
func (mr *MockRadrpDBMockRecorder) DeleteComponentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteComponentByApplicationID), arg0, arg1, arg2)
}

// DeleteDeploymentByApplicationID mocks base method.
func (m *MockRadrpDB) DeleteDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploymentByApplicationID indicates an expected call of DeleteDeploymentByApplicationID.
func (mr *MockRadrpDBMockRecorder) DeleteDeploymentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteDeploymentByApplicationID), arg0, arg1, arg2)
}

// DeleteOperationByID mocks base method.
func (m *MockRadrpDB) DeleteOperationByID(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperationByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperationByID indicates an expected call of DeleteOperationByID.
func (mr *MockRadrpDBMockRecorder) DeleteOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteOperationByID), arg0, arg1)
}

// DeleteScopeByApplicationID mocks base method.
func (m *MockRadrpDB) DeleteScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScopeByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScopeByApplicationID indicates an expected call of DeleteScopeByApplicationID.
func (mr *MockRadrpDBMockRecorder) DeleteScopeByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScopeByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).DeleteScopeByApplicationID), arg0, arg1, arg2)
}

// DeleteV3Application mocks base method.
func (m *MockRadrpDB) DeleteV3Application(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV3Application", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV3Application indicates an expected call of DeleteV3Application.
func (mr *MockRadrpDBMockRecorder) DeleteV3Application(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV3Application", reflect.TypeOf((*MockRadrpDB)(nil).DeleteV3Application), arg0, arg1)
}

// DeleteV3Resource mocks base method.
func (m *MockRadrpDB) DeleteV3Resource(arg0 context.Context, arg1 azresources.ResourceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV3Resource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV3Resource indicates an expected call of DeleteV3Resource.
func (mr *MockRadrpDBMockRecorder) DeleteV3Resource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV3Resource", reflect.TypeOf((*MockRadrpDB)(nil).DeleteV3Resource), arg0, arg1)
}

// GetApplicationByID mocks base method.
func (m *MockRadrpDB) GetApplicationByID(arg0 context.Context, arg1 resources.ApplicationID) (*Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(*Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockRadrpDBMockRecorder) GetApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockRadrpDB)(nil).GetApplicationByID), arg0, arg1)
}

// GetComponentByApplicationID mocks base method.
func (m *MockRadrpDB) GetComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentByApplicationID indicates an expected call of GetComponentByApplicationID.
func (mr *MockRadrpDBMockRecorder) GetComponentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).GetComponentByApplicationID), arg0, arg1, arg2)
}

// GetDeploymentByApplicationID mocks base method.
func (m *MockRadrpDB) GetDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentByApplicationID indicates an expected call of GetDeploymentByApplicationID.
func (mr *MockRadrpDBMockRecorder) GetDeploymentByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).GetDeploymentByApplicationID), arg0, arg1, arg2)
}

// GetOperationByID mocks base method.
func (m *MockRadrpDB) GetOperationByID(arg0 context.Context, arg1 azresources.ResourceID) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", arg0, arg1)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID.
func (mr *MockRadrpDBMockRecorder) GetOperationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).GetOperationByID), arg0, arg1)
}

// GetScopeByApplicationID mocks base method.
func (m *MockRadrpDB) GetScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string) (*Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopeByApplicationID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopeByApplicationID indicates an expected call of GetScopeByApplicationID.
func (mr *MockRadrpDBMockRecorder) GetScopeByApplicationID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopeByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).GetScopeByApplicationID), arg0, arg1, arg2)
}

// GetV3Application mocks base method.
func (m *MockRadrpDB) GetV3Application(arg0 context.Context, arg1 azresources.ResourceID) (ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV3Application", arg0, arg1)
	ret0, _ := ret[0].(ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV3Application indicates an expected call of GetV3Application.
func (mr *MockRadrpDBMockRecorder) GetV3Application(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV3Application", reflect.TypeOf((*MockRadrpDB)(nil).GetV3Application), arg0, arg1)
}

// GetV3Resource mocks base method.
func (m *MockRadrpDB) GetV3Resource(arg0 context.Context, arg1 azresources.ResourceID) (RadiusResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV3Resource", arg0, arg1)
	ret0, _ := ret[0].(RadiusResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV3Resource indicates an expected call of GetV3Resource.
func (mr *MockRadrpDBMockRecorder) GetV3Resource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV3Resource", reflect.TypeOf((*MockRadrpDB)(nil).GetV3Resource), arg0, arg1)
}

// ListApplicationsByResourceGroup mocks base method.
func (m *MockRadrpDB) ListApplicationsByResourceGroup(arg0 context.Context, arg1 resources.ResourceID) ([]Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsByResourceGroup", arg0, arg1)
	ret0, _ := ret[0].([]Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsByResourceGroup indicates an expected call of ListApplicationsByResourceGroup.
func (mr *MockRadrpDBMockRecorder) ListApplicationsByResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsByResourceGroup", reflect.TypeOf((*MockRadrpDB)(nil).ListApplicationsByResourceGroup), arg0, arg1)
}

// ListComponentsByApplicationID mocks base method.
func (m *MockRadrpDB) ListComponentsByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentsByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponentsByApplicationID indicates an expected call of ListComponentsByApplicationID.
func (mr *MockRadrpDBMockRecorder) ListComponentsByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentsByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).ListComponentsByApplicationID), arg0, arg1)
}

// ListDeploymentsByApplicationID mocks base method.
func (m *MockRadrpDB) ListDeploymentsByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsByApplicationID indicates an expected call of ListDeploymentsByApplicationID.
func (mr *MockRadrpDBMockRecorder) ListDeploymentsByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).ListDeploymentsByApplicationID), arg0, arg1)
}

// ListScopesByApplicationID mocks base method.
func (m *MockRadrpDB) ListScopesByApplicationID(arg0 context.Context, arg1 resources.ApplicationID) ([]Scope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScopesByApplicationID", arg0, arg1)
	ret0, _ := ret[0].([]Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScopesByApplicationID indicates an expected call of ListScopesByApplicationID.
func (mr *MockRadrpDBMockRecorder) ListScopesByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScopesByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).ListScopesByApplicationID), arg0, arg1)
}

// ListV3Applications mocks base method.
func (m *MockRadrpDB) ListV3Applications(arg0 context.Context, arg1 azresources.ResourceID) ([]ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV3Applications", arg0, arg1)
	ret0, _ := ret[0].([]ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV3Applications indicates an expected call of ListV3Applications.
func (mr *MockRadrpDBMockRecorder) ListV3Applications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV3Applications", reflect.TypeOf((*MockRadrpDB)(nil).ListV3Applications), arg0, arg1)
}

// ListV3Resources mocks base method.
func (m *MockRadrpDB) ListV3Resources(arg0 context.Context, arg1 azresources.ResourceID) ([]RadiusResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListV3Resources", arg0, arg1)
	ret0, _ := ret[0].([]RadiusResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV3Resources indicates an expected call of ListV3Resources.
func (mr *MockRadrpDBMockRecorder) ListV3Resources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV3Resources", reflect.TypeOf((*MockRadrpDB)(nil).ListV3Resources), arg0, arg1)
}

// PatchApplication mocks base method.
func (m *MockRadrpDB) PatchApplication(arg0 context.Context, arg1 *ApplicationPatch) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchApplication indicates an expected call of PatchApplication.
func (mr *MockRadrpDBMockRecorder) PatchApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchApplication", reflect.TypeOf((*MockRadrpDB)(nil).PatchApplication), arg0, arg1)
}

// PatchComponentByApplicationID mocks base method.
func (m *MockRadrpDB) PatchComponentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *Component) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchComponentByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchComponentByApplicationID indicates an expected call of PatchComponentByApplicationID.
func (mr *MockRadrpDBMockRecorder) PatchComponentByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchComponentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).PatchComponentByApplicationID), arg0, arg1, arg2, arg3)
}

// PatchDeploymentByApplicationID mocks base method.
func (m *MockRadrpDB) PatchDeploymentByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *Deployment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeploymentByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchDeploymentByApplicationID indicates an expected call of PatchDeploymentByApplicationID.
func (mr *MockRadrpDBMockRecorder) PatchDeploymentByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeploymentByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).PatchDeploymentByApplicationID), arg0, arg1, arg2, arg3)
}

// PatchOperationByID mocks base method.
func (m *MockRadrpDB) PatchOperationByID(arg0 context.Context, arg1 azresources.ResourceID, arg2 *Operation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchOperationByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchOperationByID indicates an expected call of PatchOperationByID.
func (mr *MockRadrpDBMockRecorder) PatchOperationByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchOperationByID", reflect.TypeOf((*MockRadrpDB)(nil).PatchOperationByID), arg0, arg1, arg2)
}

// PatchScopeByApplicationID mocks base method.
func (m *MockRadrpDB) PatchScopeByApplicationID(arg0 context.Context, arg1 resources.ApplicationID, arg2 string, arg3 *Scope) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchScopeByApplicationID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchScopeByApplicationID indicates an expected call of PatchScopeByApplicationID.
func (mr *MockRadrpDBMockRecorder) PatchScopeByApplicationID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchScopeByApplicationID", reflect.TypeOf((*MockRadrpDB)(nil).PatchScopeByApplicationID), arg0, arg1, arg2, arg3)
}

// UpdateApplication mocks base method.
func (m *MockRadrpDB) UpdateApplication(arg0 context.Context, arg1 *Application) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockRadrpDBMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockRadrpDB)(nil).UpdateApplication), arg0, arg1)
}

// UpdateV3ApplicationDefinition mocks base method.
func (m *MockRadrpDB) UpdateV3ApplicationDefinition(arg0 context.Context, arg1 ApplicationResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ApplicationDefinition", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateV3ApplicationDefinition indicates an expected call of UpdateV3ApplicationDefinition.
func (mr *MockRadrpDBMockRecorder) UpdateV3ApplicationDefinition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ApplicationDefinition", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ApplicationDefinition), arg0, arg1)
}

// UpdateV3ResourceDefinition mocks base method.
func (m *MockRadrpDB) UpdateV3ResourceDefinition(arg0 context.Context, arg1 azresources.ResourceID, arg2 RadiusResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ResourceDefinition", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateV3ResourceDefinition indicates an expected call of UpdateV3ResourceDefinition.
func (mr *MockRadrpDBMockRecorder) UpdateV3ResourceDefinition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ResourceDefinition", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ResourceDefinition), arg0, arg1, arg2)
}

// UpdateV3ResourceStatus mocks base method.
func (m *MockRadrpDB) UpdateV3ResourceStatus(arg0 context.Context, arg1 azresources.ResourceID, arg2 RadiusResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateV3ResourceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateV3ResourceStatus indicates an expected call of UpdateV3ResourceStatus.
func (mr *MockRadrpDBMockRecorder) UpdateV3ResourceStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateV3ResourceStatus", reflect.TypeOf((*MockRadrpDB)(nil).UpdateV3ResourceStatus), arg0, arg1, arg2)
}
