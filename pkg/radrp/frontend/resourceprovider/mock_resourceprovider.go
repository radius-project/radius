// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/radrp/frontend/resourceprovider (interfaces: ResourceProvider)

// Package resourceprovider is a generated GoMock package.
package resourceprovider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	azresources "github.com/project-radius/radius/pkg/azure/azresources"
	rest "github.com/project-radius/radius/pkg/radrp/rest"
)

// MockResourceProvider is a mock of ResourceProvider interface.
type MockResourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockResourceProviderMockRecorder
}

// MockResourceProviderMockRecorder is the mock recorder for MockResourceProvider.
type MockResourceProviderMockRecorder struct {
	mock *MockResourceProvider
}

// NewMockResourceProvider creates a new mock instance.
func NewMockResourceProvider(ctrl *gomock.Controller) *MockResourceProvider {
	mock := &MockResourceProvider{ctrl: ctrl}
	mock.recorder = &MockResourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceProvider) EXPECT() *MockResourceProviderMockRecorder {
	return m.recorder
}

// DeleteApplication mocks base method.
func (m *MockResourceProvider) DeleteApplication(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockResourceProviderMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockResourceProvider)(nil).DeleteApplication), arg0, arg1)
}

// DeleteResource mocks base method.
func (m *MockResourceProvider) DeleteResource(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockResourceProviderMockRecorder) DeleteResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourceProvider)(nil).DeleteResource), arg0, arg1)
}

// GetApplication mocks base method.
func (m *MockResourceProvider) GetApplication(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockResourceProviderMockRecorder) GetApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockResourceProvider)(nil).GetApplication), arg0, arg1)
}

// GetOperation mocks base method.
func (m *MockResourceProvider) GetOperation(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockResourceProviderMockRecorder) GetOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockResourceProvider)(nil).GetOperation), arg0, arg1)
}

// GetResource mocks base method.
func (m *MockResourceProvider) GetResource(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourceProviderMockRecorder) GetResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceProvider)(nil).GetResource), arg0, arg1)
}

// GetSwaggerDoc mocks base method.
func (m *MockResourceProvider) GetSwaggerDoc(arg0 context.Context) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwaggerDoc", arg0)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwaggerDoc indicates an expected call of GetSwaggerDoc.
func (mr *MockResourceProviderMockRecorder) GetSwaggerDoc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwaggerDoc", reflect.TypeOf((*MockResourceProvider)(nil).GetSwaggerDoc), arg0)
}

// ListAllV3ResourcesByApplication mocks base method.
func (m *MockResourceProvider) ListAllV3ResourcesByApplication(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllV3ResourcesByApplication", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllV3ResourcesByApplication indicates an expected call of ListAllV3ResourcesByApplication.
func (mr *MockResourceProviderMockRecorder) ListAllV3ResourcesByApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllV3ResourcesByApplication", reflect.TypeOf((*MockResourceProvider)(nil).ListAllV3ResourcesByApplication), arg0, arg1)
}

// ListApplications mocks base method.
func (m *MockResourceProvider) ListApplications(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockResourceProviderMockRecorder) ListApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockResourceProvider)(nil).ListApplications), arg0, arg1)
}

// ListResources mocks base method.
func (m *MockResourceProvider) ListResources(arg0 context.Context, arg1 azresources.ResourceID) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourceProviderMockRecorder) ListResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourceProvider)(nil).ListResources), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockResourceProvider) ListSecrets(arg0 context.Context, arg1 ListSecretsInput) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockResourceProviderMockRecorder) ListSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockResourceProvider)(nil).ListSecrets), arg0, arg1)
}

// UpdateApplication mocks base method.
func (m *MockResourceProvider) UpdateApplication(arg0 context.Context, arg1 azresources.ResourceID, arg2 []byte) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockResourceProviderMockRecorder) UpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockResourceProvider)(nil).UpdateApplication), arg0, arg1, arg2)
}

// UpdateResource mocks base method.
func (m *MockResourceProvider) UpdateResource(arg0 context.Context, arg1 azresources.ResourceID, arg2 []byte) (rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockResourceProviderMockRecorder) UpdateResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourceProvider)(nil).UpdateResource), arg0, arg1, arg2)
}
