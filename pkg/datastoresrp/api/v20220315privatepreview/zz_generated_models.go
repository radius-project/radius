//go:build go1.18
// +build go1.18

// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import "time"

// EnvironmentComputeClassification provides polymorphic access to related types.
// Call the interface's GetEnvironmentCompute() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EnvironmentCompute, *KubernetesCompute
type EnvironmentComputeClassification interface {
	// GetEnvironmentCompute returns the EnvironmentCompute content of the underlying type.
	GetEnvironmentCompute() *EnvironmentCompute
}

// EnvironmentCompute - Represents backing compute resource
type EnvironmentCompute struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string `json:"kind,omitempty"`

	// Configuration for supported external identity providers
	Identity *IdentitySettings `json:"identity,omitempty"`

	// The resource id of the compute resource for application environment.
	ResourceID *string `json:"resourceId,omitempty"`
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type EnvironmentCompute.
func (e *EnvironmentCompute) GetEnvironmentCompute() *EnvironmentCompute { return e }

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail `json:"error,omitempty"`
}

// IdentitySettings is the external identity setting.
type IdentitySettings struct {
	// REQUIRED; kind of identity setting
	Kind *IdentitySettingKind `json:"kind,omitempty"`

	// The URI for your compute platform's OIDC issuer
	OidcIssuer *string `json:"oidcIssuer,omitempty"`

	// The resource ID of the provisioned identity
	Resource *string `json:"resource,omitempty"`
}

// KubernetesCompute - The Kubernetes compute configuration
type KubernetesCompute struct {
	// REQUIRED; Discriminator property for EnvironmentCompute.
	Kind *string `json:"kind,omitempty"`

	// REQUIRED; The namespace to use for the environment.
	Namespace *string `json:"namespace,omitempty"`

	// Configuration for supported external identity providers
	Identity *IdentitySettings `json:"identity,omitempty"`

	// The resource id of the compute resource for application environment.
	ResourceID *string `json:"resourceId,omitempty"`
}

// GetEnvironmentCompute implements the EnvironmentComputeClassification interface for type KubernetesCompute.
func (k *KubernetesCompute) GetEnvironmentCompute() *EnvironmentCompute {
	return &EnvironmentCompute{
		Kind: k.Kind,
		ResourceID: k.ResourceID,
		Identity: k.Identity,
	}
}

// MongoDatabaseListSecretsResult - The secret values for the given MongoDatabase resource
type MongoDatabaseListSecretsResult struct {
	// Connection string used to connect to the target Mongo database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Mongo database
	Password *string `json:"password,omitempty"`
}

// MongoDatabaseProperties - MongoDatabase portable resource properties
type MongoDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// Database name of the target Mongo database
	Database *string `json:"database,omitempty"`

	// Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *Recipe `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the MongoDB resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secret values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// Username to use when connecting to the target Mongo database
	Username *string `json:"username,omitempty"`

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// MongoDatabaseResource - MongoDatabase portable resource
type MongoDatabaseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// The resource-specific properties for this resource.
	Properties *MongoDatabaseProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MongoDatabaseResourceListResult - The response of a MongoDatabaseResource list operation.
type MongoDatabaseResourceListResult struct {
	// REQUIRED; The MongoDatabaseResource items on this page
	Value []*MongoDatabaseResource `json:"value,omitempty"`

	// The link to the next page of items
	NextLink *string `json:"nextLink,omitempty"`
}

// MongoDatabaseResourceUpdate - The type used for update operations of the MongoDatabaseResource.
type MongoDatabaseResourceUpdate struct {
	// The updatable properties of the MongoDatabaseResource.
	Properties *MongoDatabaseResourceUpdateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MongoDatabaseResourceUpdateProperties - The updatable properties of the MongoDatabaseResource.
type MongoDatabaseResourceUpdateProperties struct {
	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// Database name of the target Mongo database
	Database *string `json:"database,omitempty"`

	// Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// Host name of the target Mongo database
	Host *string `json:"host,omitempty"`

	// Port value of the target Mongo database
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *RecipeUpdate `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the MongoDB resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secret values provided for the resource
	Secrets *MongoDatabaseSecrets `json:"secrets,omitempty"`

	// Username to use when connecting to the target Mongo database
	Username *string `json:"username,omitempty"`
}

// MongoDatabaseSecrets - The secret values for the given MongoDatabase resource
type MongoDatabaseSecrets struct {
	// Connection string used to connect to the target Mongo database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Mongo database
	Password *string `json:"password,omitempty"`
}

// MongoDatabasesClientBeginCreateOrUpdateOptions contains the optional parameters for the MongoDatabasesClient.BeginCreateOrUpdate
// method.
type MongoDatabasesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// MongoDatabasesClientBeginDeleteOptions contains the optional parameters for the MongoDatabasesClient.BeginDelete method.
type MongoDatabasesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// MongoDatabasesClientBeginUpdateOptions contains the optional parameters for the MongoDatabasesClient.BeginUpdate method.
type MongoDatabasesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// MongoDatabasesClientGetOptions contains the optional parameters for the MongoDatabasesClient.Get method.
type MongoDatabasesClientGetOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientListByScopeOptions contains the optional parameters for the MongoDatabasesClient.ListByScope method.
type MongoDatabasesClientListByScopeOptions struct {
	// placeholder for future optional parameters
}

// MongoDatabasesClientListSecretsOptions contains the optional parameters for the MongoDatabasesClient.ListSecrets method.
type MongoDatabasesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType `json:"actionType,omitempty" azure:"ro"`

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
// operations.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
	Origin *Origin `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
// Machine", "Restart Virtual Machine".
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
// Compute".
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
// Schedule Collections".
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OutputResource - Properties of an output resource.
type OutputResource struct {
	// The UCP resource ID of the underlying resource.
	ID *string `json:"id,omitempty"`

	// The logical identifier scoped to the owning Radius resource. This is only needed or used when a resource has a dependency
// relationship. LocalIDs do not have any particular format or meaning beyond
// being compared to determine dependency relationships.
	LocalID *string `json:"localId,omitempty"`

	// Determines whether Radius manages the lifecycle of the underlying resource.
	RadiusManaged *bool `json:"radiusManaged,omitempty"`
}

// Recipe - The recipe used to automatically deploy underlying infrastructure for a portable resource
type Recipe struct {
	// REQUIRED; The name of the recipe within the environment to use
	Name *string `json:"name,omitempty"`

	// Key/value parameters to pass into the recipe at deployment
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

// RecipeUpdate - The recipe used to automatically deploy underlying infrastructure for a portable resource
type RecipeUpdate struct {
	// The name of the recipe within the environment to use
	Name *string `json:"name,omitempty"`

	// Key/value parameters to pass into the recipe at deployment
	Parameters map[string]interface{} `json:"parameters,omitempty"`
}

// RedisCacheListSecretsResult - The secret values for the given RedisCache resource
type RedisCacheListSecretsResult struct {
	// The connection string used to connect to the Redis cache
	ConnectionString *string `json:"connectionString,omitempty"`

	// The password for this Redis cache instance
	Password *string `json:"password,omitempty"`

	// The URL used to connect to the Redis cache
	URL *string `json:"url,omitempty"`
}

// RedisCacheProperties - RedisCache portable resource properties
type RedisCacheProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// The host name of the target Redis cache
	Host *string `json:"host,omitempty"`

	// The port value of the target Redis cache
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *Recipe `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the Redis resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secrets provided by resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// Specifies whether to enable SSL connections to the Redis cache
	TLS *bool `json:"tls,omitempty"`

	// The username for Redis cache
	Username *string `json:"username,omitempty"`

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// RedisCacheResource - RedisCache portable resource
type RedisCacheResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// The resource-specific properties for this resource.
	Properties *RedisCacheProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RedisCacheResourceListResult - The response of a RedisCacheResource list operation.
type RedisCacheResourceListResult struct {
	// REQUIRED; The RedisCacheResource items on this page
	Value []*RedisCacheResource `json:"value,omitempty"`

	// The link to the next page of items
	NextLink *string `json:"nextLink,omitempty"`
}

// RedisCacheResourceUpdate - The type used for update operations of the RedisCacheResource.
type RedisCacheResourceUpdate struct {
	// The updatable properties of the RedisCacheResource.
	Properties *RedisCacheResourceUpdateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// RedisCacheResourceUpdateProperties - The updatable properties of the RedisCacheResource.
type RedisCacheResourceUpdateProperties struct {
	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// The host name of the target Redis cache
	Host *string `json:"host,omitempty"`

	// The port value of the target Redis cache
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *RecipeUpdate `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the Redis resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secrets provided by resource
	Secrets *RedisCacheSecrets `json:"secrets,omitempty"`

	// Specifies whether to enable SSL connections to the Redis cache
	TLS *bool `json:"tls,omitempty"`

	// The username for Redis cache
	Username *string `json:"username,omitempty"`
}

// RedisCacheSecrets - The secret values for the given RedisCache resource
type RedisCacheSecrets struct {
	// The connection string used to connect to the Redis cache
	ConnectionString *string `json:"connectionString,omitempty"`

	// The password for this Redis cache instance
	Password *string `json:"password,omitempty"`

	// The URL used to connect to the Redis cache
	URL *string `json:"url,omitempty"`
}

// RedisCachesClientBeginCreateOrUpdateOptions contains the optional parameters for the RedisCachesClient.BeginCreateOrUpdate
// method.
type RedisCachesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RedisCachesClientBeginDeleteOptions contains the optional parameters for the RedisCachesClient.BeginDelete method.
type RedisCachesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RedisCachesClientBeginUpdateOptions contains the optional parameters for the RedisCachesClient.BeginUpdate method.
type RedisCachesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RedisCachesClientGetOptions contains the optional parameters for the RedisCachesClient.Get method.
type RedisCachesClientGetOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientListByScopeOptions contains the optional parameters for the RedisCachesClient.ListByScope method.
type RedisCachesClientListByScopeOptions struct {
	// placeholder for future optional parameters
}

// RedisCachesClientListSecretsOptions contains the optional parameters for the RedisCachesClient.ListSecrets method.
type RedisCachesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceReference - Describes a reference to an existing resource
type ResourceReference struct {
	// REQUIRED; Resource id of an existing resource
	ID *string `json:"id,omitempty"`
}

// ResourceStatus - Status of a resource.
type ResourceStatus struct {
	// The compute resource associated with the resource.
	Compute EnvironmentComputeClassification `json:"compute,omitempty"`

	// Properties of an output resource
	OutputResources []*OutputResource `json:"outputResources,omitempty"`
}

// SQLDatabaseListSecretsResult - The secret values for the given SqlDatabase resource
type SQLDatabaseListSecretsResult struct {
	// Connection string used to connect to the target Sql database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Sql database
	Password *string `json:"password,omitempty"`
}

// SQLDatabaseProperties - SqlDatabase properties
type SQLDatabaseProperties struct {
	// REQUIRED; Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// The name of the Sql database.
	Database *string `json:"database,omitempty"`

	// Port value of the target Sql database
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *Recipe `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the SqlDatabase resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secret values provided for the resource
	Secrets *SQLDatabaseSecrets `json:"secrets,omitempty"`

	// The fully qualified domain name of the Sql database.
	Server *string `json:"server,omitempty"`

	// Username to use when connecting to the target Sql database
	Username *string `json:"username,omitempty"`

	// READ-ONLY; The status of the asynchronous operation.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of a resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`
}

// SQLDatabaseResource - SqlDatabase portable resource
type SQLDatabaseResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// The resource-specific properties for this resource.
	Properties *SQLDatabaseProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SQLDatabaseResourceListResult - The response of a SqlDatabaseResource list operation.
type SQLDatabaseResourceListResult struct {
	// REQUIRED; The SqlDatabaseResource items on this page
	Value []*SQLDatabaseResource `json:"value,omitempty"`

	// The link to the next page of items
	NextLink *string `json:"nextLink,omitempty"`
}

// SQLDatabaseResourceUpdate - The type used for update operations of the SqlDatabaseResource.
type SQLDatabaseResourceUpdate struct {
	// The updatable properties of the SqlDatabaseResource.
	Properties *SQLDatabaseResourceUpdateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// SQLDatabaseResourceUpdateProperties - The updatable properties of the SqlDatabaseResource.
type SQLDatabaseResourceUpdateProperties struct {
	// Fully qualified resource ID for the application that the portable resource is consumed by (if applicable)
	Application *string `json:"application,omitempty"`

	// The name of the Sql database.
	Database *string `json:"database,omitempty"`

	// Fully qualified resource ID for the environment that the portable resource is linked to
	Environment *string `json:"environment,omitempty"`

	// Port value of the target Sql database
	Port *int32 `json:"port,omitempty"`

	// The recipe used to automatically deploy underlying infrastructure for the resource
	Recipe *RecipeUpdate `json:"recipe,omitempty"`

	// Specifies how the underlying service/resource is provisioned and managed.
	ResourceProvisioning *ResourceProvisioning `json:"resourceProvisioning,omitempty"`

	// List of the resource IDs that support the SqlDatabase resource
	Resources []*ResourceReference `json:"resources,omitempty"`

	// Secret values provided for the resource
	Secrets *SQLDatabaseSecrets `json:"secrets,omitempty"`

	// The fully qualified domain name of the Sql database.
	Server *string `json:"server,omitempty"`

	// Username to use when connecting to the target Sql database
	Username *string `json:"username,omitempty"`
}

// SQLDatabaseSecrets - The secret values for the given SqlDatabase resource
type SQLDatabaseSecrets struct {
	// Connection string used to connect to the target Sql database
	ConnectionString *string `json:"connectionString,omitempty"`

	// Password to use when connecting to the target Sql database
	Password *string `json:"password,omitempty"`
}

// SQLDatabasesClientBeginCreateOrUpdateOptions contains the optional parameters for the SQLDatabasesClient.BeginCreateOrUpdate
// method.
type SQLDatabasesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SQLDatabasesClientBeginDeleteOptions contains the optional parameters for the SQLDatabasesClient.BeginDelete method.
type SQLDatabasesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SQLDatabasesClientBeginUpdateOptions contains the optional parameters for the SQLDatabasesClient.BeginUpdate method.
type SQLDatabasesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SQLDatabasesClientGetOptions contains the optional parameters for the SQLDatabasesClient.Get method.
type SQLDatabasesClientGetOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesClientListByScopeOptions contains the optional parameters for the SQLDatabasesClient.ListByScope method.
type SQLDatabasesClientListByScopeOptions struct {
	// placeholder for future optional parameters
}

// SQLDatabasesClientListSecretsOptions contains the optional parameters for the SQLDatabasesClient.ListSecrets method.
type SQLDatabasesClientListSecretsOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

