// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/terraform (interfaces: TerraformExecutor)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_executor.go -package=terraform -self_package github.com/radius-project/radius/pkg/recipes/terraform github.com/radius-project/radius/pkg/recipes/terraform TerraformExecutor
//

// Package terraform is a generated GoMock package.
package terraform

import (
	context "context"
	reflect "reflect"

	tfjson "github.com/hashicorp/terraform-json"
	gomock "go.uber.org/mock/gomock"
)

// MockTerraformExecutor is a mock of TerraformExecutor interface.
type MockTerraformExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformExecutorMockRecorder
}

// MockTerraformExecutorMockRecorder is the mock recorder for MockTerraformExecutor.
type MockTerraformExecutorMockRecorder struct {
	mock *MockTerraformExecutor
}

// NewMockTerraformExecutor creates a new mock instance.
func NewMockTerraformExecutor(ctrl *gomock.Controller) *MockTerraformExecutor {
	mock := &MockTerraformExecutor{ctrl: ctrl}
	mock.recorder = &MockTerraformExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerraformExecutor) EXPECT() *MockTerraformExecutorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTerraformExecutor) Delete(arg0 context.Context, arg1 Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTerraformExecutorMockRecorder) Delete(arg0, arg1 any) *MockTerraformExecutorDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTerraformExecutor)(nil).Delete), arg0, arg1)
	return &MockTerraformExecutorDeleteCall{Call: call}
}

// MockTerraformExecutorDeleteCall wrap *gomock.Call
type MockTerraformExecutorDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTerraformExecutorDeleteCall) Return(arg0 error) *MockTerraformExecutorDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTerraformExecutorDeleteCall) Do(f func(context.Context, Options) error) *MockTerraformExecutorDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTerraformExecutorDeleteCall) DoAndReturn(f func(context.Context, Options) error) *MockTerraformExecutorDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deploy mocks base method.
func (m *MockTerraformExecutor) Deploy(arg0 context.Context, arg1 Options) (*tfjson.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1)
	ret0, _ := ret[0].(*tfjson.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockTerraformExecutorMockRecorder) Deploy(arg0, arg1 any) *MockTerraformExecutorDeployCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockTerraformExecutor)(nil).Deploy), arg0, arg1)
	return &MockTerraformExecutorDeployCall{Call: call}
}

// MockTerraformExecutorDeployCall wrap *gomock.Call
type MockTerraformExecutorDeployCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTerraformExecutorDeployCall) Return(arg0 *tfjson.State, arg1 error) *MockTerraformExecutorDeployCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTerraformExecutorDeployCall) Do(f func(context.Context, Options) (*tfjson.State, error)) *MockTerraformExecutorDeployCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTerraformExecutorDeployCall) DoAndReturn(f func(context.Context, Options) (*tfjson.State, error)) *MockTerraformExecutorDeployCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecipeMetadata mocks base method.
func (m *MockTerraformExecutor) GetRecipeMetadata(arg0 context.Context, arg1 Options) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeMetadata", arg0, arg1)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeMetadata indicates an expected call of GetRecipeMetadata.
func (mr *MockTerraformExecutorMockRecorder) GetRecipeMetadata(arg0, arg1 any) *MockTerraformExecutorGetRecipeMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeMetadata", reflect.TypeOf((*MockTerraformExecutor)(nil).GetRecipeMetadata), arg0, arg1)
	return &MockTerraformExecutorGetRecipeMetadataCall{Call: call}
}

// MockTerraformExecutorGetRecipeMetadataCall wrap *gomock.Call
type MockTerraformExecutorGetRecipeMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTerraformExecutorGetRecipeMetadataCall) Return(arg0 map[string]any, arg1 error) *MockTerraformExecutorGetRecipeMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTerraformExecutorGetRecipeMetadataCall) Do(f func(context.Context, Options) (map[string]any, error)) *MockTerraformExecutorGetRecipeMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTerraformExecutorGetRecipeMetadataCall) DoAndReturn(f func(context.Context, Options) (map[string]any, error)) *MockTerraformExecutorGetRecipeMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
