// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-radius/radius/pkg/recipes/terraform (interfaces: TerraformExecutor)

// Package terraform is a generated GoMock package.
package terraform

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	recipes "github.com/project-radius/radius/pkg/recipes"
)

// MockTerraformExecutor is a mock of TerraformExecutor interface.
type MockTerraformExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformExecutorMockRecorder
}

// MockTerraformExecutorMockRecorder is the mock recorder for MockTerraformExecutor.
type MockTerraformExecutorMockRecorder struct {
	mock *MockTerraformExecutor
}

// NewMockTerraformExecutor creates a new mock instance.
func NewMockTerraformExecutor(ctrl *gomock.Controller) *MockTerraformExecutor {
	mock := &MockTerraformExecutor{ctrl: ctrl}
	mock.recorder = &MockTerraformExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerraformExecutor) EXPECT() *MockTerraformExecutorMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockTerraformExecutor) Deploy(arg0 context.Context, arg1 Options) (*recipes.RecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1)
	ret0, _ := ret[0].(*recipes.RecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockTerraformExecutorMockRecorder) Deploy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockTerraformExecutor)(nil).Deploy), arg0, arg1)
}
