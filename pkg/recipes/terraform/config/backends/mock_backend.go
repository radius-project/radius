// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/terraform/config/backends (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -destination=./mock_backend.go -package=backends -self_package github.com/radius-project/radius/pkg/recipes/terraform/config/backends github.com/radius-project/radius/pkg/recipes/terraform/config/backends Backend
//

// Package backends is a generated GoMock package.
package backends

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// BuildBackend mocks base method.
func (m *MockBackend) BuildBackend(arg0 *recipes.ResourceMetadata) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBackend", arg0)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBackend indicates an expected call of BuildBackend.
func (mr *MockBackendMockRecorder) BuildBackend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBackend", reflect.TypeOf((*MockBackend)(nil).BuildBackend), arg0)
}

// ValidateBackendExists mocks base method.
func (m *MockBackend) ValidateBackendExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBackendExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateBackendExists indicates an expected call of ValidateBackendExists.
func (mr *MockBackendMockRecorder) ValidateBackendExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackendExists", reflect.TypeOf((*MockBackend)(nil).ValidateBackendExists), arg0, arg1)
}
