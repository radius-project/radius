// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/engine (interfaces: Engine)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_engine.go -package=engine -self_package github.com/radius-project/radius/pkg/recipes/engine github.com/radius-project/radius/pkg/recipes/engine Engine
//

// Package engine is a generated GoMock package.
package engine

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEngine) Delete(arg0 context.Context, arg1 DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEngineMockRecorder) Delete(arg0, arg1 any) *MockEngineDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEngine)(nil).Delete), arg0, arg1)
	return &MockEngineDeleteCall{Call: call}
}

// MockEngineDeleteCall wrap *gomock.Call
type MockEngineDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEngineDeleteCall) Return(arg0 error) *MockEngineDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEngineDeleteCall) Do(f func(context.Context, DeleteOptions) error) *MockEngineDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEngineDeleteCall) DoAndReturn(f func(context.Context, DeleteOptions) error) *MockEngineDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockEngine) Execute(arg0 context.Context, arg1 ExecuteOptions) (*recipes.RecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*recipes.RecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockEngineMockRecorder) Execute(arg0, arg1 any) *MockEngineExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEngine)(nil).Execute), arg0, arg1)
	return &MockEngineExecuteCall{Call: call}
}

// MockEngineExecuteCall wrap *gomock.Call
type MockEngineExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEngineExecuteCall) Return(arg0 *recipes.RecipeOutput, arg1 error) *MockEngineExecuteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEngineExecuteCall) Do(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockEngineExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEngineExecuteCall) DoAndReturn(f func(context.Context, ExecuteOptions) (*recipes.RecipeOutput, error)) *MockEngineExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecipeMetadata mocks base method.
func (m *MockEngine) GetRecipeMetadata(arg0 context.Context, arg1 GetRecipeMetadataOptions) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeMetadata", arg0, arg1)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeMetadata indicates an expected call of GetRecipeMetadata.
func (mr *MockEngineMockRecorder) GetRecipeMetadata(arg0, arg1 any) *MockEngineGetRecipeMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeMetadata", reflect.TypeOf((*MockEngine)(nil).GetRecipeMetadata), arg0, arg1)
	return &MockEngineGetRecipeMetadataCall{Call: call}
}

// MockEngineGetRecipeMetadataCall wrap *gomock.Call
type MockEngineGetRecipeMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEngineGetRecipeMetadataCall) Return(arg0 map[string]any, arg1 error) *MockEngineGetRecipeMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEngineGetRecipeMetadataCall) Do(f func(context.Context, GetRecipeMetadataOptions) (map[string]any, error)) *MockEngineGetRecipeMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEngineGetRecipeMetadataCall) DoAndReturn(f func(context.Context, GetRecipeMetadataOptions) (map[string]any, error)) *MockEngineGetRecipeMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
