// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/configloader (interfaces: SecretsLoader)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_secret_loader.go -package=configloader -self_package github.com/radius-project/radius/pkg/recipes/configloader github.com/radius-project/radius/pkg/recipes/configloader SecretsLoader
//

// Package configloader is a generated GoMock package.
package configloader

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsLoader is a mock of SecretsLoader interface.
type MockSecretsLoader struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsLoaderMockRecorder
}

// MockSecretsLoaderMockRecorder is the mock recorder for MockSecretsLoader.
type MockSecretsLoaderMockRecorder struct {
	mock *MockSecretsLoader
}

// NewMockSecretsLoader creates a new mock instance.
func NewMockSecretsLoader(ctrl *gomock.Controller) *MockSecretsLoader {
	mock := &MockSecretsLoader{ctrl: ctrl}
	mock.recorder = &MockSecretsLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsLoader) EXPECT() *MockSecretsLoaderMockRecorder {
	return m.recorder
}

// LoadSecrets mocks base method.
func (m *MockSecretsLoader) LoadSecrets(arg0 context.Context, arg1 map[string][]string) (map[string]recipes.SecretData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSecrets", arg0, arg1)
	ret0, _ := ret[0].(map[string]recipes.SecretData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSecrets indicates an expected call of LoadSecrets.
func (mr *MockSecretsLoaderMockRecorder) LoadSecrets(arg0, arg1 any) *MockSecretsLoaderLoadSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecrets", reflect.TypeOf((*MockSecretsLoader)(nil).LoadSecrets), arg0, arg1)
	return &MockSecretsLoaderLoadSecretsCall{Call: call}
}

// MockSecretsLoaderLoadSecretsCall wrap *gomock.Call
type MockSecretsLoaderLoadSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsLoaderLoadSecretsCall) Return(arg0 map[string]recipes.SecretData, arg1 error) *MockSecretsLoaderLoadSecretsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsLoaderLoadSecretsCall) Do(f func(context.Context, map[string][]string) (map[string]recipes.SecretData, error)) *MockSecretsLoaderLoadSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsLoaderLoadSecretsCall) DoAndReturn(f func(context.Context, map[string][]string) (map[string]recipes.SecretData, error)) *MockSecretsLoaderLoadSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
