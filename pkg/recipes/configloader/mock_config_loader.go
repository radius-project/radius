// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/radius-project/radius/pkg/recipes/configloader (interfaces: ConfigurationLoader)
//
// Generated by this command:
//
//	mockgen -typed -destination=./mock_config_loader.go -package=configloader -self_package github.com/radius-project/radius/pkg/recipes/configloader github.com/radius-project/radius/pkg/recipes/configloader ConfigurationLoader
//

// Package configloader is a generated GoMock package.
package configloader

import (
	context "context"
	reflect "reflect"

	recipes "github.com/radius-project/radius/pkg/recipes"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigurationLoader is a mock of ConfigurationLoader interface.
type MockConfigurationLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationLoaderMockRecorder
}

// MockConfigurationLoaderMockRecorder is the mock recorder for MockConfigurationLoader.
type MockConfigurationLoaderMockRecorder struct {
	mock *MockConfigurationLoader
}

// NewMockConfigurationLoader creates a new mock instance.
func NewMockConfigurationLoader(ctrl *gomock.Controller) *MockConfigurationLoader {
	mock := &MockConfigurationLoader{ctrl: ctrl}
	mock.recorder = &MockConfigurationLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationLoader) EXPECT() *MockConfigurationLoaderMockRecorder {
	return m.recorder
}

// LoadConfiguration mocks base method.
func (m *MockConfigurationLoader) LoadConfiguration(arg0 context.Context, arg1 recipes.ResourceMetadata) (*recipes.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*recipes.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfiguration indicates an expected call of LoadConfiguration.
func (mr *MockConfigurationLoaderMockRecorder) LoadConfiguration(arg0, arg1 any) *MockConfigurationLoaderLoadConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfiguration", reflect.TypeOf((*MockConfigurationLoader)(nil).LoadConfiguration), arg0, arg1)
	return &MockConfigurationLoaderLoadConfigurationCall{Call: call}
}

// MockConfigurationLoaderLoadConfigurationCall wrap *gomock.Call
type MockConfigurationLoaderLoadConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigurationLoaderLoadConfigurationCall) Return(arg0 *recipes.Configuration, arg1 error) *MockConfigurationLoaderLoadConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigurationLoaderLoadConfigurationCall) Do(f func(context.Context, recipes.ResourceMetadata) (*recipes.Configuration, error)) *MockConfigurationLoaderLoadConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigurationLoaderLoadConfigurationCall) DoAndReturn(f func(context.Context, recipes.ResourceMetadata) (*recipes.Configuration, error)) *MockConfigurationLoaderLoadConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoadRecipe mocks base method.
func (m *MockConfigurationLoader) LoadRecipe(arg0 context.Context, arg1 *recipes.ResourceMetadata) (*recipes.EnvironmentDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRecipe", arg0, arg1)
	ret0, _ := ret[0].(*recipes.EnvironmentDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRecipe indicates an expected call of LoadRecipe.
func (mr *MockConfigurationLoaderMockRecorder) LoadRecipe(arg0, arg1 any) *MockConfigurationLoaderLoadRecipeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRecipe", reflect.TypeOf((*MockConfigurationLoader)(nil).LoadRecipe), arg0, arg1)
	return &MockConfigurationLoaderLoadRecipeCall{Call: call}
}

// MockConfigurationLoaderLoadRecipeCall wrap *gomock.Call
type MockConfigurationLoaderLoadRecipeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigurationLoaderLoadRecipeCall) Return(arg0 *recipes.EnvironmentDefinition, arg1 error) *MockConfigurationLoaderLoadRecipeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigurationLoaderLoadRecipeCall) Do(f func(context.Context, *recipes.ResourceMetadata) (*recipes.EnvironmentDefinition, error)) *MockConfigurationLoaderLoadRecipeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigurationLoaderLoadRecipeCall) DoAndReturn(f func(context.Context, *recipes.ResourceMetadata) (*recipes.EnvironmentDefinition, error)) *MockConfigurationLoaderLoadRecipeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
