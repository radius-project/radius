# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: ubuntu-latest

variables:
- name: RADIUS_CHART_LOCATION
  value: deploy/Chart/
- name: RADIUS_CONTAINER_LOG_BASE
  value: dist/container_logs
- name: DOCKER_REGISTRY
  value: radius.azurecr.io
- name: K8S_FUNCTIONALTEST_TIMEOUT
  value: 20m
steps:
- task: GoTool@0
  inputs:
    version: '1.17'
# - script: python ./.github/scripts/get_release_version.py
#   displayName: Parse release version and set environment variables
- script: |
    export REL_CHANNEL=edge
    export REL_VERSION=pr-$(System.PullRequest.PullRequestNumber)
- script: |
    make build
    cp ./dist/linux_amd64/release/rad ./dist/
    chmod +x ./dist/rad
  displayName: Build and copy rad exe
- script: | 
    mkdir -p kind/
    curl -sSLo "kind/kind" "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.0/kind-linux-amd64"
    chmod +x "kind/kind"
    kind create cluster --name radius --wait 60s
- script: |
    mkdir -p dapr/
    curl -sSLo "dapr/" "https://github.com/dapr/cli/releases/download/v1.5.1/dapr_linux_amd64.tar.gz"
    tar -xzf dapr/dapr_linux_amd64.tar.gz
    chmod +x "dapr/dapr"
    dapr/dapr init -k --wait --timeout 600
  displayName: Download and install dapr
- script: |
    # TODO export path to right place
    echo '##vso[task.setvariable variable=path]$(PATH):/dir/to/whatever'
- script: |
    mkdir ~/.rad
    dist/rad env init kubernetes --chart ${{ variables.RADIUS_CHART_LOCATION }} --image ${{ variables.DOCKER_REGISTRY }}/radius-controller --tag $(RELEASE_VERSION)
- script: |
    export PATH=$(Build.SourcesDirectory)/dist:$PATH
    cd $(Build.SourcesDirectory)
    which rad || { echo "cannot find rad"; exit 1; }
    rad bicep download
- script: |
    export PATH=$(Build.SourcesDirectory)/dist:$PATH
    export TEST_TIMEOUT=${{ variables.K8S_FUNCTIONALTEST_TIMEOUT }}
    export RADIUS_CONTAINER_LOG_PATH=$(Build.SourcesDirectory)/${{ variables.RADIUS_CONTAINER_LOG_BASE }}
    make test-functional-kubernetes


