# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  repositories:
  - repository: ProjectRadiusSamples
    ref: edge
    type: github
    endpoint: project-radius
    name: project-radius/samples
    trigger:
      - edge

trigger: none

pr: [ main, features/*]

variables:
- name: RADIUS_CHART_LOCATION
  value: deploy/Chart/
- name: RADIUS_CONTAINER_LOG_BASE
  value: dist/container_logs
- name: RADIUS_DEPLOYMENT_TEMPLATE_LOCATION
  value: deploy/rp-full.json
- name: DOCKER_REGISTRY
  value: radiusdev.azurecr.io
- name: K8S_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: AZURE_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: REL_CHANNEL
  value: edge
- name: REL_VERSION
  value: pr-ado-$(Build.BuildNumber)
- name: INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID
  value: "/subscriptions/85716382-7362-45c3-ae03-2126e459a123/resourcegroups/radiusrplogs/providers/microsoft.operationalinsights/workspaces/rplogs"
- name: INTEGRATION_TEST_SUBSCRIPTION_ID
  value: "85716382-7362-45c3-ae03-2126e459a123"
- name: DisableDockerDetector
  value: 'true'

stages:
- stage: ImageBuild
  jobs:
  - job: PublishContainerImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.18'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: radiusdev-acr  # Service connection of radiusdev ACR: https://dev.azure.com/azure-octo/Incubations/_settings/adminservices?resourceId=09d4666f-2486-4dbf-a599-f95622e1ad29
    - script: |
        export DOCKER_TAG_VERSION=$REL_VERSION
        make docker-build && make docker-push
      displayName: publish container

- stage: FunctionalTests
  dependsOn: ImageBuild
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        CoreRP:
          targetName: corerp
        Ucp:
          targetName: ucp
        Samples:
          targetName: samples
    steps:
    ## Force the checkout directory of the radius repo to remain as if we had checked out only one Git repository, this work around the ADO behavior to checkout to a different directory breaking the assumptions of the test steps (for more info https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops#checkout-path)
    - checkout: self
      path: s
    - checkout: ProjectRadiusSamples
    - task: GoTool@0
      inputs:
        version: '1.18'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - script: |
        echo channel: $REL_CHANNEL, version: $REL_VERSION
        make build
        cp ./dist/linux_amd64/release/rad ./dist/
        chmod +x ./dist/rad
      displayName: Build and copy rad exe
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        cd $(Build.SourcesDirectory)
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
      displayName: rad bicep download
    - script: | 
        echo $OIDC_ISSUER_PUBLIC_KEY | base64 -d > sa.pub
        echo $OIDC_ISSUER_PRIVATE_KEY | base64 -d > sa.key
        mkdir -p kind/
        curl -sSLo "kind/kind" "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.0/kind-linux-amd64"
        chmod +x "kind/kind"
        # Create KinD cluster with OIDC Issuer keys
        cat <<EOF | kind create cluster --name radius --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          extraMounts:
            - hostPath: ./sa.pub
              containerPath: /etc/kubernetes/pki/sa.pub
            - hostPath: ./sa.key
              containerPath: /etc/kubernetes/pki/sa.key
          kubeadmConfigPatches:
          - |
            kind: ClusterConfiguration
            apiServer:
              extraArgs:
                service-account-issuer: $OIDC_ISSUER
                service-account-key-file: /etc/kubernetes/pki/sa.pub
                service-account-signing-key-file: /etc/kubernetes/pki/sa.key
            controllerManager:
              extraArgs:
                service-account-private-key-file: /etc/kubernetes/pki/sa.key
        EOF
      env:
        OIDC_ISSUER: $(OIDC_ISSUER)
        OIDC_ISSUER_PUBLIC_KEY: $(OIDC_ISSUER_PUBLIC_KEY)
        OIDC_ISSUER_PRIVATE_KEY: $(OIDC_ISSUER_PRIVATE_KEY)
      displayName: Create KinD Cluster
    - script: |
        helm repo add csi-secrets-store-provider-azure https://azure.github.io/secrets-store-csi-driver-provider-azure/charts
        helm install csi csi-secrets-store-provider-azure/csi-secrets-store-provider-azure
        helm repo add azure-workload-identity https://azure.github.io/azure-workload-identity/charts
        helm install workload-identity-webhook azure-workload-identity/workload-identity-webhook --namespace radius-default --create-namespace --set azureTenantID=$INTEGRATION_TEST_TENANT_ID
      env:
        INTEGRATION_TEST_TENANT_ID: $(INTEGRATION_TEST_TENANT_ID)
      displayName: Install Secret Store CSI and Workload Identity Webhook
    - script: |
        az login --service-principal \
          --username $(INTEGRATION_TEST_SP_APP_ID) \
          --password $(INTEGRATION_TEST_SP_PASSWORD) \
          --tenant $(INTEGRATION_TEST_TENANT_ID)
      displayName: az CLI login
    - script: |
        echo "##vso[task.setvariable variable=INTEGRATION_TEST_RESOURCE_GROUP_NAME]radius-$(date +%s%N)"
      displayName: Define a resource group name
    - script: az account set --subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }}
      displayName: az account set 
    - script: |
        export RANID=$(date +%s%N)
        arr=("westus3")
        index=$(expr $RANID % 1)
        export LOCATION=${arr[$index]}
        az group create \
          --location $LOCATION \
          --name $(INTEGRATION_TEST_RESOURCE_GROUP_NAME) \
          --subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }}  
        while [ $(az group exists --name $(INTEGRATION_TEST_RESOURCE_GROUP_NAME)) = false ]; do sleep 2; done
      displayName: Create the resource group
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        mkdir ~/.rad
        dist/rad env init kubernetes \
          --chart ${{ variables.RADIUS_CHART_LOCATION }} --tag ${{ variables.REL_VERSION }} \
          --appcore-image ${{ variables.DOCKER_REGISTRY }}/appcore-rp --appcore-tag ${{ variables.REL_VERSION }} \
          --ucp-image ${{ variables.DOCKER_REGISTRY }}/ucpd --ucp-tag ${{ variables.REL_VERSION }} \
          --provider-azure \
          --provider-azure-resource-group $INTEGRATION_TEST_RESOURCE_GROUP_NAME \
          --provider-azure-client-id $INTEGRATION_TEST_SP_APP_ID \
          --provider-azure-client-secret $INTEGRATION_TEST_SP_PASSWORD \
          --provider-azure-tenant-id $INTEGRATION_TEST_TENANT_ID \
          --provider-azure-subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
          --provider-aws \
          --provider-aws-access-key-id $(AWS_ACCESS_KEY_ID) \
          --provider-aws-secret-access-key $(AWS_SECRET_ACCESS_KEY) \
          --provider-aws-region $AWS_REGION
      env:
        INTEGRATION_TEST_SP_APP_ID: $(INTEGRATION_TEST_SP_APP_ID)
        INTEGRATION_TEST_TENANT_ID: $(INTEGRATION_TEST_TENANT_ID)
        INTEGRATION_TEST_SP_PASSWORD: $(INTEGRATION_TEST_SP_PASSWORD)
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_REGION: $(AWS_REGION)
      displayName: rad env init kubernetes
    - script: |
        kubectl set image deployment/bicep-de -n radius-system de=$(DE_IMAGE):$(DE_TAG)
      condition: and(ne(variables['DE_IMAGE'], ''), ne(variables['DE_TAG'], ''))
    - script: |
        kubectl get pods -n radius-system
        kubectl describe pods -n radius-system
        kubectl create secret generic mysecret --from-literal=mysecret=mysecret
      condition: always()
      continueOnError: 'true'
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        export TEST_TIMEOUT=${{ variables.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$(Build.SourcesDirectory)/${{ variables.RADIUS_CONTAINER_LOG_BASE }}/$(targetName)test
        make test-functional-$(targetName)
      displayName: run functional $(targetName) tests
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_REGION: $(AWS_REGION)
        PROJECT_RADIUS_SAMPLES_REPO_ABS_PATH: $(Build.SourcesDirectory)/samples
    - publish: $(Build.SourcesDirectory)/dist/container_logs
      displayName: Publish container logs
      artifact: $(targetName)FunctionalTest.$(Build.BuildNumber)
      condition: always()
    - script: |
        az group delete \
          --subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
          --name $INTEGRATION_TEST_RESOURCE_GROUP_NAME \
          --yes \
          --verbose \
          --no-wait
      displayName: Delete environment resource groups
      condition: always()
      continueOnError: 'true'
