# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pr: [ main ]

variables:
- name: RADIUS_CHART_LOCATION
  value: deploy/Chart/
- name: RADIUS_CONTAINER_LOG_BASE
  value: dist/container_logs
- name: DOCKER_REGISTRY
  value: radius.azurecr.io
- name: K8S_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: AZURE_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: REL_CHANNEL
  value: edge
- name: REL_VERSION
  value: pr-ado-$(Build.BuildNumber)
- name: INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID
  value: "/subscriptions/85716382-7362-45c3-ae03-2126e459a123/resourcegroups/radiusrplogs/providers/microsoft.operationalinsights/workspaces/rplogs"
- name: INTEGRATION_TEST_SUBSCRIPTION_ID
  value: "85716382-7362-45c3-ae03-2126e459a123"

stages:
- stage: ImageBuild
  jobs:
  - job: PublishContainerImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.17'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: radius-acr
    - script: |
        export DOCKER_TAG_VERSION=$REL_VERSION
        make docker-build && make docker-push
      displayName: publish container

- stage: FunctionalTest
  dependsOn: ImageBuild
  jobs:
  - job: Kubernetes
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.17'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - script: |
        echo channel: $REL_CHANNEL, version: $REL_VERSION
        make build
        cp ./dist/linux_amd64/release/rad ./dist/
        chmod +x ./dist/rad
      displayName: Build and copy rad exe
    - script: | 
        mkdir -p kind/
        curl -sSLo "kind/kind" "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.0/kind-linux-amd64"
        chmod +x "kind/kind"
        kind create cluster --name radius --wait 60s
    - script: |
        mkdir -p dapr/
        curl -sSLo "dapr/dapr_linux_amd64.tar.gz" "https://github.com/dapr/cli/releases/download/v1.5.1/dapr_linux_amd64.tar.gz"
        cd dapr/
        tar -xzf dapr_linux_amd64.tar.gz
        chmod +x "dapr"
        ./dapr init -k --wait --timeout 600
      displayName: Download and install dapr
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        mkdir ~/.rad
        dist/rad env install kubernetes --chart ${{ variables.RADIUS_CHART_LOCATION }} --image ${{ variables.DOCKER_REGISTRY }}/radius-controller --tag ${{ variables.REL_VERSION }}
      displayName: rad env install kubernetes
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        cd $(Build.SourcesDirectory)
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
      displayName: rad bicep download
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        export TEST_TIMEOUT=${{ variables.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$(Build.SourcesDirectory)/${{ variables.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-kubernetes
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        dist/rad env uninstall kubernetes
        ./.github/scripts/namespace-is-empty.sh
      displayName: rad env uninstall kubernetes

  - job: Azure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.17'
    - script: |
        make build
        cp ./dist/linux_amd64/release/rad ./dist/
        chmod +x ./dist/rad
    - script: |
        az login --service-principal \
            --username $(INTEGRATION_TEST_SP_APP_ID) \
            --password $(INTEGRATION_TEST_SP_PASSWORD) \
            --tenant $(INTEGRATION_TEST_TENANT_ID)
      env:
        INTEGRATION_TEST_SP_APP_ID: $(INTEGRATION_TEST_SP_APP_ID)
        INTEGRATION_TEST_SP_PASSWORD: $(INTEGRATION_TEST_SP_PASSWORD)
        INTEGRATION_TEST_TENANT_ID: $(INTEGRATION_TEST_TENANT_ID)
    - bash: |
        export RANID=$(date +%s%N)
        arr=("eastus" "westeurope" "westus2")
        index=$(expr $RANID % 3)
        export LOCATION=${arr[$index]}
        echo "##vso[task.setvariable variable=RADENVIRONMENT]rad-$RANID"
        go run cmd/rad/main.go \
              env init azure \
              -e rad-$RANID \
              --subscription-id ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
              --resource-group rad-$RANID \
              --location $LOCATION \
              --loganalytics-workspace-id "${{ variables.INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID }}"
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        rad env merge-credentials
        go run cmd/testenv/main.go \
            update-rp \
            --configpath ~/.rad/config.yaml \
            --image ${{ variables.DOCKER_REGISTRY }}/radius-rp:${{ variables.REL_VERSION }} \
            --check-version ${{ variables.REL_VERSION }}
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        cd $(Build.SourcesDirectory)
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
      displayName: rad bicep download
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        make test-functional-azure
      env:
        INTEGRATION_TEST_SP_APP_ID: $(INTEGRATION_TEST_SP_APP_ID)
        INTEGRATION_TEST_SP_PASSWORD: $(INTEGRATION_TEST_SP_PASSWORD)
        INTEGRATION_TEST_TENANT_ID: $(INTEGRATION_TEST_TENANT_ID)
        TEST_TIMEOUT: ${{ variables.AZURE_FUNCTIONALTEST_TIMEOUT }}
    - script: |
        az group delete \
          --subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
          --resource-group $(RADENVIRONMENT) \
          --yes \
          --verbose \
          --no-wait
        az group delete \
          --subscription ${{ variables.INTEGRATION_TEST_SUBSCRIPTION_ID }} \
          --resource-group RE-$(RADENVIRONMENT) \
          --yes \
          --verbose \
          --no-wait
      displayName: Delete environment resource groups
      condition: always()
      continueOnError: 'true'
        
        

