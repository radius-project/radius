# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pr: [ main, features/*]

variables:
- name: RADIUS_CHART_LOCATION
  value: deploy/Chart/
- name: RADIUS_CONTAINER_LOG_BASE
  value: dist/container_logs
- name: RADIUS_DEPLOYMENT_TEMPLATE_LOCATION
  value: deploy/rp-full.json
- name: DOCKER_REGISTRY
  value: radiusdev.azurecr.io
- name: K8S_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: AZURE_FUNCTIONALTEST_TIMEOUT
  value: 20m
- name: REL_CHANNEL
  value: edge
- name: REL_VERSION
  value: pr-ado-$(Build.BuildNumber)
- name: INTEGRATION_TEST_LOGANALYTICS_WORKSPACEID
  value: "/subscriptions/85716382-7362-45c3-ae03-2126e459a123/resourcegroups/radiusrplogs/providers/microsoft.operationalinsights/workspaces/rplogs"
- name: INTEGRATION_TEST_SUBSCRIPTION_ID
  value: "85716382-7362-45c3-ae03-2126e459a123"
- name: DisableDockerDetector
  value: 'true'

stages:
- stage: ImageBuild
  jobs:
  - job: PublishContainerImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.18'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: radiusdev-acr  # Service connection of radiusdev ACR: https://dev.azure.com/azure-octo/Incubations/_settings/adminservices?resourceId=09d4666f-2486-4dbf-a599-f95622e1ad29
    - script: |
        export DOCKER_TAG_VERSION=$REL_VERSION
        make docker-build && make docker-push
      displayName: publish container

- stage: FunctionalTest
  dependsOn: ImageBuild
  jobs:
  - job: ApplicationsCoreRP
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.18'
    - script: |
        echo "##vso[task.setvariable variable=goBuildCache;isOutput=true]$(go env GOCACHE)"
      displayName: Set Go cache paths
      name: gocachepath
    - task: Cache@2
      inputs:
        key: 'go | "$(Agent.OS)" | go.mod'
        restoreKeys: | 
          go | "$(Agent.OS)"
        path: $(gocachepath.goBuildCache)
      displayName: Cache GO packages
    - script: |
        echo channel: $REL_CHANNEL, version: $REL_VERSION
        make build
        cp ./dist/linux_amd64/release/rad ./dist/
        chmod +x ./dist/rad
      displayName: Build and copy rad exe
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        cd $(Build.SourcesDirectory)
        which rad || { echo "cannot find rad"; exit 1; }
        rad bicep download
      displayName: rad bicep download
    - script: | 
        mkdir -p kind/
        curl -sSLo "kind/kind" "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.0/kind-linux-amd64"
        chmod +x "kind/kind"
        kind create cluster --name radius --wait 60s
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        mkdir ~/.rad
        dist/rad env init kubernetes --chart ${{ variables.RADIUS_CHART_LOCATION }} --image ${{ variables.DOCKER_REGISTRY }}/radius-rp --tag ${{ variables.REL_VERSION }} --appcore-image ${{ variables.DOCKER_REGISTRY }}/appcore-rp --appcore-tag ${{ variables.REL_VERSION }}  --ucp-image ${{ variables.DOCKER_REGISTRY }}/ucpd --ucp-tag ${{ variables.REL_VERSION }}
      displayName: rad env init kubernetes
    - script: |
        kubectl get pods -n radius-system
        kubectl describe pods -n radius-system
      condition: always()
      continueOnError: 'true'
    - script: |
        export PATH=$(Build.SourcesDirectory)/dist:$PATH
        export TEST_TIMEOUT=${{ variables.K8S_FUNCTIONALTEST_TIMEOUT }}
        export RADIUS_CONTAINER_LOG_PATH=$(Build.SourcesDirectory)/${{ variables.RADIUS_CONTAINER_LOG_BASE }}
        make test-functional-corerp
    - publish: $(Build.SourcesDirectory)/dist/container_logs
      displayName: Publish container logs
      condition: always()